const ts = require('typescript');
const path = require('path');
const { writeFile } = require('fs/promises');

const gdevelopRootPath = path.join(__dirname, '..', '..', '..');
const gdevelopTypesDirectory = path.join(
  gdevelopRootPath,
  'GDJS',
  'Runtime',
  'types',
  'auto-generated'
);

/**
 * Generates a dts for a module using the TypeScript programmatic API.
 * @param {string} pathToModule The path to the module to generate a dts from.
 * @returns {Promise<string>} The DTS file contents as plain text.
 */
const generateDTS = (pathToModule) =>
  new Promise((resolve) => {
    ts.createProgram([pathToModule], {
      declaration: true,
      emitDeclarationOnly: true,
    }).emit(undefined, (path, dts) => resolve(dts), undefined, true);
  });

module.exports = {
  /**
   * Generates types definitions for usage of bundled ES Modules in namespaced TypeScript.
   * @param {string} modulePath The path relative to the root GDevelop folder to the module entry point.
   * @param {string} namespaceName The namespace in which to expose the module.
   * @returns {Promise<void>}
   */
  compileESModuleTypeDefinitions: async (modulePath, namespaceName) => {
    const dts = await generateDTS(modulePath);
    const finalDTS = dts.replace(
      /\/\*\* TYPES_REPLACE \*\/\r?\n([^]*)\/\*\* WITH\r?\n([^]*)\r?\n\*\//gm,'$2'
    );

    return writeFile(
      path.join(
        gdevelopTypesDirectory,
        `${path.basename(modulePath, '.ts')}-namespaced.d.ts`
      ),
      `// Types autogenerated by ${__filename} for ${modulePath}

${finalDTS}

export as namespace ${namespaceName}
`
    );
  },
};
