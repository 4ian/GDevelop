// Automatically generated by GDevelop.js/scripts/generate-dts.js

class EmObject {
  /** The object's index in the WASM memory, and thus its unique identifier. */
  ptr: number;

  /** 
   * Call this to free the object's underlying memory. It may not be used afterwards. 
   * 
   * **Call with care** - if the object owns some other objects, those will also be destroyed, 
   * or if this object is owned by another object that does not expect it to be externally deleted 
   * (e.g. it is a child of a map), objects will be put in an invalid state that will most likely
   * crash the app.
   * 
   * WIth that said, be careful to do call this method when adequate, as otherwise the memory will 
   * never be freed, causing a memory leak, which is to be avoided.
   */
  destroy(): void;
}

export class VectorString extends EmObject {
  constructor(): void;
  push_back(str: string): void;
  resize(size: number): void;
  size(): number;
  at(index: number): string;
  WRAPPED_set(index: number, str: string): void;
  clear(): void;
}

export class VectorPlatformExtension extends EmObject {
  size(): number;
  WRAPPED_at(index: number): PlatformExtension;
}

export class VectorDependencyMetadata extends EmObject {
  size(): number;
  at(index: number): DependencyMetadata;
}

export class VectorInt extends EmObject {
  size(): number;
  at(index: number): number;
}

export class VectorVariable extends EmObject {
  size(): number;
  WRAPPED_at(index: number): Variable;
}

export class MapStringString extends EmObject {
  constructor(): void;
  MAP_get(name: string): string;
  MAP_set(name: string, str: string): void;
  MAP_has(name: string): boolean;
  MAP_keys(): VectorString;
}

export class MapStringBoolean extends EmObject {
  constructor(): void;
  MAP_get(name: string): boolean;
  MAP_set(name: string, value: boolean): void;
  MAP_has(name: string): boolean;
  MAP_keys(): VectorString;
}

export class MapStringDouble extends EmObject {
  constructor(): void;
  MAP_get(name: string): number;
  MAP_set(name: string, value: number): void;
  MAP_has(name: string): number;
  MAP_keys(): VectorString;
}

export class MapStringVariable extends EmObject {
  MAP_get(name: string): Variable;
  MAP_set(name: string, prop: Variable): void;
  MAP_has(name: string): boolean;
  MAP_keys(): VectorString;
}

export class MapStringExpressionMetadata extends EmObject {
  MAP_get(name: string): ExpressionMetadata;
  MAP_set(name: string, prop: ExpressionMetadata): void;
  MAP_has(name: string): boolean;
  MAP_keys(): VectorString;
}

export class MapStringInstructionMetadata extends EmObject {
  MAP_get(name: string): InstructionMetadata;
  MAP_set(name: string, prop: InstructionMetadata): void;
  MAP_has(name: string): boolean;
  MAP_keys(): VectorString;
}

export class MapStringEventMetadata extends EmObject {
  MAP_get(name: string): EventMetadata;
  MAP_set(name: string, prop: EventMetadata): void;
  MAP_has(name: string): boolean;
  MAP_keys(): VectorString;
}

export class MapExtensionProperties extends EmObject {
  MAP_get(name: string): MapStringPropertyDescriptor;
  MAP_set(name: string, prop: MapStringPropertyDescriptor): void;
  MAP_has(name: string): boolean;
  MAP_keys(): VectorString;
}

export class SetString extends EmObject {
  constructor(): void;
  FREE_toNewVectorString(): VectorString;
}

export class ProjectHelper extends EmObject {
  STATIC_CreateNewGDJSProject(): Project;
  STATIC_InitializePlatforms(): void;
  STATIC_SanityCheckBehaviorProperty(behavior: Behavior, propertyName: string, newValue: string): string;
  STATIC_SanityCheckBehaviorsSharedDataProperty(behavior: BehaviorsSharedData, propertyName: string, newValue: string): string;
  STATIC_SanityCheckObjectProperty(configuration: ObjectConfiguration, propertyName: string, newValue: string): string;
  STATIC_SanityCheckObjectInitialInstanceProperty(configuration: ObjectConfiguration, propertyName: string, newValue: string): string;
}

export class EventsVariablesFinder extends EmObject {
  constructor(): void;
  STATIC_FindAllGlobalVariables(platform: Platform, project: Project): SetString;
  STATIC_FindAllLayoutVariables(platform: Platform, project: Project, layout: Layout): SetString;
  STATIC_FindAllObjectVariables(platform: Platform, project: Project, layout: Layout, obj: gdObject): SetString;
}

export class EventsIdentifiersFinder extends EmObject {
  constructor(): void;
  STATIC_FindAllIdentifierExpressions(platform: Platform, project: Project, layout: Layout, identifierType: string, contextObjectName: string): SetString;
}

export class EventsFunctionSelfCallChecker extends EmObject {
  STATIC_IsFreeFunctionOnlyCallingItself(project: Project, extension: EventsFunctionsExtension, eventsFunction: EventsFunction): boolean;
  STATIC_IsBehaviorFunctionOnlyCallingItself(project: Project, extension: EventsFunctionsExtension, eventsBasedBehavior: EventsBasedBehavior, eventsFunction: EventsFunction): boolean;
  STATIC_IsObjectFunctionOnlyCallingItself(project: Project, extension: EventsFunctionsExtension, eventsBasedObject: EventsBasedObject, eventsFunction: EventsFunction): boolean;
}

export class InstructionOrExpressionGroupMetadata extends EmObject {
  constructor(): void;
  SetIcon(icon: string): InstructionOrExpressionGroupMetadata;
  GetIcon(): string;
}

export class VersionWrapper extends EmObject {
  STATIC_Major(): number;
  STATIC_Minor(): number;
  STATIC_Build(): number;
  STATIC_Revision(): number;
  STATIC_FullString(): string;
  STATIC_Status(): string;
  STATIC_Year(): string;
  STATIC_Month(): string;
  STATIC_Date(): string;
}

export class Platform extends EmObject {
  GetName(): string;
  GetFullName(): string;
  GetSubtitle(): string;
  GetDescription(): string;
  GetInstructionOrExpressionGroupMetadata(name: string): InstructionOrExpressionGroupMetadata;
  IsExtensionLoaded(name: string): boolean;
  RemoveExtension(name: string): void;
  ReloadBuiltinExtensions(): void;
  GetAllPlatformExtensions(): VectorPlatformExtension;
}

export class JsPlatform extends EmObject {
  STATIC_Get(): JsPlatform;
  AddNewExtension(extension: PlatformExtension): void;
  GetName(): string;
  GetFullName(): string;
  GetSubtitle(): string;
  GetDescription(): string;
  GetInstructionOrExpressionGroupMetadata(name: string): InstructionOrExpressionGroupMetadata;
  IsExtensionLoaded(name: string): boolean;
  RemoveExtension(name: string): void;
  ReloadBuiltinExtensions(): void;
  GetAllPlatformExtensions(): VectorPlatformExtension;
}

export class PairStringVariable extends EmObject {
  constructor(): void;
  WRAPPED_GetName(): string;
  WRAPPED_GetVariable(): Variable;
}

export class Variable extends EmObject {
  constructor(): void;
  STATIC_IsPrimitive(type: Variable_Type): boolean;
  GetType(): Variable_Type;
  CastTo(type: string): void;
  SetString(str: string): void;
  GetString(): string;
  SetValue(val: number): void;
  GetValue(): number;
  SetBool(val: boolean): void;
  GetBool(): boolean;
  SetFolded(val: boolean): void;
  IsFolded(): boolean;
  GetChildrenCount(): number;
  Contains(variableToSearch: Variable, recursive: boolean): boolean;
  HasChild(str: string): boolean;
  GetChild(str: string): Variable;
  RemoveChild(name: string): void;
  RenameChild(oldName: string, newName: string): boolean;
  GetAllChildrenNames(): VectorString;
  RemoveRecursively(variableToRemove: Variable): void;
  GetAtIndex(index: number): Variable;
  PushNew(): Variable;
  RemoveAtIndex(index: number): void;
  GetAllChildrenArray(): VectorVariable;
  MoveChildInArray(oldIndex: number, newIndex: number): void;
  InsertAtIndex(variable: Variable, index: number): boolean;
  InsertChild(name: string, variable: Variable): boolean;
  SerializeTo(element: SerializerElement): void;
  UnserializeFrom(element: SerializerElement): void;
}

export class VariablesContainer extends EmObject {
  constructor(): void;
  Has(name: string): boolean;
  Get(name: string): Variable;
  GetAt(index: number): Variable;
  GetNameAt(index: number): string;
  Insert(name: string, variable: Variable, index: number): Variable;
  InsertNew(name: string, index: number): Variable;
  Remove(name: string): void;
  Rename(oldName: string, newName: string): boolean;
  Swap(firstIndex: number, secondIndex: number): void;
  Move(oldIndex: number, newIndex: number): void;
  GetPosition(name: string): number;
  Count(): number;
  Clear(): void;
  RemoveRecursively(variableToRemove: Variable): void;
  SerializeTo(element: SerializerElement): void;
  UnserializeFrom(element: SerializerElement): void;
}

export class ObjectGroup extends EmObject {
  constructor(): void;
  GetName(): string;
  SetName(name: string): void;
  AddObject(objectName: string): void;
  RemoveObject(objectName: string): void;
  Find(objectName: string): boolean;
  GetAllObjectsNames(): VectorString;
  SerializeTo(element: SerializerElement): void;
  UnserializeFrom(element: SerializerElement): void;
}

export class ObjectGroupsContainer extends EmObject {
  constructor(): void;
  Has(name: string): boolean;
  Insert(objectGroup: ObjectGroup, position: number): ObjectGroup;
  InsertNew(name: string, position: number): ObjectGroup;
  Count(): number;
  Get(name: string): ObjectGroup;
  GetAt(index: number): ObjectGroup;
  Clear(): void;
  Remove(name: string): void;
  GetPosition(name: string): number;
  Rename(oldName: string, newName: string): boolean;
  Move(oldIndex: number, newIndex: number): void;
  SerializeTo(element: SerializerElement): void;
  UnserializeFrom(element: SerializerElement): void;
}

export class PlatformSpecificAssets extends EmObject {
  constructor(): void;
  Has(platform: string, name: string): boolean;
  Get(platform: string, name: string): string;
  Remove(platform: string, name: string): void;
  Set(platform: string, name: string, resourceName: string): void;
  ExposeResources(worker: ArbitraryResourceWorker): void;
  SerializeTo(element: SerializerElement): void;
  UnserializeFrom(element: SerializerElement): void;
}

export class LoadingScreen extends EmObject {
  constructor(): void;
  IsGDevelopLogoShownDuringLoadingScreen(): boolean;
  ShowGDevelopLogoDuringLoadingScreen(show: boolean): LoadingScreen;
  GetGDevelopLogoStyle(): string;
  SetGDevelopLogoStyle(value: string): LoadingScreen;
  GetBackgroundImageResourceName(): string;
  SetBackgroundImageResourceName(value: string): LoadingScreen;
  GetBackgroundColor(): number;
  SetBackgroundColor(value: number): LoadingScreen;
  GetBackgroundFadeInDuration(): number;
  SetBackgroundFadeInDuration(value: number): LoadingScreen;
  GetMinDuration(): number;
  SetMinDuration(value: number): LoadingScreen;
  GetLogoAndProgressFadeInDuration(): number;
  SetLogoAndProgressFadeInDuration(value: number): LoadingScreen;
  GetLogoAndProgressLogoFadeInDelay(): number;
  SetLogoAndProgressLogoFadeInDelay(value: number): LoadingScreen;
  GetShowProgressBar(): boolean;
  SetShowProgressBar(value: boolean): LoadingScreen;
  GetProgressBarMaxWidth(): number;
  SetProgressBarMaxWidth(value: number): LoadingScreen;
  GetProgressBarMinWidth(): number;
  SetProgressBarMinWidth(value: number): LoadingScreen;
  GetProgressBarWidthPercent(): number;
  SetProgressBarWidthPercent(value: number): LoadingScreen;
  GetProgressBarHeight(): number;
  SetProgressBarHeight(value: number): LoadingScreen;
  GetProgressBarColor(): number;
  SetProgressBarColor(value: number): LoadingScreen;
  SerializeTo(element: SerializerElement): void;
  UnserializeFrom(element: SerializerElement): void;
}

export class Watermark extends EmObject {
  constructor(): void;
  IsGDevelopWatermarkShown(): boolean;
  ShowGDevelopWatermark(show: boolean): Watermark;
  GetPlacement(): string;
  SetPlacement(value: string): Watermark;
  SerializeTo(element: SerializerElement): void;
  UnserializeFrom(element: SerializerElement): void;
}

export class ObjectsContainer extends EmObject {
  constructor(): void;
  InsertNewObject(project: Project, type: string, name: string, pos: number): gdObject;
  InsertObject(obj: gdObject, pos: number): gdObject;
  HasObjectNamed(name: string): boolean;
  GetObject(name: string): gdObject;
  GetObjectAt(pos: number): gdObject;
  GetObjectPosition(name: string): number;
  RemoveObject(name: string): void;
  SwapObjects(first: number, second: number): void;
  MoveObject(oldIndex: number, newIndex: number): void;
  MoveObjectToAnotherContainer(name: string, newObjectsContainer: ObjectsContainer, newPosition: number): void;
  GetObjectsCount(): number;
  GetObjectGroups(): ObjectGroupsContainer;
}

export class Project extends EmObject {
  constructor(): void;
  SetName(name: string): void;
  GetName(): string;
  GetCategories(): VectorString;
  SetDescription(description: string): void;
  GetDescription(): string;
  SetVersion(authorName: string): void;
  GetVersion(): string;
  SetAuthor(authorName: string): void;
  GetAuthor(): string;
  GetAuthorIds(): VectorString;
  GetAuthorUsernames(): VectorString;
  IsPlayableWithKeyboard(): boolean;
  SetPlayableWithKeyboard(playable: boolean): void;
  IsPlayableWithGamepad(): boolean;
  SetPlayableWithGamepad(playable: boolean): void;
  IsPlayableWithMobile(): boolean;
  SetPlayableWithMobile(playable: boolean): void;
  SetPackageName(packageName: string): void;
  GetPackageName(): string;
  SetTemplateSlug(templateSlug: string): void;
  GetTemplateSlug(): string;
  SetOrientation(orientation: string): void;
  GetOrientation(): string;
  SetProjectUuid(projectUuid: string): void;
  GetProjectUuid(): string;
  ResetProjectUuid(): void;
  SetProjectFile(file: string): void;
  GetProjectFile(): string;
  SetGameResolutionSize(width: number, height: number): void;
  GetGameResolutionWidth(): number;
  GetGameResolutionHeight(): number;
  GetAdaptGameResolutionAtRuntime(): boolean;
  SetAdaptGameResolutionAtRuntime(adaptGameResolutionAtRuntime: boolean): void;
  SetScaleMode(scaleMode: string): void;
  GetScaleMode(): string;
  SetPixelsRounding(pixelsRounding: boolean): void;
  GetPixelsRounding(): boolean;
  SetSizeOnStartupMode(orientation: string): void;
  GetSizeOnStartupMode(): string;
  SetAntialiasingMode(antialiasingMode: string): void;
  GetAntialiasingMode(): string;
  SetAntialisingEnabledOnMobile(pixelsRounding: boolean): void;
  IsAntialisingEnabledOnMobile(): boolean;
  GetMaximumFPS(): number;
  SetMaximumFPS(fps: number): void;
  GetMinimumFPS(): number;
  SetMinimumFPS(fps: number): void;
  SetFolderProject(enable: boolean): void;
  IsFolderProject(): boolean;
  SetUseDeprecatedZeroAsDefaultZOrder(enable: boolean): void;
  GetUseDeprecatedZeroAsDefaultZOrder(): boolean;
  SetLastCompilationDirectory(path: string): void;
  GetLastCompilationDirectory(): string;
  GetExtensionProperties(): ExtensionProperties;
  AddPlatform(platform: Platform): void;
  GetCurrentPlatform(): Platform;
  GetPlatformSpecificAssets(): PlatformSpecificAssets;
  GetLoadingScreen(): LoadingScreen;
  GetWatermark(): Watermark;
  HasLayoutNamed(name: string): boolean;
  GetLayout(name: string): Layout;
  GetLayoutAt(index: number): Layout;
  MoveLayout(oldIndex: number, newIndex: number): void;
  SwapLayouts(first: number, second: number): void;
  GetLayoutsCount(): number;
  InsertNewLayout(name: string, position: number): Layout;
  RemoveLayout(name: string): void;
  SetFirstLayout(name: string): void;
  GetFirstLayout(): string;
  HasExternalEventsNamed(name: string): boolean;
  GetExternalEvents(name: string): ExternalEvents;
  GetExternalEventsAt(index: number): ExternalEvents;
  MoveExternalEvents(oldIndex: number, newIndex: number): void;
  SwapExternalEvents(first: number, second: number): void;
  GetExternalEventsCount(): number;
  InsertNewExternalEvents(name: string, position: number): ExternalEvents;
  RemoveExternalEvents(name: string): void;
  HasExternalLayoutNamed(name: string): boolean;
  GetExternalLayout(name: string): ExternalLayout;
  GetExternalLayoutAt(index: number): ExternalLayout;
  MoveExternalLayout(oldIndex: number, newIndex: number): void;
  SwapExternalLayouts(first: number, second: number): void;
  GetExternalLayoutsCount(): number;
  InsertNewExternalLayout(name: string, position: number): ExternalLayout;
  RemoveExternalLayout(name: string): void;
  HasEventsFunctionsExtensionNamed(name: string): boolean;
  GetEventsFunctionsExtension(name: string): EventsFunctionsExtension;
  GetEventsFunctionsExtensionAt(index: number): EventsFunctionsExtension;
  MoveEventsFunctionsExtension(oldIndex: number, newIndex: number): void;
  SwapEventsFunctionsExtensions(first: number, second: number): void;
  GetEventsFunctionsExtensionsCount(): number;
  InsertNewEventsFunctionsExtension(name: string, position: number): EventsFunctionsExtension;
  InsertEventsFunctionsExtension(eventsFunctionsExtension: EventsFunctionsExtension, position: number): EventsFunctionsExtension;
  RemoveEventsFunctionsExtension(name: string): void;
  HasEventsBasedBehavior(type: string): boolean;
  GetEventsBasedBehavior(type: string): EventsBasedBehavior;
  HasEventsBasedObject(type: string): boolean;
  GetEventsBasedObject(type: string): EventsBasedObject;
  GetVariables(): VariablesContainer;
  GetResourcesManager(): ResourcesManager;
  ExposeResources(worker: ArbitraryResourceWorker): void;
  STATIC_ValidateName(name: string): boolean;
  SerializeTo(element: SerializerElement): void;
  UnserializeFrom(element: SerializerElement): void;
  FREE_GetTypeOfBehavior(layout: Layout, name: string, searchInGroups: boolean): string;
  FREE_GetTypeOfObject(layout: Layout, name: string, searchInGroups: boolean): string;
  FREE_GetBehaviorsOfObject(layout: Layout, name: string, searchInGroups: boolean): VectorString;
  InsertNewObject(project: Project, type: string, name: string, pos: number): gdObject;
  InsertObject(obj: gdObject, pos: number): gdObject;
  HasObjectNamed(name: string): boolean;
  GetObject(name: string): gdObject;
  GetObjectAt(pos: number): gdObject;
  GetObjectPosition(name: string): number;
  RemoveObject(name: string): void;
  SwapObjects(first: number, second: number): void;
  MoveObject(oldIndex: number, newIndex: number): void;
  MoveObjectToAnotherContainer(name: string, newObjectsContainer: ObjectsContainer, newPosition: number): void;
  GetObjectsCount(): number;
  GetObjectGroups(): ObjectGroupsContainer;
}

export class ExtensionProperties extends EmObject {
  GetValue(extension: string, property: string): string;
  SetValue(extension: string, property: string, newValue: string): void;
  HasProperty(extension: string, property: string): boolean;
  GetAllExtensionProperties(extension: string, project: Project): MapStringPropertyDescriptor;
  SerializeTo(element: SerializerElement): void;
  UnserializeFrom(element: SerializerElement): void;
}

export class Behavior extends EmObject {
  constructor(): void;
  Clone(): Behavior;
  SetName(name: string): void;
  GetName(): string;
  GetTypeName(): string;
  GetProperties(): MapStringPropertyDescriptor;
  UpdateProperty(name: string, value: string): boolean;
  InitializeContent(): void;
  SerializeTo(element: SerializerElement): void;
  UnserializeFrom(element: SerializerElement): void;
}

export class BehaviorJsImplementation extends EmObject {
  constructor(): void;
  GetProperties(behaviorContent: SerializerElement): MapStringPropertyDescriptor;
  UpdateProperty(behaviorContent: SerializerElement, name: string, value: string): boolean;
  InitializeContent(behaviorContent: SerializerElement): void;
}

export class BehaviorsSharedData extends EmObject {
  constructor(): void;
  SetName(name: string): void;
  GetName(): string;
  GetTypeName(): string;
  GetProperties(): MapStringPropertyDescriptor;
  UpdateProperty(name: string, value: string): boolean;
  InitializeContent(): void;
}

export class BehaviorSharedDataJsImplementation extends EmObject {
  constructor(): void;
  GetProperties(behaviorSharedDataContent: SerializerElement): MapStringPropertyDescriptor;
  UpdateProperty(behaviorSharedDataContent: SerializerElement, name: string, value: string): boolean;
  InitializeContent(behaviorSharedDataContent: SerializerElement): void;
}

export class ObjectConfiguration extends EmObject {
  constructor(): void;
  Clone(): UniquePtrObjectConfiguration;
  GetType(): string;
  GetProperties(): MapStringPropertyDescriptor;
  UpdateProperty(name: string, value: string): boolean;
  GetInitialInstanceProperties(instance: InitialInstance, project: Project, scene: Layout): MapStringPropertyDescriptor;
  UpdateInitialInstanceProperty(instance: InitialInstance, name: string, value: string, project: Project, scene: Layout): boolean;
  ExposeResources(worker: ArbitraryResourceWorker): void;
  SerializeTo(element: SerializerElement): void;
  UnserializeFrom(project: Project, element: SerializerElement): void;
}

export class UniquePtrObjectConfiguration extends EmObject {
  get(): ObjectConfiguration;
  release(): ObjectConfiguration;
}

export class gdObject extends EmObject {
  constructor(name: string, type: string, configuration: ObjectConfiguration): void;
  Clone(): UniquePtrObject;
  SetName(name: string): void;
  GetName(): string;
  SetAssetStoreId(assetStoreId: string): void;
  GetAssetStoreId(): string;
  SetType(type: string): void;
  GetType(): string;
  SetTags(tags: string): void;
  GetTags(): string;
  Is3DObject(): boolean;
  GetConfiguration(): ObjectConfiguration;
  GetVariables(): VariablesContainer;
  GetEffects(): EffectsContainer;
  GetAllBehaviorNames(): VectorString;
  HasBehaviorNamed(name: string): boolean;
  AddNewBehavior(project: Project, type: string, name: string): Behavior;
  GetBehavior(name: string): Behavior;
  RemoveBehavior(name: string): void;
  RenameBehavior(oldName: string, name: string): boolean;
  SerializeTo(element: SerializerElement): void;
  UnserializeFrom(project: Project, element: SerializerElement): void;
}

export class UniquePtrObject extends EmObject {
  get(): gdObject;
  release(): gdObject;
}

export class ObjectJsImplementation extends EmObject {
  constructor(): void;
  Clone(): UniquePtrObjectConfiguration;
  GetProperties(): MapStringPropertyDescriptor;
  UpdateProperty(name: string, value: string): boolean;
  GetInitialInstanceProperties(instance: InitialInstance, project: Project, scene: Layout): MapStringPropertyDescriptor;
  UpdateInitialInstanceProperty(instance: InitialInstance, name: string, value: string, project: Project, scene: Layout): boolean;
  GetRawJSONContent(): string;
  SetRawJSONContent(newContent: string): ObjectJsImplementation;
  SerializeTo(element: SerializerElement): void;
  UnserializeFrom(project: Project, element: SerializerElement): void;
}

export class CustomObjectConfiguration extends EmObject {
  Clone(): UniquePtrObjectConfiguration;
  GetChildObjectConfiguration(objectName: string): ObjectConfiguration;
  GetProperties(): MapStringPropertyDescriptor;
  UpdateProperty(name: string, value: string): boolean;
  GetInitialInstanceProperties(instance: InitialInstance, project: Project, scene: Layout): MapStringPropertyDescriptor;
  UpdateInitialInstanceProperty(instance: InitialInstance, name: string, value: string, project: Project, scene: Layout): boolean;
}

export class Layout extends EmObject {
  constructor(): void;
  SetName(name: string): void;
  GetName(): string;
  SetBackgroundColor(r: number, g: number, b: number): void;
  GetBackgroundColorRed(): number;
  GetBackgroundColorGreen(): number;
  GetBackgroundColorBlue(): number;
  SetWindowDefaultTitle(name: string): void;
  GetWindowDefaultTitle(): string;
  GetInitialInstances(): InitialInstancesContainer;
  GetVariables(): VariablesContainer;
  GetEvents(): EventsList;
  UpdateBehaviorsSharedData(project: Project): void;
  GetAllBehaviorSharedDataNames(): VectorString;
  HasBehaviorSharedData(behaviorName: string): boolean;
  GetBehaviorSharedData(behaviorName: string): BehaviorsSharedData;
  InsertNewLayer(name: string, position: number): void;
  InsertLayer(layer: Layer, position: number): void;
  GetLayer(name: string): Layer;
  GetLayerAt(pos: number): Layer;
  HasLayerNamed(name: string): boolean;
  RemoveLayer(name: string): void;
  GetLayersCount(): number;
  SwapLayers(firstLayerIndex: number, secondLayerIndex: number): void;
  MoveLayer(oldIndex: number, newIndex: number): void;
  SerializeLayersTo(element: SerializerElement): void;
  UnserializeLayersFrom(element: SerializerElement): void;
  GetAssociatedEditorSettings(): EditorSettings;
  SerializeTo(element: SerializerElement): void;
  UnserializeFrom(project: Project, element: SerializerElement): void;
  SetStopSoundsOnStartup(enable: boolean): void;
  StopSoundsOnStartup(): boolean;
  InsertNewObject(project: Project, type: string, name: string, pos: number): gdObject;
  InsertObject(obj: gdObject, pos: number): gdObject;
  HasObjectNamed(name: string): boolean;
  GetObject(name: string): gdObject;
  GetObjectAt(pos: number): gdObject;
  GetObjectPosition(name: string): number;
  RemoveObject(name: string): void;
  SwapObjects(first: number, second: number): void;
  MoveObject(oldIndex: number, newIndex: number): void;
  MoveObjectToAnotherContainer(name: string, newObjectsContainer: ObjectsContainer, newPosition: number): void;
  GetObjectsCount(): number;
  GetObjectGroups(): ObjectGroupsContainer;
}

export class ExternalEvents extends EmObject {
  constructor(): void;
  SetName(name: string): void;
  GetName(): string;
  GetAssociatedLayout(): string;
  SetAssociatedLayout(name: string): void;
  GetEvents(): EventsList;
  SerializeTo(element: SerializerElement): void;
  UnserializeFrom(project: Project, element: SerializerElement): void;
}

export class ExternalLayout extends EmObject {
  constructor(): void;
  SetName(name: string): void;
  GetName(): string;
  SetAssociatedLayout(name: string): void;
  GetAssociatedLayout(): string;
  GetInitialInstances(): InitialInstancesContainer;
  GetAssociatedEditorSettings(): EditorSettings;
  SerializeTo(element: SerializerElement): void;
  UnserializeFrom(element: SerializerElement): void;
}

export class Effect extends EmObject {
  constructor(): void;
  SetName(name_: string): void;
  GetName(): string;
  SetEffectType(effectType_: string): void;
  GetEffectType(): string;
  SetDoubleParameter(name: string, value: number): void;
  GetDoubleParameter(name: string): number;
  SetStringParameter(name: string, value: string): void;
  GetStringParameter(name: string): string;
  SetBooleanParameter(name: string, value: boolean): void;
  GetBooleanParameter(name: string): boolean;
  GetAllDoubleParameters(): MapStringDouble;
  GetAllStringParameters(): MapStringString;
  GetAllBooleanParameters(): MapStringBoolean;
  ClearParameters(): void;
  SerializeTo(element: SerializerElement): void;
  UnserializeFrom(element: SerializerElement): void;
}

export class EffectsContainer extends EmObject {
  constructor(): void;
  HasEffectNamed(name: string): boolean;
  GetEffect(name: string): Effect;
  GetEffectAt(index: number): Effect;
  GetEffectPosition(name: string): number;
  GetEffectsCount(): number;
  InsertNewEffect(name: string, position: number): Effect;
  InsertEffect(theEffect: Effect, position: number): void;
  RemoveEffect(name: string): void;
  SwapEffects(firstEffectIndex: number, secondEffectIndex: number): void;
  MoveEffect(oldIndex: number, newIndex: number): void;
  Clear(): void;
  SerializeTo(element: SerializerElement): void;
  UnserializeFrom(element: SerializerElement): void;
}

export class Layer extends EmObject {
  constructor(): void;
  SetName(name: string): void;
  GetName(): string;
  SetRenderingType(renderingType: string): void;
  GetRenderingType(): string;
  SetVisibility(visible: boolean): void;
  GetVisibility(): boolean;
  SetLocked(isLocked: boolean): void;
  IsLocked(): boolean;
  SetLightingLayer(lightingLayer: boolean): void;
  IsLightingLayer(): boolean;
  SetFollowBaseLayerCamera(followBaseLayerCamera: boolean): void;
  IsFollowingBaseLayerCamera(): boolean;
  GetCamera3DNearPlaneDistance(): number;
  SetCamera3DNearPlaneDistance(distance: number): void;
  GetCamera3DFarPlaneDistance(): number;
  SetCamera3DFarPlaneDistance(distance: number): void;
  GetCamera3DFieldOfView(): number;
  SetCamera3DFieldOfView(angle: number): void;
  SetAmbientLightColor(r: number, g: number, b: number): void;
  GetAmbientLightColorRed(): number;
  GetAmbientLightColorGreen(): number;
  GetAmbientLightColorBlue(): number;
  GetEffects(): EffectsContainer;
  GetCameraCount(): number;
  SetCameraCount(cameraCount: number): void;
  SerializeTo(element: SerializerElement): void;
  UnserializeFrom(element: SerializerElement): void;
}

export class PropertyDescriptor extends EmObject {
  constructor(propValue: string): void;
  SetValue(value: string): PropertyDescriptor;
  GetValue(): string;
  SetType(type: string): PropertyDescriptor;
  GetType(): string;
  SetLabel(label: string): PropertyDescriptor;
  GetLabel(): string;
  SetDescription(label: string): PropertyDescriptor;
  GetDescription(): string;
  SetGroup(label: string): PropertyDescriptor;
  GetGroup(): string;
  AddExtraInfo(type: string): PropertyDescriptor;
  SetExtraInfo(info: VectorString): PropertyDescriptor;
  GetExtraInfo(): VectorString;
  SetHidden(enable: boolean): PropertyDescriptor;
  GetMeasurementUnit(): MeasurementUnit;
  SetMeasurementUnit(measurementUnit: MeasurementUnit): PropertyDescriptor;
  IsHidden(): boolean;
  SerializeTo(element: SerializerElement): void;
  UnserializeFrom(element: SerializerElement): void;
  SerializeValuesTo(element: SerializerElement): void;
  UnserializeValuesFrom(element: SerializerElement): void;
}

export class MeasurementUnit extends EmObject {
  constructor(name: string, label: string, description: string): void;
  GetName(): string;
  GetLabel(): string;
  GetDescription(): string;
  GetElementsWithWords(): string;
  GetElementsCount(): number;
  GetElementPower(elementIndex: number): number;
  GetElementBaseUnit(elementIndex: number): MeasurementBaseUnit;
  IsUndefined(): boolean;
  STATIC_ApplyTranslation(): void;
  STATIC_GetUndefined(): MeasurementUnit;
  STATIC_GetDimensionless(): MeasurementUnit;
  STATIC_GetDegreeAngle(): MeasurementUnit;
  STATIC_GetSecond(): MeasurementUnit;
  STATIC_GetPixel(): MeasurementUnit;
  STATIC_GetPixelSpeed(): MeasurementUnit;
  STATIC_GetPixelAcceleration(): MeasurementUnit;
  STATIC_GetNewton(): MeasurementUnit;
  STATIC_GetDefaultMeasurementUnitsCount(): number;
  STATIC_GetDefaultMeasurementUnitAtIndex(index: number): MeasurementUnit;
  STATIC_GetDefaultMeasurementUnitByName(name: string): MeasurementUnit;
  STATIC_HasDefaultMeasurementUnitNamed(name: string): boolean;
}

export class MeasurementBaseUnit extends EmObject {
  constructor(name: string, symbol: string, quantity: string): void;
  GetName(): string;
  GetSymbol(): string;
  GetQuantity(): string;
}

export class NamedPropertyDescriptor extends EmObject {
  constructor(): void;
  SetName(name: string): PropertyDescriptor;
  GetName(): string;
}

export class MapStringPropertyDescriptor extends EmObject {
  constructor(): void;
  MAP_getOrCreate(name: string): PropertyDescriptor;
  MAP_get(name: string): PropertyDescriptor;
  MAP_set(name: string, prop: PropertyDescriptor): void;
  MAP_has(name: string): boolean;
  MAP_keys(): VectorString;
}

export class MapStringSerializerValue extends EmObject {
  constructor(): void;
  MAP_getOrCreate(name: string): SerializerValue;
  MAP_get(name: string): SerializerValue;
  MAP_set(name: string, prop: SerializerValue): void;
  MAP_has(name: string): boolean;
  MAP_keys(): VectorString;
}

export class VectorPairStringSharedPtrSerializerElement extends EmObject {
  size(): number;
  WRAPPED_GetString(id: number): string;
  WRAPPED_GetSharedPtrSerializerElement(id: number): SharedPtrSerializerElement;
}

export class Resource extends EmObject {
  constructor(): void;
  Clone(): Resource;
  SetName(name: string): void;
  GetName(): string;
  SetKind(kind: string): void;
  GetKind(): string;
  IsUserAdded(): boolean;
  SetUserAdded(yes: boolean): void;
  UseFile(): boolean;
  SetFile(file: string): void;
  GetFile(): string;
  SetMetadata(metadata: string): void;
  GetMetadata(): string;
  SetOrigin(originName: string, originIdentifier: string): void;
  GetOriginName(): string;
  GetOriginIdentifier(): string;
  GetProperties(): MapStringPropertyDescriptor;
  UpdateProperty(name: string, value: string): boolean;
  SerializeTo(element: SerializerElement): void;
  UnserializeFrom(element: SerializerElement): void;
}

export class ResourcesManager extends EmObject {
  constructor(): void;
  GetAllResourceNames(): VectorString;
  FindFilesNotInResources(filesToCheck: VectorString): VectorString;
  HasResource(name: string): boolean;
  GetResource(name: string): Resource;
  GetResourceNameWithOrigin(originName: string, originIdentifier: string): string;
  GetResourceNameWithFile(file: string): string;
  AddResource(res: Resource): boolean;
  RemoveResource(name: string): void;
  RenameResource(oldName: string, name: string): void;
  GetResourcePosition(name: string): number;
  MoveResourceUpInList(oldName: string): boolean;
  MoveResourceDownInList(oldName: string): boolean;
  MoveResource(oldIndex: number, newIndex: number): void;
}

export class ImageResource extends EmObject {
  constructor(): void;
  IsSmooth(): boolean;
  SetSmooth(enable: boolean): void;
}

export class AudioResource extends EmObject {
  constructor(): void;
}

export class FontResource extends EmObject {
  constructor(): void;
}

export class BitmapFontResource extends EmObject {
  constructor(): void;
}

export class VideoResource extends EmObject {
  constructor(): void;
}

export class JsonResource extends EmObject {
  constructor(): void;
}

export class TilemapResource extends EmObject {
  constructor(): void;
}

export class TilesetResource extends EmObject {
  constructor(): void;
}

export class InitialInstance extends EmObject {
  constructor(): void;
  SetObjectName(name: string): void;
  GetObjectName(): string;
  GetX(): number;
  SetX(x: number): void;
  GetY(): number;
  SetY(y: number): void;
  GetZ(): number;
  SetZ(z: number): void;
  GetAngle(): number;
  SetAngle(angle: number): void;
  GetRotationX(): number;
  SetRotationX(rotationX: number): void;
  GetRotationY(): number;
  SetRotationY(rotationY: number): void;
  IsLocked(): boolean;
  SetLocked(lock: boolean): void;
  IsSealed(): boolean;
  SetSealed(seal: boolean): void;
  GetZOrder(): number;
  SetZOrder(zOrder: number): void;
  GetLayer(): string;
  SetLayer(layer: string): void;
  SetHasCustomSize(enable: boolean): void;
  HasCustomSize(): boolean;
  SetHasCustomDepth(enable: boolean): void;
  HasCustomDepth(): boolean;
  SetCustomWidth(width: number): void;
  GetCustomWidth(): number;
  SetCustomHeight(height: number): void;
  GetCustomHeight(): number;
  SetCustomDepth(depth: number): void;
  GetCustomDepth(): number;
  ResetPersistentUuid(): InitialInstance;
  UpdateCustomProperty(name: string, value: string, project: Project, layout: Layout): void;
  GetCustomProperties(project: Project, layout: Layout): MapStringPropertyDescriptor;
  GetRawDoubleProperty(name: string): number;
  GetRawStringProperty(name: string): string;
  SetRawDoubleProperty(name: string, value: number): void;
  SetRawStringProperty(name: string, value: string): void;
  GetVariables(): VariablesContainer;
  SerializeTo(element: SerializerElement): void;
  UnserializeFrom(element: SerializerElement): void;
}

export class InitialInstancesContainer extends EmObject {
  constructor(): void;
  Clone(): InitialInstancesContainer;
  GetInstancesCount(): number;
  IterateOverInstances(func: InitialInstanceFunctor): void;
  IterateOverInstancesWithZOrdering(func: InitialInstanceFunctor, layer: string): void;
  MoveInstancesToLayer(fromLayer: string, toLayer: string): void;
  RemoveAllInstancesOnLayer(layer: string): void;
  RemoveInitialInstancesOfObject(obj: string): void;
  HasInstancesOfObject(objectName: string): boolean;
  SomeInstancesAreOnLayer(layer: string): boolean;
  RenameInstancesOfObject(oldName: string, newName: string): void;
  RemoveInstance(inst: InitialInstance): void;
  InsertNewInitialInstance(): InitialInstance;
  InsertInitialInstance(inst: InitialInstance): InitialInstance;
  SerializeTo(element: SerializerElement): void;
  UnserializeFrom(element: SerializerElement): void;
}

export class HighestZOrderFinder extends EmObject {
  constructor(): void;
  RestrictSearchToLayer(layer: string): void;
  GetHighestZOrder(): number;
  GetLowestZOrder(): number;
  Reset(): void;
  GetInstancesCount(): number;
}

export class InitialInstanceJSFunctor extends EmObject {
  constructor(): void;
  invoke(instance: InitialInstance): void;
}

export class SerializerValue extends EmObject {
  GetBool(): boolean;
  GetString(): string;
  GetInt(): number;
  GetDouble(): number;
  GetRawString(): string;
  IsBoolean(): boolean;
  IsString(): boolean;
  IsInt(): boolean;
  IsDouble(): boolean;
}

export class SerializerElement extends EmObject {
  constructor(): void;
  SetBoolValue(value: boolean): void;
  SetStringValue(value: string): void;
  SetIntValue(value: number): void;
  SetDoubleValue(value: number): void;
  GetValue(): SerializerValue;
  GetBoolValue(): boolean;
  GetStringValue(): string;
  GetIntValue(): number;
  GetDoubleValue(): number;
  IsValueUndefined(): boolean;
  SetBoolAttribute(name: string, value: boolean): SerializerElement;
  SetStringAttribute(name: string, value: string): SerializerElement;
  SetIntAttribute(name: string, value: number): SerializerElement;
  SetDoubleAttribute(name: string, value: number): SerializerElement;
  GetBoolAttribute(name: string): boolean;
  GetStringAttribute(name: string): string;
  GetIntAttribute(name: string): number;
  GetDoubleAttribute(name: string): number;
  ConsiderAsArray(): void;
  ConsideredAsArray(): boolean;
  AddChild(str: string): SerializerElement;
  GetChild(str: string): SerializerElement;
  WRAPPED_SetChild(str: string, element: SerializerElement): void;
  HasChild(str: string): boolean;
  GetAllChildren(): VectorPairStringSharedPtrSerializerElement;
  GetAllAttributes(): MapStringSerializerValue;
}

export class SharedPtrSerializerElement extends EmObject {
  get(): SerializerElement;
  reset(): void;
}

export class Serializer extends EmObject {
  STATIC_ToJSON(element: SerializerElement): string;
  STATIC_FromJSON(json: string): SerializerElement;
}

export class InstructionsList extends EmObject {
  constructor(): void;
  Insert(instr: Instruction, pos: number): Instruction;
  InsertInstructions(list: InstructionsList, begin: number, end: number, pos: number): void;
  size(): number;
  WRAPPED_set(index: number, instr: Instruction): void;
  Contains(instr: Instruction): boolean;
  Get(index: number): Instruction;
  Remove(instr: Instruction): void;
  RemoveAt(index: number): void;
  Clear(): void;
  SerializeTo(element: SerializerElement): void;
  UnserializeFrom(project: Project, element: SerializerElement): void;
}

export class Instruction extends EmObject {
  constructor(): void;
  CLONE_Instruction(): Instruction;
  SetType(type: string): void;
  GetType(): string;
  SetInverted(inverted: boolean): void;
  IsInverted(): boolean;
  SetAwaited(awaited: boolean): void;
  IsAwaited(): boolean;
  SetParameter(id: number, value: string): void;
  GetParameter(id: number): Expression;
  SetParametersCount(count: number): void;
  GetParametersCount(): number;
  GetSubInstructions(): InstructionsList;
}

export class Expression extends EmObject {
  GetPlainString(): string;
  GetRootNode(): ExpressionNode;
}

export class VectorPairStringTextFormatting extends EmObject {
  size(): number;
  WRAPPED_GetString(id: number): string;
  WRAPPED_GetTextFormatting(id: number): TextFormatting;
}

export class TextFormatting extends EmObject {
  GetUserData(): number;
}

export class InstructionSentenceFormatter extends EmObject {
  STATIC_Get(): InstructionSentenceFormatter;
  GetAsFormattedText(instr: Instruction, metadata: InstructionMetadata): VectorPairStringTextFormatting;
}

export class ExtraInformation extends EmObject {
  SetFunctionName(functionName_: string): ExtraInformation;
  SetAsyncFunctionName(functionName_: string): ExtraInformation;
  SetManipulatedType(type_: string): ExtraInformation;
  SetGetter(getter: string): ExtraInformation;
  SetMutators(mutators: MapStringString): ExtraInformation;
  SetIncludeFile(includeFile: string): ExtraInformation;
  AddIncludeFile(includeFile: string): ExtraInformation;
  GetIncludeFiles(): VectorString;
}

export class ExpressionCodeGenerationInformation extends EmObject {
  SetFunctionName(functionName: string): ExpressionCodeGenerationInformation;
  SetStatic(): ExpressionCodeGenerationInformation;
  SetIncludeFile(includeFile: string): ExpressionCodeGenerationInformation;
  AddIncludeFile(includeFile: string): ExpressionCodeGenerationInformation;
  GetIncludeFiles(): VectorString;
}

export class ParameterOptions extends EmObject {
  SetDescription(description: string): ParameterOptions;
  SetTypeExtraInfo(typeExtraInfo: string): ParameterOptions;
  STATIC_MakeNewOptions(): ParameterOptions;
}

export class InstructionMetadata extends EmObject {
  constructor(): void;
  GetFullName(): string;
  GetDescription(): string;
  GetSentence(): string;
  GetGroup(): string;
  GetIconFilename(): string;
  GetSmallIconFilename(): string;
  GetHelpPath(): string;
  CanHaveSubInstructions(): boolean;
  GetParameter(index: number): ParameterMetadata;
  GetParametersCount(): number;
  GetParameters(): VectorParameterMetadata;
  GetUsageComplexity(): number;
  IsHidden(): boolean;
  IsPrivate(): boolean;
  IsAsync(): boolean;
  IsOptionallyAsync(): boolean;
  IsRelevantForLayoutEvents(): boolean;
  IsRelevantForFunctionEvents(): boolean;
  IsRelevantForAsynchronousFunctionEvents(): boolean;
  IsRelevantForCustomObjectEvents(): boolean;
  SetCanHaveSubInstructions(): InstructionMetadata;
  SetHelpPath(helpPath: string): InstructionMetadata;
  SetHidden(): InstructionMetadata;
  SetPrivate(): InstructionMetadata;
  SetRelevantForLayoutEventsOnly(): InstructionMetadata;
  SetRelevantForFunctionEventsOnly(): InstructionMetadata;
  SetRelevantForAsynchronousFunctionEventsOnly(): InstructionMetadata;
  SetRelevantForCustomObjectEventsOnly(): InstructionMetadata;
  AddParameter(type: string, description: string, optionalObjectType: string, parameterIsOptional: boolean): InstructionMetadata;
  AddCodeOnlyParameter(type: string, supplementaryInformation: string): InstructionMetadata;
  SetDefaultValue(defaultValue: string): InstructionMetadata;
  SetParameterLongDescription(longDescription: string): InstructionMetadata;
  SetParameterExtraInfo(extraInfo: string): InstructionMetadata;
  UseStandardOperatorParameters(type: string, options: ParameterOptions): InstructionMetadata;
  UseStandardRelationalOperatorParameters(type: string, options: ParameterOptions): InstructionMetadata;
  SetRequiresBaseObjectCapability(capability: string): InstructionMetadata;
  GetRequiredBaseObjectCapability(): string;
  MarkAsSimple(): InstructionMetadata;
  MarkAsAdvanced(): InstructionMetadata;
  MarkAsComplex(): InstructionMetadata;
  GetCodeExtraInformation(): ExtraInformation;
  SetFunctionName(functionName: string): ExtraInformation;
  SetAsyncFunctionName(functionName: string): ExtraInformation;
  SetIncludeFile(includeFile: string): InstructionMetadata;
  AddIncludeFile(includeFile: string): InstructionMetadata;
  GetIncludeFiles(): VectorString;
}

export class ExpressionMetadata extends EmObject {
  constructor(returnType: string, extensionNamespace: string, name: string, fullname: string, description: string, group: string, smallicon: string): void;
  GetReturnType(): string;
  GetFullName(): string;
  GetDescription(): string;
  GetGroup(): string;
  GetSmallIconFilename(): string;
  GetHelpPath(): string;
  IsShown(): boolean;
  IsPrivate(): boolean;
  IsRelevantForLayoutEvents(): boolean;
  IsRelevantForFunctionEvents(): boolean;
  IsRelevantForAsynchronousFunctionEvents(): boolean;
  IsRelevantForCustomObjectEvents(): boolean;
  GetParameter(id: number): ParameterMetadata;
  GetParametersCount(): number;
  GetParameters(): VectorParameterMetadata;
  SetHidden(): ExpressionMetadata;
  SetPrivate(): ExpressionMetadata;
  SetRelevantForLayoutEventsOnly(): ExpressionMetadata;
  SetRelevantForFunctionEventsOnly(): ExpressionMetadata;
  SetRelevantForAsynchronousFunctionEventsOnly(): ExpressionMetadata;
  SetRelevantForCustomObjectEventsOnly(): ExpressionMetadata;
  AddParameter(type: string, description: string, optionalObjectType: string, parameterIsOptional: boolean): ExpressionMetadata;
  AddCodeOnlyParameter(type: string, supplementaryInformation: string): ExpressionMetadata;
  SetDefaultValue(defaultValue: string): ExpressionMetadata;
  SetParameterLongDescription(longDescription: string): ExpressionMetadata;
  SetParameterExtraInfo(extraInfo: string): ExpressionMetadata;
  SetRequiresBaseObjectCapability(capability: string): ExpressionMetadata;
  GetRequiredBaseObjectCapability(): string;
  GetCodeExtraInformation(): ExpressionCodeGenerationInformation;
  SetFunctionName(functionName: string): ExpressionCodeGenerationInformation;
  SetIncludeFile(includeFile: string): ExpressionMetadata;
  AddIncludeFile(includeFile: string): ExpressionMetadata;
  GetIncludeFiles(): VectorString;
}

export class MultipleInstructionMetadata extends EmObject {
  AddParameter(type: string, description: string, optionalObjectType: string, parameterIsOptional: boolean): MultipleInstructionMetadata;
  AddCodeOnlyParameter(type: string, supplementaryInformation: string): MultipleInstructionMetadata;
  SetDefaultValue(defaultValue: string): MultipleInstructionMetadata;
  SetParameterLongDescription(longDescription: string): MultipleInstructionMetadata;
  SetParameterExtraInfo(extraInfo: string): MultipleInstructionMetadata;
  UseStandardParameters(type: string, options: ParameterOptions): MultipleInstructionMetadata;
  SetHidden(): MultipleInstructionMetadata;
  SetFunctionName(functionName: string): MultipleInstructionMetadata;
  SetGetter(getter: string): MultipleInstructionMetadata;
  SetIncludeFile(includeFile: string): MultipleInstructionMetadata;
  AddIncludeFile(includeFile: string): MultipleInstructionMetadata;
  GetIncludeFiles(): VectorString;
  MarkAsSimple(): MultipleInstructionMetadata;
  MarkAsAdvanced(): MultipleInstructionMetadata;
  MarkAsComplex(): MultipleInstructionMetadata;
  SetPrivate(): MultipleInstructionMetadata;
}

export class DependencyMetadata extends EmObject {
  constructor(): void;
  GetName(): string;
  SetName(name_: string): DependencyMetadata;
  GetExportName(): string;
  SetExportName(exportName_: string): DependencyMetadata;
  GetVersion(): string;
  SetVersion(version_: string): DependencyMetadata;
  GetDependencyType(): string;
  SetDependencyType(dependencyType_: string): DependencyMetadata;
  SetExtraSetting(settingName: string, settingValue: PropertyDescriptor): DependencyMetadata;
  GetAllExtraSettings(): MapStringPropertyDescriptor;
  OnlyIfSomeExtraSettingsNonEmpty(): DependencyMetadata;
  OnlyIfOtherDependencyIsExported(otherDependency: string): DependencyMetadata;
  CopyFrom(dependencyMetadata: DependencyMetadata): void;
}

export class ParameterMetadata extends EmObject {
  constructor(): void;
  GetType(): string;
  SetType(type_: string): ParameterMetadata;
  GetName(): string;
  SetName(name_: string): ParameterMetadata;
  GetExtraInfo(): string;
  SetExtraInfo(extraInfo_: string): ParameterMetadata;
  IsOptional(): boolean;
  SetOptional(optional_: boolean): ParameterMetadata;
  GetDescription(): string;
  SetDescription(description_: string): ParameterMetadata;
  GetLongDescription(): string;
  SetLongDescription(longDescription_: string): ParameterMetadata;
  IsCodeOnly(): boolean;
  SetCodeOnly(codeOnly_: boolean): ParameterMetadata;
  GetDefaultValue(): string;
  SetDefaultValue(defaultValue_: string): ParameterMetadata;
  SetValueTypeMetadata(type: ValueTypeMetadata): ParameterMetadata;
  GetValueTypeMetadata(): ValueTypeMetadata;
  STATIC_IsObject(param: string): boolean;
  STATIC_IsBehavior(param: string): boolean;
  STATIC_IsExpression(type_: string, parameterType: string): boolean;
  SerializeTo(element: SerializerElement): void;
  UnserializeFrom(element: SerializerElement): void;
}

export class ValueTypeMetadata extends EmObject {
  constructor(): void;
  GetName(): string;
  SetName(name_: string): ValueTypeMetadata;
  GetExtraInfo(): string;
  SetExtraInfo(extraInfo_: string): ValueTypeMetadata;
  IsOptional(): boolean;
  SetOptional(optional_: boolean): ValueTypeMetadata;
  GetDefaultValue(): string;
  SetDefaultValue(defaultValue_: string): ValueTypeMetadata;
  IsObject(): boolean;
  IsBehavior(): boolean;
  IsNumber(): boolean;
  IsString(): boolean;
  IsVariable(): boolean;
  STATIC_IsTypeObject(parameterType: string): boolean;
  STATIC_IsTypeBehavior(parameterType: string): boolean;
  STATIC_IsTypeExpression(type: string, parameterType: string): boolean;
  STATIC_GetPrimitiveValueType(parameterType: string): string;
  STATIC_ConvertPropertyTypeToValueType(propertyType: string): string;
  SerializeTo(element: SerializerElement): void;
  UnserializeFrom(element: SerializerElement): void;
}

export class VectorParameterMetadata extends EmObject {
  constructor(): void;
  push_back(parameterMetadata: ParameterMetadata): void;
  size(): number;
  at(index: number): ParameterMetadata;
  WRAPPED_set(index: number, parameterMetadata: ParameterMetadata): void;
  FREE_removeFromVectorParameterMetadata(index: number): void;
  FREE_swapInVectorParameterMetadata(oldIndex: number, newIndex: number): void;
  clear(): void;
}

export class ParameterMetadataTools extends EmObject {
  STATIC_ParametersToObjectsContainer(project: Project, parameters: VectorParameterMetadata, outputObjectsContainer: ObjectsContainer): void;
  STATIC_GetObjectParameterIndexFor(parameters: VectorParameterMetadata, parameterIndex: number): number;
}

export class EventsFunctionTools extends EmObject {
  STATIC_FreeEventsFunctionToObjectsContainer(project: Project, functionsContainer: EventsFunctionsContainer, eventsFunction: EventsFunction, outputGlobalObjectsContainer: ObjectsContainer, outputObjectsContainer: ObjectsContainer): void;
  STATIC_BehaviorEventsFunctionToObjectsContainer(project: Project, eventsBasedBehavior: EventsBasedBehavior, eventsFunction: EventsFunction, outputGlobalObjectsContainer: ObjectsContainer, outputObjectsContainer: ObjectsContainer): void;
  STATIC_ObjectEventsFunctionToObjectsContainer(project: Project, eventsBasedObject: EventsBasedObject, eventsFunction: EventsFunction, outputGlobalObjectsContainer: ObjectsContainer, outputObjectsContainer: ObjectsContainer): void;
}

export class ObjectMetadata extends EmObject {
  GetName(): string;
  GetFullName(): string;
  GetDescription(): string;
  GetIconFilename(): string;
  GetHelpPath(): string;
  GetCategoryFullName(): string;
  SetCategoryFullName(categoryFullName: string): ObjectMetadata;
  AddScopedCondition(name: string, fullname: string, description: string, sentence: string, group: string, icon: string, smallicon: string): InstructionMetadata;
  AddScopedAction(name: string, fullname: string, description: string, sentence: string, group: string, icon: string, smallicon: string): InstructionMetadata;
  AddCondition(name: string, fullname: string, description: string, sentence: string, group: string, icon: string, smallicon: string): InstructionMetadata;
  AddAction(name: string, fullname: string, description: string, sentence: string, group: string, icon: string, smallicon: string): InstructionMetadata;
  AddExpression(name: string, fullname: string, description: string, group: string, smallicon: string): ExpressionMetadata;
  AddStrExpression(name: string, fullname: string, description: string, group: string, smallicon: string): ExpressionMetadata;
  AddExpressionAndCondition(type: string, name: string, fullname: string, description: string, sentenceName: string, group: string, icon: string): MultipleInstructionMetadata;
  AddExpressionAndConditionAndAction(type: string, name: string, fullname: string, description: string, sentenceName: string, group: string, icon: string): MultipleInstructionMetadata;
  GetAllActions(): MapStringInstructionMetadata;
  GetAllConditions(): MapStringInstructionMetadata;
  GetAllExpressions(): MapStringExpressionMetadata;
  GetAllStrExpressions(): MapStringExpressionMetadata;
  SetIncludeFile(includeFile: string): ObjectMetadata;
  AddIncludeFile(includeFile: string): ObjectMetadata;
  GetUnsupportedBaseObjectCapabilities(): SetString;
  AddUnsupportedBaseObjectCapability(capability: string): ObjectMetadata;
  IsUnsupportedBaseObjectCapability(capability: string): boolean;
  SetHidden(): ObjectMetadata;
  IsHidden(): boolean;
}

export class BehaviorMetadata extends EmObject {
  GetName(): string;
  GetFullName(): string;
  GetDefaultName(): string;
  GetDescription(): string;
  GetGroup(): string;
  GetIconFilename(): string;
  GetHelpPath(): string;
  AddScopedCondition(name: string, fullname: string, description: string, sentence: string, group: string, icon: string, smallicon: string): InstructionMetadata;
  AddScopedAction(name: string, fullname: string, description: string, sentence: string, group: string, icon: string, smallicon: string): InstructionMetadata;
  AddCondition(name: string, fullname: string, description: string, sentence: string, group: string, icon: string, smallicon: string): InstructionMetadata;
  AddAction(name: string, fullname: string, description: string, sentence: string, group: string, icon: string, smallicon: string): InstructionMetadata;
  AddExpression(name: string, fullname: string, description: string, group: string, smallicon: string): ExpressionMetadata;
  AddStrExpression(name: string, fullname: string, description: string, group: string, smallicon: string): ExpressionMetadata;
  AddExpressionAndCondition(type: string, name: string, fullname: string, description: string, sentenceName: string, group: string, icon: string): MultipleInstructionMetadata;
  AddExpressionAndConditionAndAction(type: string, name: string, fullname: string, description: string, sentenceName: string, group: string, icon: string): MultipleInstructionMetadata;
  AddDuplicatedAction(newActionName: string, copiedActionName: string): InstructionMetadata;
  AddDuplicatedCondition(newConditionName: string, copiedConditionName: string): InstructionMetadata;
  AddDuplicatedExpression(newExpressionName: string, copiedExpressionName: string): ExpressionMetadata;
  AddDuplicatedStrExpression(newExpressionName: string, copiedExpressionName: string): ExpressionMetadata;
  GetAllActions(): MapStringInstructionMetadata;
  GetAllConditions(): MapStringInstructionMetadata;
  GetAllExpressions(): MapStringExpressionMetadata;
  GetAllStrExpressions(): MapStringExpressionMetadata;
  SetIncludeFile(includeFile: string): BehaviorMetadata;
  AddIncludeFile(includeFile: string): BehaviorMetadata;
  AddRequiredFile(resourceFile: string): BehaviorMetadata;
  SetObjectType(objectType: string): BehaviorMetadata;
  GetObjectType(): string;
  IsPrivate(): boolean;
  SetPrivate(): BehaviorMetadata;
  Get(): Behavior;
  GetSharedDataInstance(): BehaviorsSharedData;
}

export class EffectMetadata extends EmObject {
  SetFullName(fullName: string): EffectMetadata;
  SetDescription(description: string): EffectMetadata;
  SetHelpPath(helpPath: string): EffectMetadata;
  SetIncludeFile(includeFile: string): EffectMetadata;
  AddIncludeFile(includeFile: string): EffectMetadata;
  MarkAsNotWorkingForObjects(): EffectMetadata;
  MarkAsOnlyWorkingFor2D(): EffectMetadata;
  MarkAsOnlyWorkingFor3D(): EffectMetadata;
  MarkAsUnique(): EffectMetadata;
  GetType(): string;
  GetFullName(): string;
  GetDescription(): string;
  GetHelpPath(): string;
  IsMarkedAsNotWorkingForObjects(): boolean;
  IsMarkedAsOnlyWorkingFor2D(): boolean;
  IsMarkedAsOnlyWorkingFor3D(): boolean;
  IsMarkedAsUnique(): boolean;
  GetProperties(): MapStringPropertyDescriptor;
}

export class EventMetadata extends EmObject {
  GetFullName(): string;
  GetDescription(): string;
  GetGroup(): string;
}

export class PlatformExtension extends EmObject {
  constructor(): void;
  SetExtensionInformation(name: string, fullname: string, description: string, author: string, license: string): PlatformExtension;
  SetExtensionHelpPath(helpPath: string): PlatformExtension;
  SetIconUrl(iconUrl: string): PlatformExtension;
  SetCategory(category: string): PlatformExtension;
  AddInstructionOrExpressionGroupMetadata(name: string): InstructionOrExpressionGroupMetadata;
  MarkAsDeprecated(): void;
  AddExpressionAndCondition(type: string, name: string, fullname: string, description: string, sentenceName: string, group: string, icon: string): MultipleInstructionMetadata;
  AddExpressionAndConditionAndAction(type: string, name: string, fullname: string, description: string, sentenceName: string, group: string, icon: string): MultipleInstructionMetadata;
  AddCondition(name: string, fullname: string, description: string, sentence: string, group: string, icon: string, smallicon: string): InstructionMetadata;
  AddAction(name: string, fullname: string, description: string, sentence: string, group: string, icon: string, smallicon: string): InstructionMetadata;
  AddExpression(name: string, fullname: string, description: string, group: string, smallicon: string): ExpressionMetadata;
  AddStrExpression(name: string, fullname: string, description: string, group: string, smallicon: string): ExpressionMetadata;
  AddDependency(): DependencyMetadata;
  WRAPPED_AddBehavior(name: string, fullname: string, defaultName: string, description: string, group: string, icon24x24: string, className: string, instance: Behavior, sharedDatasInstance: BehaviorsSharedData): BehaviorMetadata;
  AddEventsBasedBehavior(name: string, fullname: string, description: string, group: string, icon24x24: string): BehaviorMetadata;
  WRAPPED_AddObject(name: string, fullname: string, description: string, icon24x24: string, instance: ObjectConfiguration): ObjectMetadata;
  AddEventsBasedObject(name: string, fullname: string, description: string, icon24x24: string): ObjectMetadata;
  AddEffect(name: string): EffectMetadata;
  RegisterProperty(name: string): PropertyDescriptor;
  GetFullName(): string;
  GetName(): string;
  GetCategory(): string;
  GetDescription(): string;
  GetAuthor(): string;
  GetLicense(): string;
  GetHelpPath(): string;
  GetIconUrl(): string;
  IsBuiltin(): boolean;
  GetNameSpace(): string;
  AddDuplicatedAction(newActionName: string, copiedActionName: string): InstructionMetadata;
  AddDuplicatedCondition(newConditionName: string, copiedConditionName: string): InstructionMetadata;
  AddDuplicatedExpression(newExpressionName: string, copiedExpressionName: string): ExpressionMetadata;
  AddDuplicatedStrExpression(newExpressionName: string, copiedExpressionName: string): ExpressionMetadata;
  GetExtensionObjectsTypes(): VectorString;
  GetBehaviorsTypes(): VectorString;
  GetExtensionEffectTypes(): VectorString;
  GetObjectMetadata(type: string): ObjectMetadata;
  GetBehaviorMetadata(type: string): BehaviorMetadata;
  GetEffectMetadata(type: string): EffectMetadata;
  GetAllEvents(): MapStringEventMetadata;
  GetAllActions(): MapStringInstructionMetadata;
  GetAllConditions(): MapStringInstructionMetadata;
  GetAllExpressions(): MapStringExpressionMetadata;
  GetAllStrExpressions(): MapStringExpressionMetadata;
  GetAllActionsForObject(objectType: string): MapStringInstructionMetadata;
  GetAllConditionsForObject(objectType: string): MapStringInstructionMetadata;
  GetAllExpressionsForObject(objectType: string): MapStringExpressionMetadata;
  GetAllStrExpressionsForObject(objectType: string): MapStringExpressionMetadata;
  GetAllActionsForBehavior(autoType: string): MapStringInstructionMetadata;
  GetAllConditionsForBehavior(autoType: string): MapStringInstructionMetadata;
  GetAllExpressionsForBehavior(autoType: string): MapStringExpressionMetadata;
  GetAllStrExpressionsForBehavior(autoType: string): MapStringExpressionMetadata;
  GetAllProperties(): MapStringPropertyDescriptor;
  GetAllDependencies(): VectorDependencyMetadata;
  STATIC_GetNamespaceSeparator(): string;
}

export class EventsList extends EmObject {
  constructor(): void;
  InsertEvent(event: BaseEvent, pos: number): BaseEvent;
  InsertNewEvent(project: Project, type: string, pos: number): BaseEvent;
  InsertEvents(list: EventsList, begin: number, end: number, pos: number): void;
  GetEventAt(pos: number): BaseEvent;
  RemoveEventAt(pos: number): void;
  RemoveEvent(event: BaseEvent): void;
  GetEventsCount(): number;
  Contains(event: BaseEvent, recursive: boolean): boolean;
  MoveEventToAnotherEventsList(eventToMove: BaseEvent, newEventsList: EventsList, newPosition: number): boolean;
  IsEmpty(): boolean;
  Clear(): void;
  SerializeTo(element: SerializerElement): void;
  UnserializeFrom(project: Project, element: SerializerElement): void;
}

export class BaseEvent extends EmObject {
  constructor(): void;
  Clone(): BaseEvent;
  GetType(): string;
  SetType(type: string): void;
  IsExecutable(): boolean;
  CanHaveSubEvents(): boolean;
  HasSubEvents(): boolean;
  GetSubEvents(): EventsList;
  IsDisabled(): boolean;
  SetDisabled(disable: boolean): void;
  IsFolded(): boolean;
  SetFolded(folded: boolean): void;
  SerializeTo(element: SerializerElement): void;
  UnserializeFrom(project: Project, element: SerializerElement): void;
}

export class StandardEvent extends EmObject {
  constructor(): void;
  GetConditions(): InstructionsList;
  GetActions(): InstructionsList;
  Clone(): StandardEvent;
  GetType(): string;
  SetType(type: string): void;
  IsExecutable(): boolean;
  CanHaveSubEvents(): boolean;
  HasSubEvents(): boolean;
  GetSubEvents(): EventsList;
  IsDisabled(): boolean;
  SetDisabled(disable: boolean): void;
  IsFolded(): boolean;
  SetFolded(folded: boolean): void;
  SerializeTo(element: SerializerElement): void;
  UnserializeFrom(project: Project, element: SerializerElement): void;
}

export class RepeatEvent extends EmObject {
  constructor(): void;
  GetConditions(): InstructionsList;
  GetActions(): InstructionsList;
  SetRepeatExpression(expr: string): void;
  GetRepeatExpression(): string;
  Clone(): RepeatEvent;
  GetType(): string;
  SetType(type: string): void;
  IsExecutable(): boolean;
  CanHaveSubEvents(): boolean;
  HasSubEvents(): boolean;
  GetSubEvents(): EventsList;
  IsDisabled(): boolean;
  SetDisabled(disable: boolean): void;
  IsFolded(): boolean;
  SetFolded(folded: boolean): void;
  SerializeTo(element: SerializerElement): void;
  UnserializeFrom(project: Project, element: SerializerElement): void;
}

export class WhileEvent extends EmObject {
  constructor(): void;
  GetConditions(): InstructionsList;
  GetWhileConditions(): InstructionsList;
  GetActions(): InstructionsList;
  Clone(): WhileEvent;
  GetType(): string;
  SetType(type: string): void;
  IsExecutable(): boolean;
  CanHaveSubEvents(): boolean;
  HasSubEvents(): boolean;
  GetSubEvents(): EventsList;
  IsDisabled(): boolean;
  SetDisabled(disable: boolean): void;
  IsFolded(): boolean;
  SetFolded(folded: boolean): void;
  SerializeTo(element: SerializerElement): void;
  UnserializeFrom(project: Project, element: SerializerElement): void;
}

export class ForEachEvent extends EmObject {
  constructor(): void;
  SetObjectToPick(objects: string): void;
  GetObjectToPick(): string;
  GetConditions(): InstructionsList;
  GetActions(): InstructionsList;
  Clone(): ForEachEvent;
  GetType(): string;
  SetType(type: string): void;
  IsExecutable(): boolean;
  CanHaveSubEvents(): boolean;
  HasSubEvents(): boolean;
  GetSubEvents(): EventsList;
  IsDisabled(): boolean;
  SetDisabled(disable: boolean): void;
  IsFolded(): boolean;
  SetFolded(folded: boolean): void;
  SerializeTo(element: SerializerElement): void;
  UnserializeFrom(project: Project, element: SerializerElement): void;
}

export class ForEachChildVariableEvent extends EmObject {
  constructor(): void;
  GetConditions(): InstructionsList;
  GetActions(): InstructionsList;
  GetIterableVariableName(): string;
  GetKeyIteratorVariableName(): string;
  GetValueIteratorVariableName(): string;
  SetIterableVariableName(newName: string): void;
  SetKeyIteratorVariableName(newName: string): void;
  SetValueIteratorVariableName(newName: string): void;
  Clone(): ForEachChildVariableEvent;
  GetType(): string;
  SetType(type: string): void;
  IsExecutable(): boolean;
  CanHaveSubEvents(): boolean;
  HasSubEvents(): boolean;
  GetSubEvents(): EventsList;
  IsDisabled(): boolean;
  SetDisabled(disable: boolean): void;
  IsFolded(): boolean;
  SetFolded(folded: boolean): void;
  SerializeTo(element: SerializerElement): void;
  UnserializeFrom(project: Project, element: SerializerElement): void;
}

export class CommentEvent extends EmObject {
  constructor(): void;
  GetComment(): string;
  SetComment(type: string): void;
  SetBackgroundColor(r: number, g: number, b: number): void;
  GetBackgroundColorRed(): number;
  GetBackgroundColorGreen(): number;
  GetBackgroundColorBlue(): number;
  SetTextColor(r: number, g: number, b: number): void;
  GetTextColorRed(): number;
  GetTextColorGreen(): number;
  GetTextColorBlue(): number;
  Clone(): CommentEvent;
  GetType(): string;
  SetType(type: string): void;
  IsExecutable(): boolean;
  CanHaveSubEvents(): boolean;
  HasSubEvents(): boolean;
  GetSubEvents(): EventsList;
  IsDisabled(): boolean;
  SetDisabled(disable: boolean): void;
  IsFolded(): boolean;
  SetFolded(folded: boolean): void;
  SerializeTo(element: SerializerElement): void;
  UnserializeFrom(project: Project, element: SerializerElement): void;
}

export class GroupEvent extends EmObject {
  constructor(): void;
  SetName(name: string): void;
  GetName(): string;
  SetBackgroundColor(r: number, g: number, b: number): void;
  GetBackgroundColorR(): number;
  GetBackgroundColorG(): number;
  GetBackgroundColorB(): number;
  SetSource(source: string): void;
  GetSource(): string;
  GetCreationParameters(): VectorString;
  GetCreationTimestamp(): number;
  SetCreationTimestamp(ts: number): void;
  Clone(): GroupEvent;
  GetType(): string;
  SetType(type: string): void;
  IsExecutable(): boolean;
  CanHaveSubEvents(): boolean;
  HasSubEvents(): boolean;
  GetSubEvents(): EventsList;
  IsDisabled(): boolean;
  SetDisabled(disable: boolean): void;
  IsFolded(): boolean;
  SetFolded(folded: boolean): void;
  SerializeTo(element: SerializerElement): void;
  UnserializeFrom(project: Project, element: SerializerElement): void;
}

export class LinkEvent extends EmObject {
  constructor(): void;
  SetTarget(name: string): void;
  GetTarget(): string;
  GetIncludeConfig(): number;
  SetIncludeAllEvents(): void;
  SetIncludeEventsGroup(source: string): void;
  GetEventsGroupName(): string;
  SetIncludeStartAndEnd(start: number, end: number): void;
  GetIncludeStart(): number;
  GetIncludeEnd(): number;
  Clone(): LinkEvent;
  GetType(): string;
  SetType(type: string): void;
  IsExecutable(): boolean;
  CanHaveSubEvents(): boolean;
  HasSubEvents(): boolean;
  GetSubEvents(): EventsList;
  IsDisabled(): boolean;
  SetDisabled(disable: boolean): void;
  IsFolded(): boolean;
  SetFolded(folded: boolean): void;
  SerializeTo(element: SerializerElement): void;
  UnserializeFrom(project: Project, element: SerializerElement): void;
}

export class EventsRemover extends EmObject {
  constructor(): void;
  AddEventToRemove(eventToRemove: BaseEvent): void;
  AddInstructionToRemove(instructionToRemove: Instruction): void;
  Launch(events: EventsList): void;
}

export class EventsListUnfolder extends EmObject {
  STATIC_UnfoldWhenContaining(list: EventsList, eventToContain: BaseEvent): void;
  STATIC_FoldAll(list: EventsList): void;
  STATIC_UnfoldToLevel(list: EventsList, maxLevel: number, currentLevel?: number = 0): void;
}

export class EventsSearchResult extends EmObject {
  IsEventsListValid(): boolean;
  GetEventsList(): EventsList;
  GetPositionInList(): number;
  IsEventValid(): boolean;
  GetEvent(): BaseEvent;
}

export class VectorEventsSearchResult extends EmObject {
  constructor(): void;
  CLONE_VectorEventsSearchResult(): VectorEventsSearchResult;
  push_back(result: EventsSearchResult): void;
  resize(size: number): void;
  size(): number;
  at(index: number): EventsSearchResult;
  WRAPPED_set(index: number, result: EventsSearchResult): void;
  clear(): void;
}

export class EventsRefactorer extends EmObject {
  STATIC_RenameObjectInEvents(platform: Platform, project: ObjectsContainer, layout: ObjectsContainer, events: EventsList, oldName: string, newName: string): void;
  STATIC_RemoveObjectInEvents(platform: Platform, project: ObjectsContainer, layout: ObjectsContainer, events: EventsList, name: string): void;
  STATIC_ReplaceStringInEvents(project: ObjectsContainer, layout: ObjectsContainer, events: EventsList, toReplace: string, newString: string, matchCase: boolean, inConditions: boolean, inActions: boolean, inEventStrings: boolean): VectorEventsSearchResult;
  STATIC_SearchInEvents(platform: Platform, events: EventsList, search: string, matchCase: boolean, inConditions: boolean, inActions: boolean, inEventStrings: boolean, inEventSentences: boolean): VectorEventsSearchResult;
}

export class UnfilledRequiredBehaviorPropertyProblem extends EmObject {
  GetSourceProject(): Project;
  GetSourceObject(): gdObject;
  GetSourceBehaviorContent(): Behavior;
  GetSourcePropertyName(): string;
  GetExpectedBehaviorTypeName(): string;
}

export class VectorUnfilledRequiredBehaviorPropertyProblem extends EmObject {
  size(): number;
  at(index: number): UnfilledRequiredBehaviorPropertyProblem;
}

export class ProjectBrowserHelper extends EmObject {
  STATIC_ExposeProjectEvents(project: Project, worker: ArbitraryEventsWorker): void;
}

export class WholeProjectRefactorer extends EmObject {
  STATIC_RenameEventsFunctionsExtension(project: Project, eventsFunctionsExtension: EventsFunctionsExtension, oldName: string, newName: string): void;
  STATIC_UpdateExtensionNameInEventsBasedBehavior(project: Project, eventsFunctionsExtension: EventsFunctionsExtension, eventsBasedBehavior: EventsBasedBehavior, sourceExtensionName: string): void;
  STATIC_RenameEventsFunction(project: Project, eventsFunctionsExtension: EventsFunctionsExtension, oldName: string, newName: string): void;
  STATIC_RenameBehaviorEventsFunction(project: Project, eventsFunctionsExtension: EventsFunctionsExtension, eventsBasedBehavior: EventsBasedBehavior, oldName: string, newName: string): void;
  STATIC_RenameObjectEventsFunction(project: Project, eventsFunctionsExtension: EventsFunctionsExtension, eventsBasedObject: EventsBasedObject, oldName: string, newName: string): void;
  STATIC_MoveEventsFunctionParameter(project: Project, eventsFunctionsExtension: EventsFunctionsExtension, functionName: string, oldIndex: number, newIndex: number): void;
  STATIC_MoveBehaviorEventsFunctionParameter(project: Project, eventsFunctionsExtension: EventsFunctionsExtension, eventsBasedBehavior: EventsBasedBehavior, functionName: string, oldIndex: number, newIndex: number): void;
  STATIC_MoveObjectEventsFunctionParameter(project: Project, eventsFunctionsExtension: EventsFunctionsExtension, eventsBasedObject: EventsBasedObject, functionName: string, oldIndex: number, newIndex: number): void;
  STATIC_RenameEventsBasedBehaviorProperty(project: Project, eventsFunctionsExtension: EventsFunctionsExtension, eventsBasedBehavior: EventsBasedBehavior, oldName: string, newName: string): void;
  STATIC_RenameEventsBasedBehaviorSharedProperty(project: Project, eventsFunctionsExtension: EventsFunctionsExtension, eventsBasedBehavior: EventsBasedBehavior, oldName: string, newName: string): void;
  STATIC_RenameEventsBasedObjectProperty(project: Project, eventsFunctionsExtension: EventsFunctionsExtension, eventsBasedObject: EventsBasedObject, oldName: string, newName: string): void;
  STATIC_RenameEventsBasedBehavior(project: Project, eventsFunctionsExtension: EventsFunctionsExtension, oldName: string, newName: string): void;
  STATIC_RenameEventsBasedObject(project: Project, eventsFunctionsExtension: EventsFunctionsExtension, oldName: string, newName: string): void;
  STATIC_RenameLayout(project: Project, oldName: string, newName: string): void;
  STATIC_RenameExternalLayout(project: Project, oldName: string, newName: string): void;
  STATIC_RenameExternalEvents(project: Project, oldName: string, newName: string): void;
  STATIC_RenameLayer(project: Project, layout: Layout, oldName: string, newName: string): void;
  STATIC_RenameLayerEffect(project: Project, layout: Layout, layer: Layer, oldName: string, newName: string): void;
  STATIC_RenameObjectAnimation(project: Project, layout: Layout, gdObject: gdObject, oldName: string, newName: string): void;
  STATIC_RenameObjectPoint(project: Project, layout: Layout, gdObject: gdObject, oldName: string, newName: string): void;
  STATIC_RenameObjectEffect(project: Project, layout: Layout, gdObject: gdObject, oldName: string, newName: string): void;
  STATIC_ObjectOrGroupRenamedInLayout(project: Project, layout: Layout, oldName: string, newName: string, isObjectGroup: boolean): void;
  STATIC_ObjectOrGroupRemovedInLayout(project: Project, layout: Layout, objectName: string, isObjectGroup: boolean, removeEventsAndGroups: boolean): void;
  STATIC_ObjectOrGroupRenamedInEventsFunction(project: Project, eventsFunction: EventsFunction, globalObjectsContainer: ObjectsContainer, objectsContainer: ObjectsContainer, oldName: string, newName: string, isObjectGroup: boolean): void;
  STATIC_ObjectOrGroupRemovedInEventsFunction(project: Project, eventsFunction: EventsFunction, globalObjectsContainer: ObjectsContainer, objectsContainer: ObjectsContainer, objectName: string, isObjectGroup: boolean, removeEventsAndGroups: boolean): void;
  STATIC_ObjectOrGroupRenamedInEventsBasedObject(project: Project, globalObjectsContainer: ObjectsContainer, eventsBasedObject: EventsBasedObject, oldName: string, newName: string, isObjectGroup: boolean): void;
  STATIC_ObjectOrGroupRemovedInEventsBasedObject(project: Project, eventsBasedObject: EventsBasedObject, globalObjectsContainer: ObjectsContainer, objectsContainer: ObjectsContainer, objectName: string, isObjectGroup: boolean, removeEventsAndGroups: boolean): void;
  STATIC_GlobalObjectOrGroupRenamed(project: Project, oldName: string, newName: string, isObjectGroup: boolean): void;
  STATIC_GlobalObjectOrGroupRemoved(project: Project, objectName: string, isObjectGroup: boolean, removeEventsAndGroups: boolean): void;
  STATIC_GetAllObjectTypesUsingEventsBasedBehavior(project: Project, eventsFunctionsExtension: EventsFunctionsExtension, eventsBasedBehavior: EventsBasedBehavior): SetString;
  STATIC_EnsureBehaviorEventsFunctionsProperParameters(eventsFunctionsExtension: EventsFunctionsExtension, eventsBasedBehavior: EventsBasedBehavior): void;
  STATIC_EnsureObjectEventsFunctionsProperParameters(eventsFunctionsExtension: EventsFunctionsExtension, eventsBasedObject: EventsBasedObject): void;
  STATIC_AddBehaviorAndRequiredBehaviors(project: Project, obj: gdObject, behaviorType: string, behaviorName: string): void;
  STATIC_AddRequiredBehaviorsFor(project: Project, obj: gdObject, behaviorName: string): void;
  STATIC_FindDependentBehaviorNames(project: Project, obj: gdObject, behaviorName: string): VectorString;
  STATIC_FindInvalidRequiredBehaviorProperties(project: Project): VectorUnfilledRequiredBehaviorPropertyProblem;
  STATIC_GetBehaviorsWithType(obj: gdObject, type: string): VectorString;
  STATIC_FixInvalidRequiredBehaviorProperties(project: Project): boolean;
}

export class PropertyFunctionGenerator extends EmObject {
  STATIC_GenerateBehaviorGetterAndSetter(project: Project, extension: EventsFunctionsExtension, eventsBasedBehavior: EventsBasedBehavior, property: NamedPropertyDescriptor, isSharedProperties: boolean): void;
  STATIC_GenerateObjectGetterAndSetter(project: Project, extension: EventsFunctionsExtension, eventsBasedObject: EventsBasedObject, property: NamedPropertyDescriptor): void;
  STATIC_CanGenerateGetterAndSetter(eventsBasedBehavior: AbstractEventsBasedEntity, property: NamedPropertyDescriptor): boolean;
  STATIC_GenerateConditionSkeleton(project: Project, eventFunction: EventsFunction): void;
}

export class UsedExtensionsResult extends EmObject {
  GetUsedExtensions(): SetString;
}

export class UsedExtensionsFinder extends EmObject {
  STATIC_ScanProject(project: Project): UsedExtensionsResult;
}

export class InstructionsCountEvaluator extends EmObject {
  STATIC_ScanProject(project: Project): number;
}

export class ExtensionAndBehaviorMetadata extends EmObject {
  GetExtension(): PlatformExtension;
  GetMetadata(): BehaviorMetadata;
}

export class ExtensionAndObjectMetadata extends EmObject {
  GetExtension(): PlatformExtension;
  GetMetadata(): ObjectMetadata;
}

export class ExtensionAndEffectMetadata extends EmObject {
  GetExtension(): PlatformExtension;
  GetMetadata(): EffectMetadata;
}

export class ExtensionAndInstructionMetadata extends EmObject {
  GetExtension(): PlatformExtension;
  GetMetadata(): InstructionMetadata;
}

export class ExtensionAndExpressionMetadata extends EmObject {
  GetExtension(): PlatformExtension;
  GetMetadata(): ExpressionMetadata;
}

export class MetadataProvider extends EmObject {
  STATIC_GetExtensionAndBehaviorMetadata(p: Platform, type: string): ExtensionAndBehaviorMetadata;
  STATIC_GetExtensionAndObjectMetadata(p: Platform, type: string): ExtensionAndObjectMetadata;
  STATIC_GetExtensionAndEffectMetadata(p: Platform, type: string): ExtensionAndEffectMetadata;
  STATIC_GetExtensionAndActionMetadata(p: Platform, type: string): ExtensionAndInstructionMetadata;
  STATIC_GetExtensionAndConditionMetadata(p: Platform, type: string): ExtensionAndInstructionMetadata;
  STATIC_GetExtensionAndExpressionMetadata(p: Platform, type: string): ExtensionAndExpressionMetadata;
  STATIC_GetExtensionAndObjectExpressionMetadata(p: Platform, objectType: string, type: string): ExtensionAndExpressionMetadata;
  STATIC_GetExtensionAndBehaviorExpressionMetadata(p: Platform, autoType: string, type: string): ExtensionAndExpressionMetadata;
  STATIC_GetExtensionAndStrExpressionMetadata(p: Platform, type: string): ExtensionAndExpressionMetadata;
  STATIC_GetExtensionAndObjectStrExpressionMetadata(p: Platform, objectType: string, type: string): ExtensionAndExpressionMetadata;
  STATIC_GetExtensionAndBehaviorStrExpressionMetadata(p: Platform, autoType: string, type: string): ExtensionAndExpressionMetadata;
  STATIC_GetBehaviorMetadata(p: Platform, type: string): BehaviorMetadata;
  STATIC_GetObjectMetadata(p: Platform, type: string): ObjectMetadata;
  STATIC_GetEffectMetadata(p: Platform, type: string): EffectMetadata;
  STATIC_GetActionMetadata(p: Platform, type: string): InstructionMetadata;
  STATIC_GetConditionMetadata(p: Platform, type: string): InstructionMetadata;
  STATIC_GetExpressionMetadata(p: Platform, type: string): ExpressionMetadata;
  STATIC_GetObjectExpressionMetadata(p: Platform, objectType: string, type: string): ExpressionMetadata;
  STATIC_GetBehaviorExpressionMetadata(p: Platform, autoType: string, type: string): ExpressionMetadata;
  STATIC_GetStrExpressionMetadata(p: Platform, type: string): ExpressionMetadata;
  STATIC_GetObjectStrExpressionMetadata(p: Platform, objectType: string, type: string): ExpressionMetadata;
  STATIC_GetBehaviorStrExpressionMetadata(p: Platform, autoType: string, type: string): ExpressionMetadata;
  STATIC_IsBadExpressionMetadata(metadata: ExpressionMetadata): boolean;
  STATIC_IsBadBehaviorMetadata(metadata: BehaviorMetadata): boolean;
}

export class ExpressionParserDiagnostic extends EmObject {
  IsError(): boolean;
  GetMessage(): string;
  GetStartPosition(): number;
  GetEndPosition(): number;
}

export class VectorExpressionParserDiagnostic extends EmObject {
  size(): number;
  at(index: number): ExpressionParserDiagnostic;
}

export class ExpressionValidator extends EmObject {
  constructor(platform: Platform, globalObjectsContainer: ObjectsContainer, objectsContainer: ObjectsContainer, rootType: string): void;
  GetAllErrors(): VectorExpressionParserDiagnostic;
  GetFatalErrors(): VectorExpressionParserDiagnostic;
}

export class ExpressionCompletionDescription extends EmObject {
  GetCompletionKind(): ExpressionCompletionDescription_CompletionKind;
  GetType(): string;
  GetPrefix(): string;
  GetObjectName(): string;
  GetBehaviorName(): string;
  IsExact(): boolean;
  IsLastParameter(): boolean;
  GetReplacementStartPosition(): number;
  GetReplacementEndPosition(): number;
  GetParameterMetadata(): ParameterMetadata;
}

export class VectorExpressionCompletionDescription extends EmObject {
  size(): number;
  at(index: number): ExpressionCompletionDescription;
}

export class ExpressionCompletionFinder extends EmObject {
  STATIC_GetCompletionDescriptionsFor(platform: Platform, globalObjectsContainer: ObjectsContainer, objectsContainer: ObjectsContainer, rootType: string, node: ExpressionNode, location: number): VectorExpressionCompletionDescription;
  GetCompletionDescriptions(): VectorExpressionCompletionDescription;
}

export class ExpressionNodeLocationFinder extends EmObject {
  STATIC_GetNodeAtPosition(node: ExpressionNode, searchedPosition: number): ExpressionNode;
}

export class ExpressionTypeFinder extends EmObject {
  STATIC_GetType(platform: Platform, globalObjectsContainer: ObjectsContainer, objectsContainer: ObjectsContainer, rootType: string, node: ExpressionNode): string;
}

export class ExpressionNode extends EmObject {
  Visit(worker: ExpressionParser2NodeWorker): void;
}

export class UniquePtrExpressionNode extends EmObject {
  get(): ExpressionNode;
}

export class EventsFunction extends EmObject {
  constructor(): void;
  Clone(): EventsFunction;
  SetDescription(description: string): EventsFunction;
  GetDescription(): string;
  SetName(name: string): EventsFunction;
  GetName(): string;
  SetFullName(fullName: string): EventsFunction;
  GetFullName(): string;
  SetSentence(sentence: string): EventsFunction;
  GetSentence(): string;
  SetGroup(group: string): EventsFunction;
  GetGroup(): string;
  SetGetterName(group: string): EventsFunction;
  GetGetterName(): string;
  SetExpressionType(type: ValueTypeMetadata): EventsFunction;
  GetExpressionType(): ValueTypeMetadata;
  SetPrivate(isPrivate: boolean): EventsFunction;
  IsPrivate(): boolean;
  SetAsync(isAsync: boolean): EventsFunction;
  IsAsync(): boolean;
  IsAction(): boolean;
  IsExpression(): boolean;
  IsCondition(): boolean;
  SetFunctionType(type: EventsFunction_FunctionType): EventsFunction;
  GetFunctionType(): EventsFunction_FunctionType;
  GetEvents(): EventsList;
  GetParameters(): VectorParameterMetadata;
  GetParametersForEvents(functionsContainer: EventsFunctionsContainer): VectorParameterMetadata;
  GetObjectGroups(): ObjectGroupsContainer;
  SerializeTo(element: SerializerElement): void;
  UnserializeFrom(project: Project, element: SerializerElement): void;
}

export class EventsFunctionsContainer extends EmObject {
  InsertNewEventsFunction(name: string, pos: number): EventsFunction;
  InsertEventsFunction(eventsFunction: EventsFunction, pos: number): EventsFunction;
  HasEventsFunctionNamed(name: string): boolean;
  GetEventsFunction(name: string): EventsFunction;
  GetEventsFunctionAt(pos: number): EventsFunction;
  RemoveEventsFunction(name: string): void;
  MoveEventsFunction(oldIndex: number, newIndex: number): void;
  GetEventsFunctionsCount(): number;
  GetEventsFunctionPosition(eventsFunction: EventsFunction): number;
}

export class AbstractEventsBasedEntity extends EmObject {
  GetEventsFunctions(): EventsFunctionsContainer;
  GetPropertyDescriptors(): NamedPropertyDescriptorsList;
  SerializeTo(element: SerializerElement): void;
  UnserializeFrom(project: Project, element: SerializerElement): void;
}

export class EventsBasedBehavior extends EmObject {
  constructor(): void;
  SetDescription(description: string): EventsBasedBehavior;
  GetDescription(): string;
  SetName(name: string): EventsBasedBehavior;
  GetName(): string;
  SetFullName(fullName: string): EventsBasedBehavior;
  GetFullName(): string;
  SetObjectType(fullName: string): EventsBasedBehavior;
  GetObjectType(): string;
  SetPrivate(isPrivate: boolean): EventsBasedBehavior;
  IsPrivate(): boolean;
  GetSharedPropertyDescriptors(): NamedPropertyDescriptorsList;
  STATIC_GetPropertyActionName(propertyName: string): string;
  STATIC_GetPropertyConditionName(propertyName: string): string;
  STATIC_GetPropertyExpressionName(propertyName: string): string;
  STATIC_GetPropertyToggleActionName(propertyName: string): string;
  STATIC_GetSharedPropertyActionName(propertyName: string): string;
  STATIC_GetSharedPropertyConditionName(propertyName: string): string;
  STATIC_GetSharedPropertyExpressionName(propertyName: string): string;
  STATIC_GetSharedPropertyToggleActionName(propertyName: string): string;
}

export class EventsBasedBehaviorsList extends EmObject {
  InsertNew(name: string, pos: number): EventsBasedBehavior;
  Insert(item: EventsBasedBehavior, pos: number): EventsBasedBehavior;
  Has(name: string): boolean;
  Get(name: string): EventsBasedBehavior;
  GetAt(pos: number): EventsBasedBehavior;
  Remove(name: string): void;
  Move(oldIndex: number, newIndex: number): void;
  GetCount(): number;
  GetPosition(item: EventsBasedBehavior): number;
  size(): number;
  at(index: number): EventsBasedBehavior;
}

export class EventsBasedObject extends EmObject {
  constructor(): void;
  SetDescription(description: string): EventsBasedObject;
  GetDescription(): string;
  SetName(name: string): EventsBasedObject;
  GetName(): string;
  SetFullName(fullName: string): EventsBasedObject;
  GetFullName(): string;
  SetDefaultName(defaultName: string): EventsBasedObject;
  GetDefaultName(): string;
  STATIC_GetPropertyActionName(propertyName: string): string;
  STATIC_GetPropertyConditionName(propertyName: string): string;
  STATIC_GetPropertyExpressionName(propertyName: string): string;
  STATIC_GetPropertyToggleActionName(propertyName: string): string;
  InsertNewObject(project: Project, type: string, name: string, pos: number): gdObject;
  InsertObject(obj: gdObject, pos: number): gdObject;
  HasObjectNamed(name: string): boolean;
  GetObject(name: string): gdObject;
  GetObjectAt(pos: number): gdObject;
  GetObjectPosition(name: string): number;
  RemoveObject(name: string): void;
  SwapObjects(first: number, second: number): void;
  MoveObject(oldIndex: number, newIndex: number): void;
  MoveObjectToAnotherContainer(name: string, newObjectsContainer: ObjectsContainer, newPosition: number): void;
  GetObjectsCount(): number;
  GetObjectGroups(): ObjectGroupsContainer;
}

export class EventsBasedObjectsList extends EmObject {
  InsertNew(name: string, pos: number): EventsBasedObject;
  Insert(item: EventsBasedObject, pos: number): EventsBasedObject;
  Has(name: string): boolean;
  Get(name: string): EventsBasedObject;
  GetAt(pos: number): EventsBasedObject;
  Remove(name: string): void;
  Move(oldIndex: number, newIndex: number): void;
  GetCount(): number;
  GetPosition(item: EventsBasedObject): number;
  size(): number;
  at(index: number): EventsBasedObject;
}

export class NamedPropertyDescriptorsList extends EmObject {
  constructor(): void;
  InsertNew(name: string, pos: number): NamedPropertyDescriptor;
  Insert(item: NamedPropertyDescriptor, pos: number): NamedPropertyDescriptor;
  Has(name: string): boolean;
  Get(name: string): NamedPropertyDescriptor;
  GetAt(pos: number): NamedPropertyDescriptor;
  Remove(name: string): void;
  Move(oldIndex: number, newIndex: number): void;
  GetCount(): number;
  GetPosition(item: NamedPropertyDescriptor): number;
  size(): number;
  at(index: number): NamedPropertyDescriptor;
}

export class EventsFunctionsExtension extends EmObject {
  constructor(): void;
  SetNamespace(namespace_: string): EventsFunctionsExtension;
  GetNamespace(): string;
  SetVersion(version: string): EventsFunctionsExtension;
  GetVersion(): string;
  SetShortDescription(shortDescription: string): EventsFunctionsExtension;
  GetShortDescription(): string;
  SetDescription(description: string): EventsFunctionsExtension;
  GetDescription(): string;
  SetName(name: string): EventsFunctionsExtension;
  GetName(): string;
  SetFullName(fullName: string): EventsFunctionsExtension;
  GetFullName(): string;
  SetCategory(category: string): EventsFunctionsExtension;
  GetCategory(): string;
  GetTags(): VectorString;
  GetAuthorIds(): VectorString;
  SetAuthor(author: string): EventsFunctionsExtension;
  GetAuthor(): string;
  SetPreviewIconUrl(previewIconUrl: string): EventsFunctionsExtension;
  GetPreviewIconUrl(): string;
  SetIconUrl(iconUrl: string): EventsFunctionsExtension;
  GetIconUrl(): string;
  SetHelpPath(helpPath: string): EventsFunctionsExtension;
  GetHelpPath(): string;
  SetOrigin(originName: string, originIdentifier: string): void;
  GetOriginName(): string;
  GetOriginIdentifier(): string;
  AddDependency(): DependencyMetadata;
  RemoveDependencyAt(index: number): void;
  GetAllDependencies(): VectorDependencyMetadata;
  GetEventsBasedBehaviors(): EventsBasedBehaviorsList;
  GetEventsBasedObjects(): EventsBasedObjectsList;
  SerializeTo(element: SerializerElement): void;
  UnserializeFrom(project: Project, element: SerializerElement): void;
  STATIC_IsExtensionLifecycleEventsFunction(eventsFunctionName: string): boolean;
  InsertNewEventsFunction(name: string, pos: number): EventsFunction;
  InsertEventsFunction(eventsFunction: EventsFunction, pos: number): EventsFunction;
  HasEventsFunctionNamed(name: string): boolean;
  GetEventsFunction(name: string): EventsFunction;
  GetEventsFunctionAt(pos: number): EventsFunction;
  RemoveEventsFunction(name: string): void;
  MoveEventsFunction(oldIndex: number, newIndex: number): void;
  GetEventsFunctionsCount(): number;
  GetEventsFunctionPosition(eventsFunction: EventsFunction): number;
}

export class AbstractFileSystem extends EmObject {
  
}

export class AbstractFileSystemJS extends EmObject {
  constructor(): void;
  MkDir(dir: string): void;
  DirExists(dir: string): void;
  ClearDir(dir: string): void;
  GetTempDir(): string;
  FileNameFrom(dir: string): string;
  DirNameFrom(dir: string): string;
  IsAbsolute(fn: string): boolean;
  CopyFile(src: string, dest: string): void;
  WriteToFile(fn: string, content: string): void;
  ReadFile(fn: string): string;
  ReadDir(dir: string): VectorString;
  FileExists(fn: string): boolean;
}

export class ProjectResourcesAdder extends EmObject {
  STATIC_GetAllUseless(project: Project, resourceType: string): VectorString;
  STATIC_RemoveAllUseless(project: Project, resourceType: string): void;
}

export class ArbitraryEventsWorker extends EmObject {
  Launch(events: EventsList): void;
}

export class EventsLeaderboardsLister extends EmObject {
  constructor(project: Project): void;
  GetLeaderboardIds(): SetString;
  Launch(events: EventsList): void;
}

export class EventsLeaderboardsRenamer extends EmObject {
  constructor(project: Project, leaderboardIdMap: MapStringString): void;
  Launch(events: EventsList): void;
}

export class EventsParametersLister extends EmObject {
  constructor(project: Project): void;
  GetParametersAndTypes(): MapStringString;
  Launch(events: EventsList): void;
}

export class EventsPositionFinder extends EmObject {
  constructor(): void;
  GetPositions(): VectorInt;
  AddEventToSearch(event: BaseEvent): void;
  Launch(events: EventsList): void;
}

export class EventsTypesLister extends EmObject {
  constructor(project: Project): void;
  GetAllEventsTypes(): VectorString;
  GetAllConditionsTypes(): VectorString;
  GetAllActionsTypes(): VectorString;
  Launch(events: EventsList): void;
}

export class InstructionsTypeRenamer extends EmObject {
  constructor(project: Project, oldType: string, newType: string): void;
  Launch(events: EventsList): void;
}

export class EventsContext extends EmObject {
  GetReferencedObjectOrGroupNames(): SetString;
  GetObjectNames(): SetString;
  GetBehaviorNamesOfObjectOrGroup(objectOrGroupName: string): SetString;
}

export class EventsContextAnalyzer extends EmObject {
  constructor(platform: Platform, globalObjectsContainer: ObjectsContainer, objectsContainer: ObjectsContainer): void;
  GetEventsContext(): EventsContext;
  Launch(events: EventsList): void;
}

export class ArbitraryResourceWorker extends EmObject {
  
}

export class ArbitraryResourceWorkerJS extends EmObject {
  constructor(): void;
  ExposeImage(image: string): void;
  ExposeShader(shader: string): void;
  ExposeFile(file: string): void;
}

export class ResourcesMergingHelper extends EmObject {
  constructor(fs: AbstractFileSystem): void;
  SetBaseDirectory(basePath: string): void;
  GetAllResourcesOldAndNewFilename(): MapStringString;
}

export class ResourcesRenamer extends EmObject {
  constructor(oldToNewNames: MapStringString): void;
}

export class ProjectResourcesCopier extends EmObject {
  STATIC_CopyAllResourcesTo(project: Project, fs: AbstractFileSystem, destinationDirectory: string, updateOriginalProject: boolean, preserveAbsoluteFilenames: boolean, preserveDirectoryStructure: boolean): boolean;
}

export class ResourcesInUseHelper extends EmObject {
  constructor(): void;
  GetAllImages(): SetString;
  GetAllAudios(): SetString;
  GetAllFonts(): SetString;
  GetAllBitmapFonts(): SetString;
  GetAll(resourceType: string): SetString;
}

export class EditorSettings extends EmObject {
  constructor(): void;
  SerializeTo(element: SerializerElement): void;
  UnserializeFrom(element: SerializerElement): void;
}

export class Point extends EmObject {
  constructor(name: string): void;
  SetName(name: string): void;
  GetName(): string;
  SetXY(x: number, y: number): void;
  GetX(): number;
  SetX(x: number): void;
  GetY(): number;
  SetY(y: number): void;
}

export class VectorPoint extends EmObject {
  constructor(): void;
  push_back(pt: Point): void;
  size(): number;
  at(index: number): Point;
  WRAPPED_set(index: number, pt: Point): void;
  clear(): void;
}

export class Sprite extends EmObject {
  constructor(): void;
  SetImageName(name: string): void;
  GetImageName(): string;
  GetOrigin(): Point;
  GetCenter(): Point;
  IsDefaultCenterPoint(): boolean;
  SetDefaultCenterPoint(defaultPoint: boolean): void;
  GetAllNonDefaultPoints(): VectorPoint;
  AddPoint(point: Point): void;
  DelPoint(name: string): void;
  GetPoint(name: string): Point;
  HasPoint(name: string): boolean;
  IsCollisionMaskAutomatic(): boolean;
  SetCollisionMaskAutomatic(enabled: boolean): void;
  GetCustomCollisionMask(): VectorPolygon2d;
  SetCustomCollisionMask(collisionMask: VectorPolygon2d): void;
}

export class Direction extends EmObject {
  constructor(): void;
  AddSprite(sprite: Sprite): void;
  GetSprite(index: number): Sprite;
  GetSpritesCount(): number;
  HasNoSprites(): boolean;
  RemoveSprite(index: number): void;
  RemoveAllSprites(): void;
  IsLooping(): boolean;
  SetLoop(enable: boolean): void;
  GetTimeBetweenFrames(): number;
  GetSpriteNames(): VectorString;
  SetTimeBetweenFrames(time: number): void;
  SwapSprites(first: number, second: number): void;
  MoveSprite(oldIndex: number, newIndex: number): void;
  SetMetadata(metadata: string): void;
  GetMetadata(): string;
}

export class Animation extends EmObject {
  constructor(): void;
  SetName(name: string): void;
  GetName(): string;
  SetDirectionsCount(count: number): void;
  GetDirectionsCount(): number;
  GetDirection(index: number): Direction;
  SetDirection(direction: Direction, index: number): void;
  HasNoDirections(): boolean;
  UseMultipleDirections(): boolean;
  SetUseMultipleDirections(enable: boolean): void;
}

export class SpriteObject extends EmObject {
  constructor(): void;
  AddAnimation(animation: Animation): void;
  GetAnimation(index: number): Animation;
  GetAnimationsCount(): number;
  RemoveAnimation(index: number): void;
  RemoveAllAnimations(): void;
  HasNoAnimations(): boolean;
  SwapAnimations(first: number, second: number): void;
  MoveAnimation(oldIndex: number, newIndex: number): void;
  SetUpdateIfNotVisible(updateIfNotVisible: boolean): void;
  GetUpdateIfNotVisible(): boolean;
}

export class TextObject extends EmObject {
  constructor(): void;
  SetString(string: string): void;
  GetString(): string;
  SetCharacterSize(size: number): void;
  GetCharacterSize(): number;
  SetFontName(string: string): void;
  GetFontName(): string;
  IsBold(): boolean;
  SetBold(enable: boolean): void;
  IsItalic(): boolean;
  SetItalic(enable: boolean): void;
  IsUnderlined(): boolean;
  SetUnderlined(enable: boolean): void;
  SetColor(r: number, g: number, b: number): void;
  GetColorR(): number;
  GetColorG(): number;
  GetColorB(): number;
  SetTextAlignment(textAlignment: string): void;
  GetTextAlignment(): string;
}

export class TiledSpriteObject extends EmObject {
  constructor(): void;
  SetTexture(texture: string): void;
  GetTexture(): string;
  SetWidth(width: number): void;
  GetWidth(): number;
  SetHeight(height: number): void;
  GetHeight(): number;
}

export class PanelSpriteObject extends EmObject {
  constructor(): void;
  GetLeftMargin(): number;
  SetLeftMargin(newMargin: number): void;
  GetTopMargin(): number;
  SetTopMargin(newMargin: number): void;
  GetRightMargin(): number;
  SetRightMargin(newMargin: number): void;
  GetBottomMargin(): number;
  SetBottomMargin(newMargin: number): void;
  IsTiled(): boolean;
  SetTiled(enable: boolean): void;
  SetTexture(texture: string): void;
  GetTexture(): string;
  SetWidth(width: number): void;
  GetWidth(): number;
  SetHeight(height: number): void;
  GetHeight(): number;
}

export class ShapePainterObject extends EmObject {
  constructor(): void;
  SetCoordinatesAbsolute(): void;
  SetCoordinatesRelative(): void;
  AreCoordinatesAbsolute(): boolean;
  SetClearBetweenFrames(value: boolean): void;
  IsClearedBetweenFrames(): boolean;
  SetOutlineSize(size: number): void;
  GetOutlineSize(): number;
  SetOutlineOpacity(val: number): void;
  GetOutlineOpacity(): number;
  SetOutlineColor(r: number, g: number, b: number): void;
  GetOutlineColorR(): number;
  GetOutlineColorG(): number;
  GetOutlineColorB(): number;
  SetFillOpacity(val: number): void;
  GetFillOpacity(): number;
  SetFillColor(r: number, g: number, b: number): void;
  GetFillColorR(): number;
  GetFillColorG(): number;
  GetFillColorB(): number;
  GetAntialiasing(): string;
  SetAntialiasing(value: string): void;
}

export class TextEntryObject extends EmObject {
  constructor(): void;
}

export class ParticleEmitterObject extends EmObject {
  constructor(): void;
  SetRendererType(type: ParticleEmitterObject_RendererType): void;
  GetRendererType(): ParticleEmitterObject_RendererType;
  SetParticleTexture(resourceName: string): void;
  GetParticleTexture(): string;
  SetRendererParam1(newValue: number): void;
  GetRendererParam1(): number;
  SetRendererParam2(newValue: number): void;
  GetRendererParam2(): number;
  IsRenderingAdditive(): boolean;
  SetRenderingAdditive(): void;
  SetRenderingAlpha(): void;
  SetMaxParticleNb(newValue: number): void;
  GetMaxParticleNb(): number;
  SetTank(newValue: number): void;
  GetTank(): number;
  SetFlow(newValue: number): void;
  GetFlow(): number;
  SetDestroyWhenNoParticles(enable: boolean): void;
  GetDestroyWhenNoParticles(): boolean;
  SetEmitterForceMin(newValue: number): void;
  GetEmitterForceMin(): number;
  SetEmitterForceMax(newValue: number): void;
  GetEmitterForceMax(): number;
  SetConeSprayAngle(newValue: number): void;
  GetConeSprayAngle(): number;
  SetZoneRadius(newValue: number): void;
  GetZoneRadius(): number;
  SetParticleGravityX(newValue: number): void;
  GetParticleGravityX(): number;
  SetParticleGravityY(newValue: number): void;
  GetParticleGravityY(): number;
  SetParticleGravityAngle(newValue: number): void;
  GetParticleGravityAngle(): number;
  SetParticleGravityLength(newValue: number): void;
  GetParticleGravityLength(): number;
  SetParticleLifeTimeMin(newValue: number): void;
  GetParticleLifeTimeMin(): number;
  SetParticleLifeTimeMax(newValue: number): void;
  GetParticleLifeTimeMax(): number;
  SetParticleRed1(newValue: number): void;
  GetParticleRed1(): number;
  SetParticleRed2(newValue: number): void;
  GetParticleRed2(): number;
  SetParticleGreen1(newValue: number): void;
  GetParticleGreen1(): number;
  SetParticleGreen2(newValue: number): void;
  GetParticleGreen2(): number;
  SetParticleBlue1(newValue: number): void;
  GetParticleBlue1(): number;
  SetParticleBlue2(newValue: number): void;
  GetParticleBlue2(): number;
  SetParticleAlpha1(newValue: number): void;
  GetParticleAlpha1(): number;
  SetParticleAlpha2(newValue: number): void;
  GetParticleAlpha2(): number;
  SetParticleSize1(newValue: number): void;
  GetParticleSize1(): number;
  SetParticleSize2(newValue: number): void;
  GetParticleSize2(): number;
  SetParticleAngle1(newValue: number): void;
  GetParticleAngle1(): number;
  SetParticleAngle2(newValue: number): void;
  GetParticleAngle2(): number;
  SetParticleAlphaRandomness1(newValue: number): void;
  GetParticleAlphaRandomness1(): number;
  SetParticleAlphaRandomness2(newValue: number): void;
  GetParticleAlphaRandomness2(): number;
  SetParticleSizeRandomness1(newValue: number): void;
  GetParticleSizeRandomness1(): number;
  SetParticleSizeRandomness2(newValue: number): void;
  GetParticleSizeRandomness2(): number;
  SetParticleAngleRandomness1(newValue: number): void;
  GetParticleAngleRandomness1(): number;
  SetParticleAngleRandomness2(newValue: number): void;
  GetParticleAngleRandomness2(): number;
  SetJumpForwardInTimeOnCreation(newValue: number): void;
  GetJumpForwardInTimeOnCreation(): number;
}

export class LayoutCodeGenerator extends EmObject {
  constructor(project: Project): void;
  GenerateLayoutCompleteCode(layout: Layout, includes: SetString, compilationForRuntime: boolean): string;
}

export class BehaviorCodeGenerator extends EmObject {
  constructor(project: Project): void;
  GenerateRuntimeBehaviorCompleteCode(extensionName: string, eventsBasedBehavior: EventsBasedBehavior, codeNamespace: string, behaviorMethodMangledNames: MapStringString, includes: SetString, compilationForRuntime: boolean): string;
  STATIC_GetBehaviorPropertyGetterName(propertyName: string): string;
  STATIC_GetBehaviorPropertySetterName(propertyName: string): string;
  STATIC_GetBehaviorPropertyToggleFunctionName(propertyName: string): string;
  STATIC_GetBehaviorSharedPropertyGetterName(propertyName: string): string;
  STATIC_GetBehaviorSharedPropertySetterName(propertyName: string): string;
  STATIC_GetBehaviorSharedPropertyToggleFunctionName(propertyName: string): string;
}

export class ObjectCodeGenerator extends EmObject {
  constructor(project: Project): void;
  GenerateRuntimeObjectCompleteCode(extensionName: string, eventsBasedObject: EventsBasedObject, codeNamespace: string, objectMethodMangledNames: MapStringString, includes: SetString, compilationForRuntime: boolean): string;
  STATIC_GetObjectPropertyGetterName(propertyName: string): string;
  STATIC_GetObjectPropertySetterName(propertyName: string): string;
  STATIC_GetObjectPropertyToggleFunctionName(propertyName: string): string;
}

export class EventsFunctionsExtensionCodeGenerator extends EmObject {
  constructor(project: Project): void;
  GenerateFreeEventsFunctionCompleteCode(extension: EventsFunctionsExtension, eventsFunction: EventsFunction, codeNamespac: string, includes: SetString, compilationForRuntime: boolean): string;
}

export class PreviewExportOptions extends EmObject {
  constructor(project: Project, outputPath: string): void;
  UseWebsocketDebuggerClientWithServerAddress(address: string, port: string): PreviewExportOptions;
  UseWindowMessageDebuggerClient(): PreviewExportOptions;
  SetLayoutName(layoutName: string): PreviewExportOptions;
  SetFallbackAuthor(id: string, username: string): PreviewExportOptions;
  SetExternalLayoutName(externalLayoutName: string): PreviewExportOptions;
  SetIncludeFileHash(includeFile: string, hash: number): PreviewExportOptions;
  SetProjectDataOnlyExport(enable: boolean): PreviewExportOptions;
  SetFullLoadingScreen(enable: boolean): PreviewExportOptions;
  SetIsDevelopmentEnvironment(enable: boolean): PreviewExportOptions;
  SetNonRuntimeScriptsCacheBurst(value: number): PreviewExportOptions;
  SetElectronRemoteRequirePath(electronRemoteRequirePath: string): PreviewExportOptions;
  SetGDevelopResourceToken(gdevelopResourceToken: string): PreviewExportOptions;
  SetAllowAuthenticationUsingIframeForPreview(enable: boolean): PreviewExportOptions;
}

export class ExportOptions extends EmObject {
  constructor(project: Project, outputPath: string): void;
  SetFallbackAuthor(id: string, username: string): ExportOptions;
  SetTarget(target: string): ExportOptions;
}

export class Exporter extends EmObject {
  constructor(fs: AbstractFileSystem, gdjsRoot: string): void;
  SetCodeOutputDirectory(path: string): void;
  ExportProjectForPixiPreview(options: PreviewExportOptions): boolean;
  ExportWholePixiProject(options: ExportOptions): boolean;
  GetLastError(): string;
}

export class JsCodeEvent extends EmObject {
  constructor(): void;
  GetInlineCode(): string;
  SetInlineCode(type: string): void;
  GetParameterObjects(): string;
  SetParameterObjects(type: string): void;
  IsEventsSheetExpanded(): boolean;
  SetEventsSheetExpanded(enable: boolean): void;
  Clone(): JsCodeEvent;
  GetType(): string;
  SetType(type: string): void;
  IsExecutable(): boolean;
  CanHaveSubEvents(): boolean;
  HasSubEvents(): boolean;
  GetSubEvents(): EventsList;
  IsDisabled(): boolean;
  SetDisabled(disable: boolean): void;
  IsFolded(): boolean;
  SetFolded(folded: boolean): void;
  SerializeTo(element: SerializerElement): void;
  UnserializeFrom(project: Project, element: SerializerElement): void;
}

export as namespace gd;
