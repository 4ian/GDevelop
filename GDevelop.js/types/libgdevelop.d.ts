// Automatically generated by GDevelop.js/scripts/generate-types.js
type EventsFunction_FunctionType = 0 | 1 | 2 | 3// Automatically generated by GDevelop.js/scripts/generate-types.js
type ExpressionCompletionDescription_CompletionKind = 0 | 1 | 2 | 3 | 4// Automatically generated by GDevelop.js/scripts/generate-types.js
declare class gdAbstractFileSystem {
  delete(): void;
  ptr: number;
};// Automatically generated by GDevelop.js/scripts/generate-types.js
declare class gdAbstractFileSystemJS {
  constructor(): void;
  mkDir(dir: string): void;
  dirExists(dir: string): void;
  clearDir(dir: string): void;
  getTempDir(): string;
  fileNameFrom(dir: string): string;
  dirNameFrom(dir: string): string;
  isAbsolute(fn: string): boolean;
  copyFile(src: string, dest: string): void;
  writeToFile(fn: string, content: string): void;
  readFile(fn: string): string;
  readDir(dir: string): gdVectorString;
  fileExists(fn: string): boolean;
  delete(): void;
  ptr: number;
};// Automatically generated by GDevelop.js/scripts/generate-types.js
declare class gdAnimation {
  constructor(): void;
  setName(name: string): void;
  getName(): string;
  setDirectionsCount(count: number): void;
  getDirectionsCount(): number;
  getDirection(index: number): gdDirection;
  setDirection(direction: gdDirection, index: number): void;
  hasNoDirections(): boolean;
  useMultipleDirections(): boolean;
  setUseMultipleDirections(enable: boolean): void;
  delete(): void;
  ptr: number;
};// Automatically generated by GDevelop.js/scripts/generate-types.js
declare class gdArbitraryEventsWorker {
  launch(events: gdEventsList): void;
  delete(): void;
  ptr: number;
};// Automatically generated by GDevelop.js/scripts/generate-types.js
declare class gdArbitraryResourceWorker {
  delete(): void;
  ptr: number;
};// Automatically generated by GDevelop.js/scripts/generate-types.js
declare class gdArbitraryResourceWorkerJS {
  constructor(): void;
  exposeImage(image: string): void;
  exposeShader(shader: string): void;
  exposeFile(file: string): void;
  delete(): void;
  ptr: number;
};// Automatically generated by GDevelop.js/scripts/generate-types.js
declare class gdAudioResource extends gdResource {
  constructor(): void;
  delete(): void;
  ptr: number;
};// Automatically generated by GDevelop.js/scripts/generate-types.js
declare class gdBaseEvent extends gdBaseEvent {
  constructor(): void;
  clone(): gdBaseEvent;
  getType(): string;
  setType(type: string): void;
  isExecutable(): boolean;
  canHaveSubEvents(): boolean;
  hasSubEvents(): boolean;
  getSubEvents(): gdEventsList;
  isDisabled(): boolean;
  setDisabled(disable: boolean): void;
  isFolded(): boolean;
  setFolded(folded: boolean): void;
  serializeTo(element: gdSerializerElement): void;
  unserializeFrom(project: gdProject, element: gdSerializerElement): void;
  delete(): void;
  ptr: number;
};// Automatically generated by GDevelop.js/scripts/generate-types.js
declare class gdBehavior {
  constructor(): void;
  clone(): gdBehavior;
  setName(name: string): void;
  getName(): string;
  getTypeName(): string;
  getProperties(): gdMapStringPropertyDescriptor;
  updateProperty(name: string, value: string): boolean;
  initializeContent(): void;
  delete(): void;
  ptr: number;
};// Automatically generated by GDevelop.js/scripts/generate-types.js
declare class gdBehaviorCodeGenerator {
  constructor(project: gdProject): void;
  generateRuntimeBehaviorCompleteCode(extensionName: string, eventsBasedBehavior: gdEventsBasedBehavior, codeNamespace: string, behaviorMethodMangledNames: gdMapStringString, includes: gdSetString, compilationForRuntime: boolean): string;
  static getBehaviorPropertyGetterName(propertyName: string): string;
  static getBehaviorPropertySetterName(propertyName: string): string;
  delete(): void;
  ptr: number;
};// Automatically generated by GDevelop.js/scripts/generate-types.js
declare class gdBehaviorJsImplementation extends gdBehavior {
  constructor(): void;
  getProperties(behaviorContent: gdSerializerElement): gdMapStringPropertyDescriptor;
  updateProperty(behaviorContent: gdSerializerElement, name: string, value: string): boolean;
  initializeContent(behaviorContent: gdSerializerElement): void;
  delete(): void;
  ptr: number;
};// Automatically generated by GDevelop.js/scripts/generate-types.js
declare class gdBehaviorMetadata {
  getName(): string;
  getFullName(): string;
  getDefaultName(): string;
  getDescription(): string;
  getGroup(): string;
  getIconFilename(): string;
  getHelpPath(): string;
  addScopedCondition(name: string, fullname: string, description: string, sentence: string, group: string, icon: string, smallicon: string): gdInstructionMetadata;
  addScopedAction(name: string, fullname: string, description: string, sentence: string, group: string, icon: string, smallicon: string): gdInstructionMetadata;
  addCondition(name: string, fullname: string, description: string, sentence: string, group: string, icon: string, smallicon: string): gdInstructionMetadata;
  addAction(name: string, fullname: string, description: string, sentence: string, group: string, icon: string, smallicon: string): gdInstructionMetadata;
  addExpression(name: string, fullname: string, description: string, group: string, smallicon: string): gdExpressionMetadata;
  addStrExpression(name: string, fullname: string, description: string, group: string, smallicon: string): gdExpressionMetadata;
  addExpressionAndCondition(type: string, name: string, fullname: string, description: string, sentenceName: string, group: string, icon: string): gdMultipleInstructionMetadata;
  addExpressionAndConditionAndAction(type: string, name: string, fullname: string, description: string, sentenceName: string, group: string, icon: string): gdMultipleInstructionMetadata;
  addDuplicatedAction(newActionName: string, copiedActionName: string): gdInstructionMetadata;
  addDuplicatedCondition(newConditionName: string, copiedConditionName: string): gdInstructionMetadata;
  addDuplicatedExpression(newExpressionName: string, copiedExpressionName: string): gdExpressionMetadata;
  addDuplicatedStrExpression(newExpressionName: string, copiedExpressionName: string): gdExpressionMetadata;
  getAllActions(): gdMapStringInstructionMetadata;
  getAllConditions(): gdMapStringInstructionMetadata;
  getAllExpressions(): gdMapStringExpressionMetadata;
  getAllStrExpressions(): gdMapStringExpressionMetadata;
  setIncludeFile(includeFile: string): gdBehaviorMetadata;
  addIncludeFile(includeFile: string): gdBehaviorMetadata;
  addRequiredFile(resourceFile: string): gdBehaviorMetadata;
  setObjectType(objectType: string): gdBehaviorMetadata;
  getObjectType(): string;
  get(): gdBehavior;
  getSharedDataInstance(): gdBehaviorsSharedData;
  delete(): void;
  ptr: number;
};// Automatically generated by GDevelop.js/scripts/generate-types.js
declare class gdBehaviorSharedDataJsImplementation extends gdBehaviorsSharedData {
  constructor(): void;
  getProperties(behaviorSharedDataContent: gdSerializerElement): gdMapStringPropertyDescriptor;
  updateProperty(behaviorSharedDataContent: gdSerializerElement, name: string, value: string): boolean;
  initializeContent(behaviorSharedDataContent: gdSerializerElement): void;
  delete(): void;
  ptr: number;
};// Automatically generated by GDevelop.js/scripts/generate-types.js
declare class gdBehaviorsSharedData {
  constructor(): void;
  setName(name: string): void;
  getName(): string;
  getTypeName(): string;
  getProperties(): gdMapStringPropertyDescriptor;
  updateProperty(name: string, value: string): boolean;
  initializeContent(): void;
  delete(): void;
  ptr: number;
};// Automatically generated by GDevelop.js/scripts/generate-types.js
declare class gdBitmapFontResource extends gdResource {
  constructor(): void;
  delete(): void;
  ptr: number;
};// Automatically generated by GDevelop.js/scripts/generate-types.js
declare class gdCommentEvent extends gdBaseEvent {
  constructor(): void;
  getComment(): string;
  setComment(type: string): void;
  setBackgroundColor(r: number, g: number, b: number): void;
  getBackgroundColorRed(): number;
  getBackgroundColorGreen(): number;
  getBackgroundColorBlue(): number;
  setTextColor(r: number, g: number, b: number): void;
  getTextColorRed(): number;
  getTextColorGreen(): number;
  getTextColorBlue(): number;
  clone(): gdCommentEvent;
  getType(): string;
  setType(type: string): void;
  isExecutable(): boolean;
  canHaveSubEvents(): boolean;
  hasSubEvents(): boolean;
  getSubEvents(): gdEventsList;
  isDisabled(): boolean;
  setDisabled(disable: boolean): void;
  isFolded(): boolean;
  setFolded(folded: boolean): void;
  serializeTo(element: gdSerializerElement): void;
  unserializeFrom(project: gdProject, element: gdSerializerElement): void;
  delete(): void;
  ptr: number;
};// Automatically generated by GDevelop.js/scripts/generate-types.js
declare class gdCustomObjectConfiguration extends gdObjectConfiguration {
  clone(): gdUniquePtrObjectConfiguration;
  getChildObjectConfiguration(objectName: string): gdObjectConfiguration;
  getProperties(): gdMapStringPropertyDescriptor;
  updateProperty(name: string, value: string): boolean;
  getInitialInstanceProperties(instance: gdInitialInstance, project: gdProject, scene: gdLayout): gdMapStringPropertyDescriptor;
  updateInitialInstanceProperty(instance: gdInitialInstance, name: string, value: string, project: gdProject, scene: gdLayout): boolean;
  delete(): void;
  ptr: number;
};// Automatically generated by GDevelop.js/scripts/generate-types.js
declare class gdDependencyMetadata {
  constructor(): void;
  getName(): string;
  setName(name_: string): gdDependencyMetadata;
  getExportName(): string;
  setExportName(exportName_: string): gdDependencyMetadata;
  getVersion(): string;
  setVersion(version_: string): gdDependencyMetadata;
  getDependencyType(): string;
  setDependencyType(dependencyType_: string): gdDependencyMetadata;
  setExtraSetting(settingName: string, settingValue: gdPropertyDescriptor): gdDependencyMetadata;
  getAllExtraSettings(): gdMapStringPropertyDescriptor;
  onlyIfSomeExtraSettingsNonEmpty(): gdDependencyMetadata;
  onlyIfOtherDependencyIsExported(otherDependency: string): gdDependencyMetadata;
  copyFrom(dependencyMetadata: gdDependencyMetadata): void;
  delete(): void;
  ptr: number;
};// Automatically generated by GDevelop.js/scripts/generate-types.js
declare class gdDirection {
  constructor(): void;
  addSprite(sprite: gdSprite): void;
  getSprite(index: number): gdSprite;
  getSpritesCount(): number;
  hasNoSprites(): boolean;
  removeSprite(index: number): void;
  removeAllSprites(): void;
  isLooping(): boolean;
  setLoop(enable: boolean): void;
  getTimeBetweenFrames(): number;
  getSpriteNames(): gdVectorString;
  setTimeBetweenFrames(time: number): void;
  swapSprites(first: number, second: number): void;
  moveSprite(oldIndex: number, newIndex: number): void;
  setMetadata(metadata: string): void;
  getMetadata(): string;
  delete(): void;
  ptr: number;
};// Automatically generated by GDevelop.js/scripts/generate-types.js
declare class gdEditorSettings {
  constructor(): void;
  serializeTo(element: gdSerializerElement): void;
  unserializeFrom(element: gdSerializerElement): void;
  delete(): void;
  ptr: number;
};// Automatically generated by GDevelop.js/scripts/generate-types.js
declare class gdEffect {
  constructor(): void;
  setName(name_: string): void;
  getName(): string;
  setEffectType(effectType_: string): void;
  getEffectType(): string;
  setDoubleParameter(name: string, value: number): void;
  getDoubleParameter(name: string): number;
  setStringParameter(name: string, value: string): void;
  getStringParameter(name: string): string;
  setBooleanParameter(name: string, value: boolean): void;
  getBooleanParameter(name: string): boolean;
  getAllDoubleParameters(): gdMapStringDouble;
  getAllStringParameters(): gdMapStringString;
  getAllBooleanParameters(): gdMapStringBoolean;
  clearParameters(): void;
  serializeTo(element: gdSerializerElement): void;
  unserializeFrom(element: gdSerializerElement): void;
  delete(): void;
  ptr: number;
};// Automatically generated by GDevelop.js/scripts/generate-types.js
declare class gdEffectMetadata {
  setFullName(fullName: string): gdEffectMetadata;
  setDescription(description: string): gdEffectMetadata;
  setHelpPath(helpPath: string): gdEffectMetadata;
  setIncludeFile(includeFile: string): gdEffectMetadata;
  addIncludeFile(includeFile: string): gdEffectMetadata;
  markAsNotWorkingForObjects(): gdEffectMetadata;
  getType(): string;
  getFullName(): string;
  getDescription(): string;
  getHelpPath(): string;
  isMarkedAsNotWorkingForObjects(): boolean;
  getProperties(): gdMapStringPropertyDescriptor;
  delete(): void;
  ptr: number;
};// Automatically generated by GDevelop.js/scripts/generate-types.js
declare class gdEffectsContainer {
  constructor(): void;
  hasEffectNamed(name: string): boolean;
  getEffect(name: string): gdEffect;
  getEffectAt(index: number): gdEffect;
  getEffectPosition(name: string): number;
  getEffectsCount(): number;
  insertNewEffect(name: string, position: number): gdEffect;
  insertEffect(theEffect: gdEffect, position: number): void;
  removeEffect(name: string): void;
  swapEffects(firstEffectIndex: number, secondEffectIndex: number): void;
  moveEffect(oldIndex: number, newIndex: number): void;
  serializeTo(element: gdSerializerElement): void;
  unserializeFrom(element: gdSerializerElement): void;
  delete(): void;
  ptr: number;
};// Automatically generated by GDevelop.js/scripts/generate-types.js
declare class gdEventMetadata {
  getFullName(): string;
  getDescription(): string;
  getGroup(): string;
  delete(): void;
  ptr: number;
};// Automatically generated by GDevelop.js/scripts/generate-types.js
declare class gdEventsBasedBehavior {
  constructor(): void;
  setDescription(description: string): gdEventsBasedBehavior;
  getDescription(): string;
  setName(name: string): gdEventsBasedBehavior;
  getName(): string;
  setFullName(fullName: string): gdEventsBasedBehavior;
  getFullName(): string;
  setObjectType(fullName: string): gdEventsBasedBehavior;
  getObjectType(): string;
  getEventsFunctions(): gdEventsFunctionsContainer;
  getPropertyDescriptors(): gdNamedPropertyDescriptorsList;
  serializeTo(element: gdSerializerElement): void;
  unserializeFrom(project: gdProject, element: gdSerializerElement): void;
  static getPropertyActionName(propertyName: string): string;
  static getPropertyConditionName(propertyName: string): string;
  static getPropertyExpressionName(propertyName: string): string;
  delete(): void;
  ptr: number;
};// Automatically generated by GDevelop.js/scripts/generate-types.js
declare class gdEventsBasedBehaviorsList {
  insertNew(name: string, pos: number): gdEventsBasedBehavior;
  insert(item: gdEventsBasedBehavior, pos: number): gdEventsBasedBehavior;
  has(name: string): boolean;
  get(name: string): gdEventsBasedBehavior;
  getAt(pos: number): gdEventsBasedBehavior;
  remove(name: string): void;
  move(oldIndex: number, newIndex: number): void;
  getCount(): number;
  getPosition(item: gdEventsBasedBehavior): number;
  size(): number;
  at(index: number): gdEventsBasedBehavior;
  delete(): void;
  ptr: number;
};// Automatically generated by GDevelop.js/scripts/generate-types.js
declare class gdEventsBasedObject extends gdObjectsContainer {
  constructor(): void;
  setDescription(description: string): gdEventsBasedObject;
  getDescription(): string;
  setName(name: string): gdEventsBasedObject;
  getName(): string;
  setFullName(fullName: string): gdEventsBasedObject;
  getFullName(): string;
  getEventsFunctions(): gdEventsFunctionsContainer;
  getPropertyDescriptors(): gdNamedPropertyDescriptorsList;
  serializeTo(element: gdSerializerElement): void;
  unserializeFrom(project: gdProject, element: gdSerializerElement): void;
  insertNewObject(project: gdProject, type: string, name: string, pos: number): gdObject;
  insertObject(obj: gdObject, pos: number): gdObject;
  hasObjectNamed(name: string): boolean;
  getObject(name: string): gdObject;
  getObjectAt(pos: number): gdObject;
  getObjectPosition(name: string): number;
  removeObject(name: string): void;
  swapObjects(first: number, second: number): void;
  moveObject(oldIndex: number, newIndex: number): void;
  moveObjectToAnotherContainer(name: string, newObjectsContainer: gdObjectsContainer, newPosition: number): void;
  getObjectsCount(): number;
  getObjectGroups(): gdObjectGroupsContainer;
  static getPropertyActionName(propertyName: string): string;
  static getPropertyConditionName(propertyName: string): string;
  static getPropertyExpressionName(propertyName: string): string;
  delete(): void;
  ptr: number;
};// Automatically generated by GDevelop.js/scripts/generate-types.js
declare class gdEventsBasedObjectsList {
  insertNew(name: string, pos: number): gdEventsBasedObject;
  insert(item: gdEventsBasedObject, pos: number): gdEventsBasedObject;
  has(name: string): boolean;
  get(name: string): gdEventsBasedObject;
  getAt(pos: number): gdEventsBasedObject;
  remove(name: string): void;
  move(oldIndex: number, newIndex: number): void;
  getCount(): number;
  getPosition(item: gdEventsBasedObject): number;
  size(): number;
  at(index: number): gdEventsBasedObject;
  delete(): void;
  ptr: number;
};// Automatically generated by GDevelop.js/scripts/generate-types.js
declare class gdEventsContext {
  getReferencedObjectOrGroupNames(): gdSetString;
  getObjectNames(): gdSetString;
  getBehaviorNamesOfObjectOrGroup(objectOrGroupName: string): gdSetString;
  delete(): void;
  ptr: number;
};// Automatically generated by GDevelop.js/scripts/generate-types.js
declare class gdEventsContextAnalyzer {
  constructor(platform: gdPlatform, globalObjectsContainer: gdObjectsContainer, objectsContainer: gdObjectsContainer): void;
  getEventsContext(): gdEventsContext;
  launch(events: gdEventsList): void;
  delete(): void;
  ptr: number;
};// Automatically generated by GDevelop.js/scripts/generate-types.js
declare class gdEventsFunction {
  static Action: 0;
  static Condition: 1;
  static Expression: 2;
  static StringExpression: 3;
  constructor(): void;
  clone(): gdEventsFunction;
  setDescription(description: string): gdEventsFunction;
  getDescription(): string;
  setName(name: string): gdEventsFunction;
  getName(): string;
  setFullName(fullName: string): gdEventsFunction;
  getFullName(): string;
  setSentence(sentence: string): gdEventsFunction;
  getSentence(): string;
  setGroup(group: string): gdEventsFunction;
  getGroup(): string;
  setPrivate(isPrivate: boolean): gdEventsFunction;
  isPrivate(): boolean;
  setFunctionType(type: EventsFunction_FunctionType): gdEventsFunction;
  getFunctionType(): EventsFunction_FunctionType;
  getEvents(): gdEventsList;
  getParameters(): gdVectorParameterMetadata;
  getObjectGroups(): gdObjectGroupsContainer;
  serializeTo(element: gdSerializerElement): void;
  unserializeFrom(project: gdProject, element: gdSerializerElement): void;
  delete(): void;
  ptr: number;
};// Automatically generated by GDevelop.js/scripts/generate-types.js
declare class gdEventsFunctionsContainer {
  insertNewEventsFunction(name: string, pos: number): gdEventsFunction;
  insertEventsFunction(eventsFunction: gdEventsFunction, pos: number): gdEventsFunction;
  hasEventsFunctionNamed(name: string): boolean;
  getEventsFunction(name: string): gdEventsFunction;
  getEventsFunctionAt(pos: number): gdEventsFunction;
  removeEventsFunction(name: string): void;
  moveEventsFunction(oldIndex: number, newIndex: number): void;
  getEventsFunctionsCount(): number;
  getEventsFunctionPosition(eventsFunction: gdEventsFunction): number;
  delete(): void;
  ptr: number;
};// Automatically generated by GDevelop.js/scripts/generate-types.js
declare class gdEventsFunctionsExtension extends gdEventsFunctionsContainer {
  constructor(): void;
  setNamespace(namespace_: string): gdEventsFunctionsExtension;
  getNamespace(): string;
  setVersion(version: string): gdEventsFunctionsExtension;
  getVersion(): string;
  setShortDescription(shortDescription: string): gdEventsFunctionsExtension;
  getShortDescription(): string;
  setDescription(description: string): gdEventsFunctionsExtension;
  getDescription(): string;
  setName(name: string): gdEventsFunctionsExtension;
  getName(): string;
  setFullName(fullName: string): gdEventsFunctionsExtension;
  getFullName(): string;
  setCategory(category: string): gdEventsFunctionsExtension;
  getCategory(): string;
  getTags(): gdVectorString;
  getAuthorIds(): gdVectorString;
  setAuthor(author: string): gdEventsFunctionsExtension;
  getAuthor(): string;
  setPreviewIconUrl(previewIconUrl: string): gdEventsFunctionsExtension;
  getPreviewIconUrl(): string;
  setIconUrl(iconUrl: string): gdEventsFunctionsExtension;
  getIconUrl(): string;
  setHelpPath(helpPath: string): gdEventsFunctionsExtension;
  getHelpPath(): string;
  setOrigin(originName: string, originIdentifier: string): void;
  getOriginName(): string;
  getOriginIdentifier(): string;
  addDependency(): gdDependencyMetadata;
  removeDependencyAt(index: number): void;
  getAllDependencies(): gdVectorDependencyMetadata;
  getEventsBasedBehaviors(): gdEventsBasedBehaviorsList;
  getEventsBasedObjects(): gdEventsBasedObjectsList;
  serializeTo(element: gdSerializerElement): void;
  unserializeFrom(project: gdProject, element: gdSerializerElement): void;
  static isExtensionLifecycleEventsFunction(eventsFunctionName: string): boolean;
  insertNewEventsFunction(name: string, pos: number): gdEventsFunction;
  insertEventsFunction(eventsFunction: gdEventsFunction, pos: number): gdEventsFunction;
  hasEventsFunctionNamed(name: string): boolean;
  getEventsFunction(name: string): gdEventsFunction;
  getEventsFunctionAt(pos: number): gdEventsFunction;
  removeEventsFunction(name: string): void;
  moveEventsFunction(oldIndex: number, newIndex: number): void;
  getEventsFunctionsCount(): number;
  getEventsFunctionPosition(eventsFunction: gdEventsFunction): number;
  delete(): void;
  ptr: number;
};// Automatically generated by GDevelop.js/scripts/generate-types.js
declare class gdEventsFunctionsExtensionCodeGenerator {
  constructor(project: gdProject): void;
  generateFreeEventsFunctionCompleteCode(eventsFunction: gdEventsFunction, codeNamespac: string, includes: gdSetString, compilationForRuntime: boolean): string;
  delete(): void;
  ptr: number;
};// Automatically generated by GDevelop.js/scripts/generate-types.js
declare class gdEventsFunctionTools {
  static freeEventsFunctionToObjectsContainer(project: gdProject, eventsFunction: gdEventsFunction, outputGlobalObjectsContainer: gdObjectsContainer, outputObjectsContainer: gdObjectsContainer): void;
  static behaviorEventsFunctionToObjectsContainer(project: gdProject, eventsBasedBehavior: gdEventsBasedBehavior, eventsFunction: gdEventsFunction, outputGlobalObjectsContainer: gdObjectsContainer, outputObjectsContainer: gdObjectsContainer): void;
  static objectEventsFunctionToObjectsContainer(project: gdProject, eventsBasedObject: gdEventsBasedObject, eventsFunction: gdEventsFunction, outputGlobalObjectsContainer: gdObjectsContainer, outputObjectsContainer: gdObjectsContainer): void;
  delete(): void;
  ptr: number;
};// Automatically generated by GDevelop.js/scripts/generate-types.js
declare class gdEventsLeaderboardsLister {
  constructor(project: gdProject): void;
  getLeaderboardIds(): gdSetString;
  launch(events: gdEventsList): void;
  delete(): void;
  ptr: number;
};// Automatically generated by GDevelop.js/scripts/generate-types.js
declare class gdEventsLeaderboardsRenamer {
  constructor(project: gdProject, leaderboardIdMap: gdMapStringString): void;
  launch(events: gdEventsList): void;
  delete(): void;
  ptr: number;
};// Automatically generated by GDevelop.js/scripts/generate-types.js
declare class gdEventsList {
  constructor(): void;
  insertEvent(event: gdBaseEvent, pos: number): gdBaseEvent;
  insertNewEvent(project: gdProject, type: string, pos: number): gdBaseEvent;
  insertEvents(list: gdEventsList, begin: number, end: number, pos: number): void;
  getEventAt(pos: number): gdBaseEvent;
  removeEventAt(pos: number): void;
  removeEvent(event: gdBaseEvent): void;
  getEventsCount(): number;
  contains(event: gdBaseEvent, recursive: boolean): boolean;
  moveEventToAnotherEventsList(eventToMove: gdBaseEvent, newEventsList: gdEventsList, newPosition: number): boolean;
  isEmpty(): boolean;
  clear(): void;
  serializeTo(element: gdSerializerElement): void;
  unserializeFrom(project: gdProject, element: gdSerializerElement): void;
  delete(): void;
  ptr: number;
};// Automatically generated by GDevelop.js/scripts/generate-types.js
declare class gdEventsListUnfolder {
  static unfoldWhenContaining(list: gdEventsList, eventToContain: gdBaseEvent): void;
  static foldAll(list: gdEventsList): void;
  static unfoldToLevel(list: gdEventsList, maxLevel: number, currentLevel?: number): void;
  delete(): void;
  ptr: number;
};// Automatically generated by GDevelop.js/scripts/generate-types.js
declare class gdEventsParametersLister {
  constructor(project: gdProject): void;
  getParametersAndTypes(): gdMapStringString;
  launch(events: gdEventsList): void;
  delete(): void;
  ptr: number;
};// Automatically generated by GDevelop.js/scripts/generate-types.js
declare class gdEventsPositionFinder {
  constructor(): void;
  getPositions(): gdVectorInt;
  addEventToSearch(event: gdBaseEvent): void;
  launch(events: gdEventsList): void;
  delete(): void;
  ptr: number;
};// Automatically generated by GDevelop.js/scripts/generate-types.js
declare class gdEventsRefactorer {
  static renameObjectInEvents(platform: gdPlatform, project: gdObjectsContainer, layout: gdObjectsContainer, events: gdEventsList, oldName: string, newName: string): void;
  static removeObjectInEvents(platform: gdPlatform, project: gdObjectsContainer, layout: gdObjectsContainer, events: gdEventsList, name: string): void;
  static replaceStringInEvents(project: gdObjectsContainer, layout: gdObjectsContainer, events: gdEventsList, toReplace: string, newString: string, matchCase: boolean, inConditions: boolean, inActions: boolean, inEventStrings: boolean): gdVectorEventsSearchResult;
  static searchInEvents(platform: gdPlatform, events: gdEventsList, search: string, matchCase: boolean, inConditions: boolean, inActions: boolean, inEventStrings: boolean, inEventSentences: boolean): gdVectorEventsSearchResult;
  delete(): void;
  ptr: number;
};// Automatically generated by GDevelop.js/scripts/generate-types.js
declare class gdEventsRemover {
  constructor(): void;
  addEventToRemove(eventToRemove: gdBaseEvent): void;
  addInstructionToRemove(instructionToRemove: gdInstruction): void;
  launch(events: gdEventsList): void;
  delete(): void;
  ptr: number;
};// Automatically generated by GDevelop.js/scripts/generate-types.js
declare class gdEventsSearchResult {
  isEventsListValid(): boolean;
  getEventsList(): gdEventsList;
  getPositionInList(): number;
  isEventValid(): boolean;
  getEvent(): gdBaseEvent;
  delete(): void;
  ptr: number;
};// Automatically generated by GDevelop.js/scripts/generate-types.js
declare class gdEventsTypesLister {
  constructor(project: gdProject): void;
  getAllEventsTypes(): gdVectorString;
  getAllConditionsTypes(): gdVectorString;
  getAllActionsTypes(): gdVectorString;
  launch(events: gdEventsList): void;
  delete(): void;
  ptr: number;
};// Automatically generated by GDevelop.js/scripts/generate-types.js
declare class gdEventsVariablesFinder {
  constructor(): void;
  static findAllGlobalVariables(platform: gdPlatform, project: gdProject): gdSetString;
  static findAllLayoutVariables(platform: gdPlatform, project: gdProject, layout: gdLayout): gdSetString;
  static findAllObjectVariables(platform: gdPlatform, project: gdProject, layout: gdLayout, obj: gdObject): gdSetString;
  delete(): void;
  ptr: number;
};// Automatically generated by GDevelop.js/scripts/generate-types.js
declare class gdjsExporter {
  constructor(fs: gdAbstractFileSystem, gdjsRoot: string): void;
  setCodeOutputDirectory(path: string): void;
  exportProjectForPixiPreview(options: gdPreviewExportOptions): boolean;
  exportWholePixiProject(project: gdProject, exportDir: string, exportOptions: gdMapStringBoolean): boolean;
  getLastError(): string;
  delete(): void;
  ptr: number;
};// Automatically generated by GDevelop.js/scripts/generate-types.js
declare class gdExpression {
  getPlainString(): string;
  getRootNode(): gdExpressionNode;
  delete(): void;
  ptr: number;
};// Automatically generated by GDevelop.js/scripts/generate-types.js
declare class gdExpressionCodeGenerationInformation {
  setFunctionName(functionName: string): gdExpressionCodeGenerationInformation;
  setStatic(): gdExpressionCodeGenerationInformation;
  setIncludeFile(includeFile: string): gdExpressionCodeGenerationInformation;
  addIncludeFile(includeFile: string): gdExpressionCodeGenerationInformation;
  getIncludeFiles(): gdVectorString;
  delete(): void;
  ptr: number;
};// Automatically generated by GDevelop.js/scripts/generate-types.js
declare class gdExpressionCompletionDescription {
  static Object: 0;
  static Behavior: 1;
  static Expression: 2;
  static Variable: 3;
  static Text: 4;
  getCompletionKind(): ExpressionCompletionDescription_CompletionKind;
  getType(): string;
  getPrefix(): string;
  getObjectName(): string;
  getBehaviorName(): string;
  isExact(): boolean;
  isLastParameter(): boolean;
  getReplacementStartPosition(): number;
  getReplacementEndPosition(): number;
  getParameterMetadata(): gdParameterMetadata;
  delete(): void;
  ptr: number;
};// Automatically generated by GDevelop.js/scripts/generate-types.js
declare class gdExpressionCompletionFinder {
  static getCompletionDescriptionsFor(platform: gdPlatform, globalObjectsContainer: gdObjectsContainer, objectsContainer: gdObjectsContainer, rootType: string, node: gdExpressionNode, location: number): gdVectorExpressionCompletionDescription;
  getCompletionDescriptions(): gdVectorExpressionCompletionDescription;
  delete(): void;
  ptr: number;
};// Automatically generated by GDevelop.js/scripts/generate-types.js
declare class gdExpressionMetadata {
  constructor(returnType: string, extensionNamespace: string, name: string, fullname: string, description: string, group: string, smallicon: string): void;
  getReturnType(): string;
  getFullName(): string;
  getDescription(): string;
  getGroup(): string;
  getSmallIconFilename(): string;
  isShown(): boolean;
  isPrivate(): boolean;
  getParameter(id: number): gdParameterMetadata;
  getParametersCount(): number;
  getParameters(): gdVectorParameterMetadata;
  setHidden(): gdExpressionMetadata;
  setPrivate(): gdExpressionMetadata;
  addParameter(type: string, description: string, optionalObjectType?: string, parameterIsOptional?: boolean): gdExpressionMetadata;
  addCodeOnlyParameter(type: string, supplementaryInformation: string): gdExpressionMetadata;
  setDefaultValue(defaultValue: string): gdExpressionMetadata;
  setParameterLongDescription(longDescription: string): gdExpressionMetadata;
  setRequiresBaseObjectCapability(capability: string): gdExpressionMetadata;
  getRequiredBaseObjectCapability(): string;
  getCodeExtraInformation(): gdExpressionCodeGenerationInformation;
  delete(): void;
  ptr: number;
};// Automatically generated by GDevelop.js/scripts/generate-types.js
declare class gdExpressionNode {
  visit(worker: gdExpressionParser2NodeWorker): void;
  delete(): void;
  ptr: number;
};// Automatically generated by GDevelop.js/scripts/generate-types.js
declare class gdExpressionNodeLocationFinder {
  static getNodeAtPosition(node: gdExpressionNode, searchedPosition: number): gdExpressionNode;
  delete(): void;
  ptr: number;
};// Automatically generated by GDevelop.js/scripts/generate-types.js
declare class gdExpressionParser2 {
  constructor(): void;
  parseExpression(expression: string): gdUniquePtrExpressionNode;
  delete(): void;
  ptr: number;
};// Automatically generated by GDevelop.js/scripts/generate-types.js
declare class gdExpressionParser2NodeWorker {
  delete(): void;
  ptr: number;
};// Automatically generated by GDevelop.js/scripts/generate-types.js
declare class gdExpressionParserDiagnostic {
  isError(): boolean;
  getMessage(): string;
  getStartPosition(): number;
  getEndPosition(): number;
  delete(): void;
  ptr: number;
};// Automatically generated by GDevelop.js/scripts/generate-types.js
declare class gdExpressionTypeFinder {
  static getType(platform: gdPlatform, globalObjectsContainer: gdObjectsContainer, objectsContainer: gdObjectsContainer, rootType: string, node: gdExpressionNode): string;
  delete(): void;
  ptr: number;
};// Automatically generated by GDevelop.js/scripts/generate-types.js
declare class gdExpressionValidator extends gdExpressionParser2NodeWorker {
  constructor(platform: gdPlatform, globalObjectsContainer: gdObjectsContainer, objectsContainer: gdObjectsContainer, rootType: string): void;
  getErrors(): gdVectorExpressionParserDiagnostic;
  delete(): void;
  ptr: number;
};// Automatically generated by GDevelop.js/scripts/generate-types.js
declare class gdExtensionAndBehaviorMetadata {
  getExtension(): gdPlatformExtension;
  getMetadata(): gdBehaviorMetadata;
  delete(): void;
  ptr: number;
};// Automatically generated by GDevelop.js/scripts/generate-types.js
declare class gdExtensionAndEffectMetadata {
  getExtension(): gdPlatformExtension;
  getMetadata(): gdEffectMetadata;
  delete(): void;
  ptr: number;
};// Automatically generated by GDevelop.js/scripts/generate-types.js
declare class gdExtensionAndExpressionMetadata {
  getExtension(): gdPlatformExtension;
  getMetadata(): gdExpressionMetadata;
  delete(): void;
  ptr: number;
};// Automatically generated by GDevelop.js/scripts/generate-types.js
declare class gdExtensionAndInstructionMetadata {
  getExtension(): gdPlatformExtension;
  getMetadata(): gdInstructionMetadata;
  delete(): void;
  ptr: number;
};// Automatically generated by GDevelop.js/scripts/generate-types.js
declare class gdExtensionAndObjectMetadata {
  getExtension(): gdPlatformExtension;
  getMetadata(): gdObjectMetadata;
  delete(): void;
  ptr: number;
};// Automatically generated by GDevelop.js/scripts/generate-types.js
declare class gdExtensionProperties {
  getValue(extension: string, property: string): string;
  setValue(extension: string, property: string, newValue: string): void;
  hasProperty(extension: string, property: string): boolean;
  getAllExtensionProperties(extension: string, project: gdProject): gdMapStringPropertyDescriptor;
  serializeTo(element: gdSerializerElement): void;
  unserializeFrom(element: gdSerializerElement): void;
  delete(): void;
  ptr: number;
};// Automatically generated by GDevelop.js/scripts/generate-types.js
declare class gdExternalEvents {
  constructor(): void;
  setName(name: string): void;
  getName(): string;
  getAssociatedLayout(): string;
  setAssociatedLayout(name: string): void;
  getEvents(): gdEventsList;
  serializeTo(element: gdSerializerElement): void;
  unserializeFrom(project: gdProject, element: gdSerializerElement): void;
  delete(): void;
  ptr: number;
};// Automatically generated by GDevelop.js/scripts/generate-types.js
declare class gdExternalLayout {
  constructor(): void;
  setName(name: string): void;
  getName(): string;
  setAssociatedLayout(name: string): void;
  getAssociatedLayout(): string;
  getInitialInstances(): gdInitialInstancesContainer;
  getAssociatedEditorSettings(): gdEditorSettings;
  serializeTo(element: gdSerializerElement): void;
  unserializeFrom(element: gdSerializerElement): void;
  delete(): void;
  ptr: number;
};// Automatically generated by GDevelop.js/scripts/generate-types.js
declare class gdExtraInformation {
  setFunctionName(functionName_: string): gdExtraInformation;
  setAsyncFunctionName(functionName_: string): gdExtraInformation;
  setManipulatedType(type_: string): gdExtraInformation;
  setGetter(getter: string): gdExtraInformation;
  setMutators(mutators: gdMapStringString): gdExtraInformation;
  setIncludeFile(includeFile: string): gdExtraInformation;
  addIncludeFile(includeFile: string): gdExtraInformation;
  getIncludeFiles(): gdVectorString;
  delete(): void;
  ptr: number;
};// Automatically generated by GDevelop.js/scripts/generate-types.js
declare class gdFontResource extends gdResource {
  constructor(): void;
  delete(): void;
  ptr: number;
};// Automatically generated by GDevelop.js/scripts/generate-types.js
declare class gdForEachChildVariableEvent {
  constructor(): void;
  getConditions(): gdInstructionsList;
  getActions(): gdInstructionsList;
  getIterableVariableName(): string;
  getKeyIteratorVariableName(): string;
  getValueIteratorVariableName(): string;
  setIterableVariableName(newName: string): void;
  setKeyIteratorVariableName(newName: string): void;
  setValueIteratorVariableName(newName: string): void;
  clone(): gdForEachChildVariableEvent;
  getType(): string;
  setType(type: string): void;
  isExecutable(): boolean;
  canHaveSubEvents(): boolean;
  hasSubEvents(): boolean;
  getSubEvents(): gdEventsList;
  isDisabled(): boolean;
  setDisabled(disable: boolean): void;
  isFolded(): boolean;
  setFolded(folded: boolean): void;
  serializeTo(element: gdSerializerElement): void;
  unserializeFrom(project: gdProject, element: gdSerializerElement): void;
  delete(): void;
  ptr: number;
};// Automatically generated by GDevelop.js/scripts/generate-types.js
declare class gdForEachEvent extends gdBaseEvent {
  constructor(): void;
  setObjectToPick(objects: string): void;
  getObjectToPick(): string;
  getConditions(): gdInstructionsList;
  getActions(): gdInstructionsList;
  clone(): gdForEachEvent;
  getType(): string;
  setType(type: string): void;
  isExecutable(): boolean;
  canHaveSubEvents(): boolean;
  hasSubEvents(): boolean;
  getSubEvents(): gdEventsList;
  isDisabled(): boolean;
  setDisabled(disable: boolean): void;
  isFolded(): boolean;
  setFolded(folded: boolean): void;
  serializeTo(element: gdSerializerElement): void;
  unserializeFrom(project: gdProject, element: gdSerializerElement): void;
  delete(): void;
  ptr: number;
};// Automatically generated by GDevelop.js/scripts/generate-types.js
declare class gdGroupEvent extends gdBaseEvent {
  constructor(): void;
  setName(name: string): void;
  getName(): string;
  setBackgroundColor(r: number, g: number, b: number): void;
  getBackgroundColorR(): number;
  getBackgroundColorG(): number;
  getBackgroundColorB(): number;
  setSource(source: string): void;
  getSource(): string;
  getCreationParameters(): gdVectorString;
  getCreationTimestamp(): number;
  setCreationTimestamp(ts: number): void;
  clone(): gdGroupEvent;
  getType(): string;
  setType(type: string): void;
  isExecutable(): boolean;
  canHaveSubEvents(): boolean;
  hasSubEvents(): boolean;
  getSubEvents(): gdEventsList;
  isDisabled(): boolean;
  setDisabled(disable: boolean): void;
  isFolded(): boolean;
  setFolded(folded: boolean): void;
  serializeTo(element: gdSerializerElement): void;
  unserializeFrom(project: gdProject, element: gdSerializerElement): void;
  delete(): void;
  ptr: number;
};// Automatically generated by GDevelop.js/scripts/generate-types.js
declare class gdHighestZOrderFinder extends gdInitialInstanceFunctor {
  constructor(): void;
  restrictSearchToLayer(layer: string): void;
  getHighestZOrder(): number;
  getLowestZOrder(): number;
  getInstancesCount(): number;
  delete(): void;
  ptr: number;
};// Automatically generated by GDevelop.js/scripts/generate-types.js
declare class gdImageResource extends gdResource {
  constructor(): void;
  isSmooth(): boolean;
  setSmooth(enable: boolean): void;
  delete(): void;
  ptr: number;
};// Automatically generated by GDevelop.js/scripts/generate-types.js
declare class gdInitialInstance {
  constructor(): void;
  setObjectName(name: string): void;
  getObjectName(): string;
  getX(): number;
  setX(x: number): void;
  getY(): number;
  setY(y: number): void;
  getAngle(): number;
  setAngle(angle: number): void;
  isLocked(): boolean;
  setLocked(lock: boolean): void;
  isSealed(): boolean;
  setSealed(seal: boolean): void;
  getZOrder(): number;
  setZOrder(zOrder: number): void;
  getLayer(): string;
  setLayer(layer: string): void;
  setHasCustomSize(enable: boolean): void;
  hasCustomSize(): boolean;
  setCustomWidth(width: number): void;
  getCustomWidth(): number;
  setCustomHeight(height: number): void;
  getCustomHeight(): number;
  resetPersistentUuid(): gdInitialInstance;
  updateCustomProperty(name: string, value: string, project: gdProject, layout: gdLayout): void;
  getCustomProperties(project: gdProject, layout: gdLayout): gdMapStringPropertyDescriptor;
  getRawDoubleProperty(name: string): number;
  getRawStringProperty(name: string): string;
  setRawDoubleProperty(name: string, value: number): void;
  setRawStringProperty(name: string, value: string): void;
  getVariables(): gdVariablesContainer;
  serializeTo(element: gdSerializerElement): void;
  unserializeFrom(element: gdSerializerElement): void;
  delete(): void;
  ptr: number;
};// Automatically generated by GDevelop.js/scripts/generate-types.js
declare class gdInitialInstanceFunctor {
  delete(): void;
  ptr: number;
};// Automatically generated by GDevelop.js/scripts/generate-types.js
declare class gdInitialInstanceJSFunctor {
  constructor(): void;
  invoke(instance: gdInitialInstance): void;
  delete(): void;
  ptr: number;
};// Automatically generated by GDevelop.js/scripts/generate-types.js
declare class gdInitialInstanceJSFunctorWrapper {
  delete(): void;
  ptr: number;
};// Automatically generated by GDevelop.js/scripts/generate-types.js
declare class gdInitialInstancesContainer {
  constructor(): void;
  clone(): gdInitialInstancesContainer;
  getInstancesCount(): number;
  iterateOverInstances(func: gdInitialInstanceFunctor): void;
  iterateOverInstancesWithZOrdering(func: gdInitialInstanceFunctor, layer: string): void;
  moveInstancesToLayer(fromLayer: string, toLayer: string): void;
  removeAllInstancesOnLayer(layer: string): void;
  removeInitialInstancesOfObject(obj: string): void;
  hasInstancesOfObject(objectName: string): boolean;
  someInstancesAreOnLayer(layer: string): boolean;
  renameInstancesOfObject(oldName: string, newName: string): void;
  removeInstance(inst: gdInitialInstance): void;
  insertNewInitialInstance(): gdInitialInstance;
  insertInitialInstance(inst: gdInitialInstance): gdInitialInstance;
  serializeTo(element: gdSerializerElement): void;
  unserializeFrom(element: gdSerializerElement): void;
  delete(): void;
  ptr: number;
};// Automatically generated by GDevelop.js/scripts/generate-types.js
declare class gdInstruction {
  constructor(): void;
  clone(): gdInstruction;
  setType(type: string): void;
  getType(): string;
  setInverted(inverted: boolean): void;
  isInverted(): boolean;
  setAwaited(awaited: boolean): void;
  isAwaited(): boolean;
  setParameter(id: number, value: string): void;
  getParameter(id: number): gdExpression;
  setParametersCount(count: number): void;
  getParametersCount(): number;
  getSubInstructions(): gdInstructionsList;
  delete(): void;
  ptr: number;
};// Automatically generated by GDevelop.js/scripts/generate-types.js
declare class gdInstructionMetadata {
  constructor(): void;
  getFullName(): string;
  getDescription(): string;
  getSentence(): string;
  getGroup(): string;
  getIconFilename(): string;
  getSmallIconFilename(): string;
  getHelpPath(): string;
  canHaveSubInstructions(): boolean;
  getParameter(index: number): gdParameterMetadata;
  getParametersCount(): number;
  getParameters(): gdVectorParameterMetadata;
  getUsageComplexity(): number;
  isHidden(): boolean;
  isPrivate(): boolean;
  isAsync(): boolean;
  isOptionallyAsync(): boolean;
  setCanHaveSubInstructions(): gdInstructionMetadata;
  setHelpPath(helpPath: string): gdInstructionMetadata;
  setHidden(): gdInstructionMetadata;
  setPrivate(): gdInstructionMetadata;
  addParameter(type: string, description: string, optionalObjectType?: string, parameterIsOptional?: boolean): gdInstructionMetadata;
  addCodeOnlyParameter(type: string, supplementaryInformation: string): gdInstructionMetadata;
  setDefaultValue(defaultValue: string): gdInstructionMetadata;
  setParameterLongDescription(longDescription: string): gdInstructionMetadata;
  setParameterExtraInfo(extraInfo: string): gdInstructionMetadata;
  useStandardOperatorParameters(type: string): gdInstructionMetadata;
  useStandardRelationalOperatorParameters(type: string): gdInstructionMetadata;
  setRequiresBaseObjectCapability(capability: string): gdInstructionMetadata;
  getRequiredBaseObjectCapability(): string;
  markAsSimple(): gdInstructionMetadata;
  markAsAdvanced(): gdInstructionMetadata;
  markAsComplex(): gdInstructionMetadata;
  getCodeExtraInformation(): gdExtraInformation;
  delete(): void;
  ptr: number;
};// Automatically generated by GDevelop.js/scripts/generate-types.js
declare class gdInstructionOrExpressionGroupMetadata {
  constructor(): void;
  setIcon(icon: string): gdInstructionOrExpressionGroupMetadata;
  getIcon(): string;
  delete(): void;
  ptr: number;
};// Automatically generated by GDevelop.js/scripts/generate-types.js
declare class gdInstructionSentenceFormatter {
  static get(): gdInstructionSentenceFormatter;
  getAsFormattedText(instr: gdInstruction, metadat: gdInstructionMetadata): gdVectorPairStringTextFormatting;
  delete(): void;
  ptr: number;
};// Automatically generated by GDevelop.js/scripts/generate-types.js
declare class gdInstructionsList {
  push_back(gdInstruction): void;
  constructor(): void;
  insert(instr: gdInstruction, pos: number): gdInstruction;
  insertInstructions(list: gdInstructionsList, begin: number, end: number, pos: number): void;
  size(): number;
  set(index: number, instr: gdInstruction): void;
  contains(instr: gdInstruction): boolean;
  get(index: number): gdInstruction;
  remove(instr: gdInstruction): void;
  removeAt(index: number): void;
  clear(): void;
  serializeTo(element: gdSerializerElement): void;
  unserializeFrom(project: gdProject, element: gdSerializerElement): void;
  delete(): void;
  ptr: number;
};// Automatically generated by GDevelop.js/scripts/generate-types.js
declare class gdInstructionsTypeRenamer {
  constructor(project: gdProject, oldType: string, newType: string): void;
  launch(events: gdEventsList): void;
  delete(): void;
  ptr: number;
};// Automatically generated by GDevelop.js/scripts/generate-types.js
declare class gdJsCodeEvent extends gdBaseEvent {
  constructor(): void;
  getInlineCode(): string;
  setInlineCode(type: string): void;
  getParameterObjects(): string;
  setParameterObjects(type: string): void;
  isEventsSheetExpanded(): boolean;
  setEventsSheetExpanded(enable: boolean): void;
  clone(): gdJsCodeEvent;
  getType(): string;
  setType(type: string): void;
  isExecutable(): boolean;
  canHaveSubEvents(): boolean;
  hasSubEvents(): boolean;
  getSubEvents(): gdEventsList;
  isDisabled(): boolean;
  setDisabled(disable: boolean): void;
  isFolded(): boolean;
  setFolded(folded: boolean): void;
  serializeTo(element: gdSerializerElement): void;
  unserializeFrom(project: gdProject, element: gdSerializerElement): void;
  delete(): void;
  ptr: number;
};// Automatically generated by GDevelop.js/scripts/generate-types.js
declare class gdJsonResource extends gdResource {
  constructor(): void;
  delete(): void;
  ptr: number;
};// Automatically generated by GDevelop.js/scripts/generate-types.js
declare class gdJsPlatform extends gdPlatform {
  static get(): gdJsPlatform;
  addNewExtension(extension: gdPlatformExtension): void;
  getName(): string;
  getFullName(): string;
  getSubtitle(): string;
  getDescription(): string;
  getInstructionOrExpressionGroupMetadata(name: string): gdInstructionOrExpressionGroupMetadata;
  isExtensionLoaded(name: string): boolean;
  removeExtension(name: string): void;
  reloadBuiltinExtensions(): void;
  getAllPlatformExtensions(): gdVectorPlatformExtension;
  delete(): void;
  ptr: number;
};// Automatically generated by GDevelop.js/scripts/generate-types.js
declare class gdLayer {
  constructor(): void;
  setName(name: string): void;
  getName(): string;
  setVisibility(visible: boolean): void;
  getVisibility(): boolean;
  setLightingLayer(lightingLayer: boolean): void;
  isLightingLayer(): boolean;
  setFollowBaseLayerCamera(followBaseLayerCamera: boolean): void;
  isFollowingBaseLayerCamera(): boolean;
  setAmbientLightColor(r: number, g: number, b: number): void;
  getAmbientLightColorRed(): number;
  getAmbientLightColorGreen(): number;
  getAmbientLightColorBlue(): number;
  getEffects(): gdEffectsContainer;
  getCameraCount(): number;
  setCameraCount(cameraCount: number): void;
  serializeTo(element: gdSerializerElement): void;
  unserializeFrom(element: gdSerializerElement): void;
  delete(): void;
  ptr: number;
};// Automatically generated by GDevelop.js/scripts/generate-types.js
declare class gdLayout extends gdObjectsContainer {
  constructor(): void;
  setName(name: string): void;
  getName(): string;
  setBackgroundColor(r: number, g: number, b: number): void;
  getBackgroundColorRed(): number;
  getBackgroundColorGreen(): number;
  getBackgroundColorBlue(): number;
  setWindowDefaultTitle(name: string): void;
  getWindowDefaultTitle(): string;
  getInitialInstances(): gdInitialInstancesContainer;
  getVariables(): gdVariablesContainer;
  getEvents(): gdEventsList;
  updateBehaviorsSharedData(project: gdProject): void;
  getAllBehaviorSharedDataNames(): gdVectorString;
  hasBehaviorSharedData(behaviorName: string): boolean;
  getBehaviorSharedData(behaviorName: string): gdBehaviorsSharedData;
  insertNewLayer(name: string, position: number): void;
  insertLayer(layer: gdLayer, position: number): void;
  getLayer(name: string): gdLayer;
  getLayerAt(pos: number): gdLayer;
  hasLayerNamed(name: string): boolean;
  removeLayer(name: string): void;
  getLayersCount(): number;
  swapLayers(firstLayerIndex: number, secondLayerIndex: number): void;
  moveLayer(oldIndex: number, newIndex: number): void;
  serializeLayersTo(element: gdSerializerElement): void;
  unserializeLayersFrom(element: gdSerializerElement): void;
  getAssociatedEditorSettings(): gdEditorSettings;
  serializeTo(element: gdSerializerElement): void;
  unserializeFrom(project: gdProject, element: gdSerializerElement): void;
  setStopSoundsOnStartup(enable: boolean): void;
  stopSoundsOnStartup(): boolean;
  insertNewObject(project: gdProject, type: string, name: string, pos: number): gdObject;
  insertObject(obj: gdObject, pos: number): gdObject;
  hasObjectNamed(name: string): boolean;
  getObject(name: string): gdObject;
  getObjectAt(pos: number): gdObject;
  getObjectPosition(name: string): number;
  removeObject(name: string): void;
  swapObjects(first: number, second: number): void;
  moveObject(oldIndex: number, newIndex: number): void;
  moveObjectToAnotherContainer(name: string, newObjectsContainer: gdObjectsContainer, newPosition: number): void;
  getObjectsCount(): number;
  getObjectGroups(): gdObjectGroupsContainer;
  delete(): void;
  ptr: number;
};// Automatically generated by GDevelop.js/scripts/generate-types.js
declare class gdLayoutCodeGenerator {
  constructor(project: gdProject): void;
  generateLayoutCompleteCode(layout: gdLayout, includes: gdSetString, compilationForRuntime: boolean): string;
  delete(): void;
  ptr: number;
};// Automatically generated by GDevelop.js/scripts/generate-types.js
declare class gdLinkEvent extends gdBaseEvent {
  constructor(): void;
  setTarget(name: string): void;
  getTarget(): string;
  getIncludeConfig(): number;
  setIncludeAllEvents(): void;
  setIncludeEventsGroup(source: string): void;
  getEventsGroupName(): string;
  setIncludeStartAndEnd(start: number, end: number): void;
  getIncludeStart(): number;
  getIncludeEnd(): number;
  clone(): gdLinkEvent;
  getType(): string;
  setType(type: string): void;
  isExecutable(): boolean;
  canHaveSubEvents(): boolean;
  hasSubEvents(): boolean;
  getSubEvents(): gdEventsList;
  isDisabled(): boolean;
  setDisabled(disable: boolean): void;
  isFolded(): boolean;
  setFolded(folded: boolean): void;
  serializeTo(element: gdSerializerElement): void;
  unserializeFrom(project: gdProject, element: gdSerializerElement): void;
  delete(): void;
  ptr: number;
};// Automatically generated by GDevelop.js/scripts/generate-types.js
declare class gdLoadingScreen {
  constructor(): void;
  isGDevelopSplashShown(): boolean;
  showGDevelopSplash(show: boolean): void;
  getGDevelopLogoStyle(): string;
  setGDevelopLogoStyle(value: string): gdLoadingScreen;
  getBackgroundImageResourceName(): string;
  setBackgroundImageResourceName(value: string): gdLoadingScreen;
  getBackgroundColor(): number;
  setBackgroundColor(value: number): gdLoadingScreen;
  getBackgroundFadeInDuration(): number;
  setBackgroundFadeInDuration(value: number): gdLoadingScreen;
  getMinDuration(): number;
  setMinDuration(value: number): gdLoadingScreen;
  getLogoAndProgressFadeInDuration(): number;
  setLogoAndProgressFadeInDuration(value: number): gdLoadingScreen;
  getLogoAndProgressLogoFadeInDelay(): number;
  setLogoAndProgressLogoFadeInDelay(value: number): gdLoadingScreen;
  getShowProgressBar(): boolean;
  setShowProgressBar(value: boolean): gdLoadingScreen;
  getProgressBarMaxWidth(): number;
  setProgressBarMaxWidth(value: number): gdLoadingScreen;
  getProgressBarMinWidth(): number;
  setProgressBarMinWidth(value: number): gdLoadingScreen;
  getProgressBarWidthPercent(): number;
  setProgressBarWidthPercent(value: number): gdLoadingScreen;
  getProgressBarHeight(): number;
  setProgressBarHeight(value: number): gdLoadingScreen;
  getProgressBarColor(): number;
  setProgressBarColor(value: number): gdLoadingScreen;
  serializeTo(element: gdSerializerElement): void;
  unserializeFrom(element: gdSerializerElement): void;
  delete(): void;
  ptr: number;
};// Automatically generated by GDevelop.js/scripts/generate-types.js
declare class gdMapExtensionProperties {
  get(name: string): gdMapStringPropertyDescriptor;
  set(name: string, prop: gdMapStringPropertyDescriptor): void;
  has(name: string): boolean;
  keys(): gdVectorString;
  delete(): void;
  ptr: number;
};// Automatically generated by GDevelop.js/scripts/generate-types.js
declare class gdMapStringBoolean {
  constructor(): void;
  get(name: string): boolean;
  set(name: string, value: boolean): void;
  has(name: string): boolean;
  keys(): gdVectorString;
  delete(): void;
  ptr: number;
};// Automatically generated by GDevelop.js/scripts/generate-types.js
declare class gdMapStringDouble {
  constructor(): void;
  get(name: string): number;
  set(name: string, value: number): void;
  has(name: string): number;
  keys(): gdVectorString;
  delete(): void;
  ptr: number;
};// Automatically generated by GDevelop.js/scripts/generate-types.js
declare class gdMapStringEventMetadata {
  get(name: string): gdEventMetadata;
  set(name: string, prop: gdEventMetadata): void;
  has(name: string): boolean;
  keys(): gdVectorString;
  delete(): void;
  ptr: number;
};// Automatically generated by GDevelop.js/scripts/generate-types.js
declare class gdMapStringExpressionMetadata {
  get(name: string): gdExpressionMetadata;
  set(name: string, prop: gdExpressionMetadata): void;
  has(name: string): boolean;
  keys(): gdVectorString;
  delete(): void;
  ptr: number;
};// Automatically generated by GDevelop.js/scripts/generate-types.js
declare class gdMapStringInstructionMetadata {
  get(name: string): gdInstructionMetadata;
  set(name: string, prop: gdInstructionMetadata): void;
  has(name: string): boolean;
  keys(): gdVectorString;
  delete(): void;
  ptr: number;
};// Automatically generated by GDevelop.js/scripts/generate-types.js
declare class gdMapStringPropertyDescriptor {
  constructor(): void;
  getOrCreate(name: string): gdPropertyDescriptor;
  get(name: string): gdPropertyDescriptor;
  set(name: string, prop: gdPropertyDescriptor): void;
  has(name: string): boolean;
  keys(): gdVectorString;
  delete(): void;
  ptr: number;
};// Automatically generated by GDevelop.js/scripts/generate-types.js
declare class gdMapStringSerializerValue {
  constructor(): void;
  getOrCreate(name: string): gdSerializerValue;
  get(name: string): gdSerializerValue;
  set(name: string, prop: gdSerializerValue): void;
  has(name: string): boolean;
  keys(): gdVectorString;
  delete(): void;
  ptr: number;
};// Automatically generated by GDevelop.js/scripts/generate-types.js
declare class gdMapStringString {
  constructor(): void;
  get(name: string): string;
  set(name: string, str: string): void;
  has(name: string): boolean;
  keys(): gdVectorString;
  delete(): void;
  ptr: number;
};// Automatically generated by GDevelop.js/scripts/generate-types.js
declare class gdMapStringVariable {
  get(name: string): gdVariable;
  set(name: string, prop: gdVariable): void;
  has(name: string): boolean;
  keys(): gdVectorString;
  delete(): void;
  ptr: number;
};// Automatically generated by GDevelop.js/scripts/generate-types.js
declare class gdMetadataProvider {
  static getExtensionAndBehaviorMetadata(p: gdPlatform, type: string): gdExtensionAndBehaviorMetadata;
  static getExtensionAndObjectMetadata(p: gdPlatform, type: string): gdExtensionAndObjectMetadata;
  static getExtensionAndEffectMetadata(p: gdPlatform, type: string): gdExtensionAndEffectMetadata;
  static getExtensionAndActionMetadata(p: gdPlatform, type: string): gdExtensionAndInstructionMetadata;
  static getExtensionAndConditionMetadata(p: gdPlatform, type: string): gdExtensionAndInstructionMetadata;
  static getExtensionAndExpressionMetadata(p: gdPlatform, type: string): gdExtensionAndExpressionMetadata;
  static getExtensionAndObjectExpressionMetadata(p: gdPlatform, objectType: string, type: string): gdExtensionAndExpressionMetadata;
  static getExtensionAndBehaviorExpressionMetadata(p: gdPlatform, autoType: string, type: string): gdExtensionAndExpressionMetadata;
  static getExtensionAndStrExpressionMetadata(p: gdPlatform, type: string): gdExtensionAndExpressionMetadata;
  static getExtensionAndObjectStrExpressionMetadata(p: gdPlatform, objectType: string, type: string): gdExtensionAndExpressionMetadata;
  static getExtensionAndBehaviorStrExpressionMetadata(p: gdPlatform, autoType: string, type: string): gdExtensionAndExpressionMetadata;
  static getBehaviorMetadata(p: gdPlatform, type: string): gdBehaviorMetadata;
  static getObjectMetadata(p: gdPlatform, type: string): gdObjectMetadata;
  static getEffectMetadata(p: gdPlatform, type: string): gdEffectMetadata;
  static getActionMetadata(p: gdPlatform, type: string): gdInstructionMetadata;
  static getConditionMetadata(p: gdPlatform, type: string): gdInstructionMetadata;
  static getExpressionMetadata(p: gdPlatform, type: string): gdExpressionMetadata;
  static getObjectExpressionMetadata(p: gdPlatform, objectType: string, type: string): gdExpressionMetadata;
  static getBehaviorExpressionMetadata(p: gdPlatform, autoType: string, type: string): gdExpressionMetadata;
  static getStrExpressionMetadata(p: gdPlatform, type: string): gdExpressionMetadata;
  static getObjectStrExpressionMetadata(p: gdPlatform, objectType: string, type: string): gdExpressionMetadata;
  static getBehaviorStrExpressionMetadata(p: gdPlatform, autoType: string, type: string): gdExpressionMetadata;
  static isBadExpressionMetadata(metadata: gdExpressionMetadata): boolean;
  static isBadBehaviorMetadata(metadata: gdBehaviorMetadata): boolean;
  delete(): void;
  ptr: number;
};// Automatically generated by GDevelop.js/scripts/generate-types.js
declare class gdMultipleInstructionMetadata {
  addParameter(type: string, description: string, optionalObjectType: string, parameterIsOptional: boolean): gdMultipleInstructionMetadata;
  addCodeOnlyParameter(type: string, supplementaryInformation: string): gdMultipleInstructionMetadata;
  setDefaultValue(defaultValue: string): gdMultipleInstructionMetadata;
  setParameterLongDescription(longDescription: string): gdMultipleInstructionMetadata;
  useStandardParameters(type: string): gdMultipleInstructionMetadata;
  setHidden(): gdMultipleInstructionMetadata;
  setFunctionName(functionName: string): gdMultipleInstructionMetadata;
  setGetter(getter: string): gdMultipleInstructionMetadata;
  setIncludeFile(includeFile: string): gdMultipleInstructionMetadata;
  addIncludeFile(includeFile: string): gdMultipleInstructionMetadata;
  markAsSimple(): gdMultipleInstructionMetadata;
  markAsAdvanced(): gdMultipleInstructionMetadata;
  markAsComplex(): gdMultipleInstructionMetadata;
  delete(): void;
  ptr: number;
};// Automatically generated by GDevelop.js/scripts/generate-types.js
declare class gdNamedPropertyDescriptor extends gdPropertyDescriptor {
  constructor(): void;
  setName(name: string): gdPropertyDescriptor;
  getName(): string;
  delete(): void;
  ptr: number;
};// Automatically generated by GDevelop.js/scripts/generate-types.js
declare class gdNamedPropertyDescriptorsList {
  constructor(): void;
  insertNew(name: string, pos: number): gdNamedPropertyDescriptor;
  insert(item: gdNamedPropertyDescriptor, pos: number): gdNamedPropertyDescriptor;
  has(name: string): boolean;
  get(name: string): gdNamedPropertyDescriptor;
  getAt(pos: number): gdNamedPropertyDescriptor;
  remove(name: string): void;
  move(oldIndex: number, newIndex: number): void;
  getCount(): number;
  size(): number;
  at(index: number): gdNamedPropertyDescriptor;
  delete(): void;
  ptr: number;
};// Automatically generated by GDevelop.js/scripts/generate-types.js
declare class gdObject {
  constructor(name: string, type: string, configuration: gdObjectConfiguration): void;
  clone(): gdUniquePtrObject;
  setName(name: string): void;
  getName(): string;
  setAssetStoreId(assetStoreId: string): void;
  getAssetStoreId(): string;
  setType(type: string): void;
  getType(): string;
  setTags(tags: string): void;
  getTags(): string;
  getConfiguration(): gdObjectConfiguration;
  getVariables(): gdVariablesContainer;
  getEffects(): gdEffectsContainer;
  getAllBehaviorNames(): gdVectorString;
  hasBehaviorNamed(name: string): boolean;
  addNewBehavior(project: gdProject, type: string, name: string): gdBehavior;
  getBehavior(name: string): gdBehavior;
  removeBehavior(name: string): void;
  renameBehavior(oldName: string, name: string): boolean;
  serializeTo(element: gdSerializerElement): void;
  unserializeFrom(project: gdProject, element: gdSerializerElement): void;
  delete(): void;
  ptr: number;
};// Automatically generated by GDevelop.js/scripts/generate-types.js
declare class gdObjectConfiguration {
  constructor(): void;
  clone(): gdUniquePtrObjectConfiguration;
  getType(): string;
  getProperties(): gdMapStringPropertyDescriptor;
  updateProperty(name: string, value: string): boolean;
  getInitialInstanceProperties(instance: gdInitialInstance, project: gdProject, scene: gdLayout): gdMapStringPropertyDescriptor;
  updateInitialInstanceProperty(instance: gdInitialInstance, name: string, value: string, project: gdProject, scene: gdLayout): boolean;
  exposeResources(worker: gdArbitraryResourceWorker): void;
  serializeTo(element: gdSerializerElement): void;
  unserializeFrom(project: gdProject, element: gdSerializerElement): void;
  delete(): void;
  ptr: number;
};// Automatically generated by GDevelop.js/scripts/generate-types.js
declare class gdObjectGroup {
  constructor(): void;
  getName(): string;
  setName(name: string): void;
  addObject(obj: string): void;
  removeObject(obj: string): void;
  find(obj: string): boolean;
  getAllObjectsNames(): gdVectorString;
  serializeTo(element: gdSerializerElement): void;
  unserializeFrom(element: gdSerializerElement): void;
  delete(): void;
  ptr: number;
};// Automatically generated by GDevelop.js/scripts/generate-types.js
declare class gdObjectGroupsContainer {
  constructor(): void;
  has(name: string): boolean;
  insert(objectGroup: gdObjectGroup, position: number): gdObjectGroup;
  insertNew(name: string, position: number): gdObjectGroup;
  count(): number;
  get(name: string): gdObjectGroup;
  getAt(index: number): gdObjectGroup;
  clear(): void;
  remove(name: string): void;
  getPosition(name: string): number;
  rename(oldName: string, newName: string): boolean;
  move(oldIndex: number, newIndex: number): void;
  serializeTo(element: gdSerializerElement): void;
  unserializeFrom(element: gdSerializerElement): void;
  delete(): void;
  ptr: number;
};// Automatically generated by GDevelop.js/scripts/generate-types.js
declare class gdObjectJsImplementation extends gdObjectConfiguration {
  constructor(): void;
  clone(): gdUniquePtrObjectConfiguration;
  getProperties(): gdMapStringPropertyDescriptor;
  updateProperty(name: string, value: string): boolean;
  getInitialInstanceProperties(instance: gdInitialInstance, project: gdProject, scene: gdLayout): gdMapStringPropertyDescriptor;
  updateInitialInstanceProperty(instance: gdInitialInstance, name: string, value: string, project: gdProject, scene: gdLayout): boolean;
  getRawJSONContent(): string;
  setRawJSONContent(newContent: string): gdObjectJsImplementation;
  serializeTo(element: gdSerializerElement): void;
  unserializeFrom(project: gdProject, element: gdSerializerElement): void;
  delete(): void;
  ptr: number;
};// Automatically generated by GDevelop.js/scripts/generate-types.js
declare class gdObjectMetadata {
  getName(): string;
  getFullName(): string;
  getDescription(): string;
  getIconFilename(): string;
  getHelpPath(): string;
  getCategoryFullName(): string;
  setCategoryFullName(categoryFullName: string): gdObjectMetadata;
  addScopedCondition(name: string, fullname: string, description: string, sentence: string, group: string, icon: string, smallicon: string): gdInstructionMetadata;
  addScopedAction(name: string, fullname: string, description: string, sentence: string, group: string, icon: string, smallicon: string): gdInstructionMetadata;
  addCondition(name: string, fullname: string, description: string, sentence: string, group: string, icon: string, smallicon: string): gdInstructionMetadata;
  addAction(name: string, fullname: string, description: string, sentence: string, group: string, icon: string, smallicon: string): gdInstructionMetadata;
  addExpression(name: string, fullname: string, description: string, group: string, smallicon: string): gdExpressionMetadata;
  addStrExpression(name: string, fullname: string, description: string, group: string, smallicon: string): gdExpressionMetadata;
  addExpressionAndCondition(type: string, name: string, fullname: string, description: string, sentenceName: string, group: string, icon: string): gdMultipleInstructionMetadata;
  addExpressionAndConditionAndAction(type: string, name: string, fullname: string, description: string, sentenceName: string, group: string, icon: string): gdMultipleInstructionMetadata;
  getAllActions(): gdMapStringInstructionMetadata;
  getAllConditions(): gdMapStringInstructionMetadata;
  getAllExpressions(): gdMapStringExpressionMetadata;
  getAllStrExpressions(): gdMapStringExpressionMetadata;
  setIncludeFile(includeFile: string): gdObjectMetadata;
  addIncludeFile(includeFile: string): gdObjectMetadata;
  getUnsupportedBaseObjectCapabilities(): gdSetString;
  addUnsupportedBaseObjectCapability(capability: string): gdObjectMetadata;
  isUnsupportedBaseObjectCapability(capability: string): boolean;
  delete(): void;
  ptr: number;
};// Automatically generated by GDevelop.js/scripts/generate-types.js
declare class gdObjectsContainer {
  constructor(): void;
  insertNewObject(project: gdProject, type: string, name: string, pos: number): gdObject;
  insertObject(obj: gdObject, pos: number): gdObject;
  hasObjectNamed(name: string): boolean;
  getObject(name: string): gdObject;
  getObjectAt(pos: number): gdObject;
  getObjectPosition(name: string): number;
  removeObject(name: string): void;
  swapObjects(first: number, second: number): void;
  moveObject(oldIndex: number, newIndex: number): void;
  moveObjectToAnotherContainer(name: string, newObjectsContainer: gdObjectsContainer, newPosition: number): void;
  getObjectsCount(): number;
  getObjectGroups(): gdObjectGroupsContainer;
  delete(): void;
  ptr: number;
};// Automatically generated by GDevelop.js/scripts/generate-types.js
declare class gdPairStringVariable {
  constructor(): void;
  getName(): string;
  getVariable(): gdVariable;
  delete(): void;
  ptr: number;
};// Automatically generated by GDevelop.js/scripts/generate-types.js
declare class gdPanelSpriteObject extends gdObjectConfiguration {
  constructor(): void;
  getLeftMargin(): number;
  setLeftMargin(newMargin: number): void;
  getTopMargin(): number;
  setTopMargin(newMargin: number): void;
  getRightMargin(): number;
  setRightMargin(newMargin: number): void;
  getBottomMargin(): number;
  setBottomMargin(newMargin: number): void;
  isTiled(): boolean;
  setTiled(enable: boolean): void;
  setTexture(texture: string): void;
  getTexture(): string;
  setWidth(width: number): void;
  getWidth(): number;
  setHeight(height: number): void;
  getHeight(): number;
  delete(): void;
  ptr: number;
};// Automatically generated by GDevelop.js/scripts/generate-types.js
declare class gdParameterMetadata {
  constructor(): void;
  getType(): string;
  setType(type_: string): gdParameterMetadata;
  getName(): string;
  setName(name_: string): gdParameterMetadata;
  getExtraInfo(): string;
  setExtraInfo(extraInfo_: string): gdParameterMetadata;
  isOptional(): boolean;
  setOptional(optional_: boolean): gdParameterMetadata;
  getDescription(): string;
  setDescription(description_: string): gdParameterMetadata;
  getLongDescription(): string;
  setLongDescription(longDescription_: string): gdParameterMetadata;
  isCodeOnly(): boolean;
  setCodeOnly(codeOnly_: boolean): gdParameterMetadata;
  getDefaultValue(): string;
  setDefaultValue(defaultValue_: string): gdParameterMetadata;
  static isObject(param: string): boolean;
  static isBehavior(param: string): boolean;
  static isExpression(type_: string, parameterType: string): boolean;
  serializeTo(element: gdSerializerElement): void;
  unserializeFrom(element: gdSerializerElement): void;
  delete(): void;
  ptr: number;
};// Automatically generated by GDevelop.js/scripts/generate-types.js
declare class gdParameterMetadataTools {
  static parametersToObjectsContainer(project: gdProject, parameters: gdVectorParameterMetadata, outputObjectsContainer: gdObjectsContainer): void;
  static getObjectParameterIndexFor(parameters: gdVectorParameterMetadata, parameterIndex: number): number;
  delete(): void;
  ptr: number;
};// Automatically generated by GDevelop.js/scripts/generate-types.js
declare class gdParticleEmitterObject extends gdObjectConfiguration {
  constructor(): void;
  setRendererType(type: ParticleEmitterObject_RendererType): void;
  getRendererType(): ParticleEmitterObject_RendererType;
  setParticleTexture(resourceName: string): void;
  getParticleTexture(): string;
  setRendererParam1(newValue: number): void;
  getRendererParam1(): number;
  setRendererParam2(newValue: number): void;
  getRendererParam2(): number;
  isRenderingAdditive(): boolean;
  setRenderingAdditive(): void;
  setRenderingAlpha(): void;
  setMaxParticleNb(newValue: number): void;
  getMaxParticleNb(): number;
  setTank(newValue: number): void;
  getTank(): number;
  setFlow(newValue: number): void;
  getFlow(): number;
  setDestroyWhenNoParticles(enable: boolean): void;
  getDestroyWhenNoParticles(): boolean;
  setEmitterForceMin(newValue: number): void;
  getEmitterForceMin(): number;
  setEmitterForceMax(newValue: number): void;
  getEmitterForceMax(): number;
  setConeSprayAngle(newValue: number): void;
  getConeSprayAngle(): number;
  setZoneRadius(newValue: number): void;
  getZoneRadius(): number;
  setParticleGravityX(newValue: number): void;
  getParticleGravityX(): number;
  setParticleGravityY(newValue: number): void;
  getParticleGravityY(): number;
  setParticleGravityAngle(newValue: number): void;
  getParticleGravityAngle(): number;
  setParticleGravityLength(newValue: number): void;
  getParticleGravityLength(): number;
  setParticleLifeTimeMin(newValue: number): void;
  getParticleLifeTimeMin(): number;
  setParticleLifeTimeMax(newValue: number): void;
  getParticleLifeTimeMax(): number;
  setParticleRed1(newValue: number): void;
  getParticleRed1(): number;
  setParticleRed2(newValue: number): void;
  getParticleRed2(): number;
  setParticleGreen1(newValue: number): void;
  getParticleGreen1(): number;
  setParticleGreen2(newValue: number): void;
  getParticleGreen2(): number;
  setParticleBlue1(newValue: number): void;
  getParticleBlue1(): number;
  setParticleBlue2(newValue: number): void;
  getParticleBlue2(): number;
  setParticleAlpha1(newValue: number): void;
  getParticleAlpha1(): number;
  setParticleAlpha2(newValue: number): void;
  getParticleAlpha2(): number;
  setParticleSize1(newValue: number): void;
  getParticleSize1(): number;
  setParticleSize2(newValue: number): void;
  getParticleSize2(): number;
  setParticleAngle1(newValue: number): void;
  getParticleAngle1(): number;
  setParticleAngle2(newValue: number): void;
  getParticleAngle2(): number;
  setParticleAlphaRandomness1(newValue: number): void;
  getParticleAlphaRandomness1(): number;
  setParticleAlphaRandomness2(newValue: number): void;
  getParticleAlphaRandomness2(): number;
  setParticleSizeRandomness1(newValue: number): void;
  getParticleSizeRandomness1(): number;
  setParticleSizeRandomness2(newValue: number): void;
  getParticleSizeRandomness2(): number;
  setParticleAngleRandomness1(newValue: number): void;
  getParticleAngleRandomness1(): number;
  setParticleAngleRandomness2(newValue: number): void;
  getParticleAngleRandomness2(): number;
  delete(): void;
  ptr: number;
};// Automatically generated by GDevelop.js/scripts/generate-types.js
declare class gdPlatform {
  getName(): string;
  getFullName(): string;
  getSubtitle(): string;
  getDescription(): string;
  getInstructionOrExpressionGroupMetadata(name: string): gdInstructionOrExpressionGroupMetadata;
  isExtensionLoaded(name: string): boolean;
  removeExtension(name: string): void;
  reloadBuiltinExtensions(): void;
  getAllPlatformExtensions(): gdVectorPlatformExtension;
  delete(): void;
  ptr: number;
};// Automatically generated by GDevelop.js/scripts/generate-types.js
declare class gdPlatformExtension {
  constructor(): void;
  setExtensionInformation(name: string, fullname: string, description: string, author: string, license: string): gdPlatformExtension;
  setExtensionHelpPath(helpPath: string): gdPlatformExtension;
  setIconUrl(iconUrl: string): gdPlatformExtension;
  setCategory(category: string): gdPlatformExtension;
  addInstructionOrExpressionGroupMetadata(name: string): gdInstructionOrExpressionGroupMetadata;
  markAsDeprecated(): void;
  addExpressionAndCondition(type: string, name: string, fullname: string, description: string, sentenceName: string, group: string, icon: string): gdMultipleInstructionMetadata;
  addExpressionAndConditionAndAction(type: string, name: string, fullname: string, description: string, sentenceName: string, group: string, icon: string): gdMultipleInstructionMetadata;
  addCondition(name: string, fullname: string, description: string, sentence: string, group: string, icon: string, smallicon: string): gdInstructionMetadata;
  addAction(name: string, fullname: string, description: string, sentence: string, group: string, icon: string, smallicon: string): gdInstructionMetadata;
  addExpression(name: string, fullname: string, description: string, group: string, smallicon: string): gdExpressionMetadata;
  addStrExpression(name: string, fullname: string, description: string, group: string, smallicon: string): gdExpressionMetadata;
  addDependency(): gdDependencyMetadata;
  addBehavior(name: string, fullname: string, defaultName: string, description: string, group: string, icon24x24: string, className: string, instance: gdBehavior, sharedDatasInstance: gdBehaviorsSharedData): gdBehaviorMetadata;
  addEventsBasedBehavior(name: string, fullname: string, description: string, group: string, icon24x24: string): gdBehaviorMetadata;
  addObject(name: string, fullname: string, description: string, icon24x24: string, instance: gdObjectConfiguration): gdObjectMetadata;
  addEventsBasedObject(name: string, fullname: string, description: string, icon24x24: string): gdObjectMetadata;
  addEffect(name: string): gdEffectMetadata;
  registerProperty(name: string): gdPropertyDescriptor;
  getFullName(): string;
  getName(): string;
  getCategory(): string;
  getDescription(): string;
  getAuthor(): string;
  getLicense(): string;
  getHelpPath(): string;
  getIconUrl(): string;
  isBuiltin(): boolean;
  getNameSpace(): string;
  addDuplicatedAction(newActionName: string, copiedActionName: string): gdInstructionMetadata;
  addDuplicatedCondition(newConditionName: string, copiedConditionName: string): gdInstructionMetadata;
  addDuplicatedExpression(newExpressionName: string, copiedExpressionName: string): gdExpressionMetadata;
  addDuplicatedStrExpression(newExpressionName: string, copiedExpressionName: string): gdExpressionMetadata;
  getExtensionObjectsTypes(): gdVectorString;
  getBehaviorsTypes(): gdVectorString;
  getExtensionEffectTypes(): gdVectorString;
  getObjectMetadata(type: string): gdObjectMetadata;
  getBehaviorMetadata(type: string): gdBehaviorMetadata;
  getEffectMetadata(type: string): gdEffectMetadata;
  getAllEvents(): gdMapStringEventMetadata;
  getAllActions(): gdMapStringInstructionMetadata;
  getAllConditions(): gdMapStringInstructionMetadata;
  getAllExpressions(): gdMapStringExpressionMetadata;
  getAllStrExpressions(): gdMapStringExpressionMetadata;
  getAllActionsForObject(objectType: string): gdMapStringInstructionMetadata;
  getAllConditionsForObject(objectType: string): gdMapStringInstructionMetadata;
  getAllExpressionsForObject(objectType: string): gdMapStringExpressionMetadata;
  getAllStrExpressionsForObject(objectType: string): gdMapStringExpressionMetadata;
  getAllActionsForBehavior(autoType: string): gdMapStringInstructionMetadata;
  getAllConditionsForBehavior(autoType: string): gdMapStringInstructionMetadata;
  getAllExpressionsForBehavior(autoType: string): gdMapStringExpressionMetadata;
  getAllStrExpressionsForBehavior(autoType: string): gdMapStringExpressionMetadata;
  getAllProperties(): gdMapStringPropertyDescriptor;
  getAllDependencies(): gdVectorDependencyMetadata;
  static getNamespaceSeparator(): string;
  delete(): void;
  ptr: number;
};// Automatically generated by GDevelop.js/scripts/generate-types.js
declare class gdPlatformSpecificAssets {
  constructor(): void;
  has(platform: string, name: string): boolean;
  get(platform: string, name: string): string;
  remove(platform: string, name: string): void;
  set(platform: string, name: string, resourceName: string): void;
  exposeResources(worker: gdArbitraryResourceWorker): void;
  serializeTo(element: gdSerializerElement): void;
  unserializeFrom(element: gdSerializerElement): void;
  delete(): void;
  ptr: number;
};// Automatically generated by GDevelop.js/scripts/generate-types.js
declare class gdPoint {
  constructor(name: string): void;
  setName(name: string): void;
  getName(): string;
  setXY(x: number, y: number): void;
  getX(): number;
  setX(x: number): void;
  getY(): number;
  setY(y: number): void;
  delete(): void;
  ptr: number;
};// Automatically generated by GDevelop.js/scripts/generate-types.js
declare class gdPolygon2d {
  constructor(): void;
  getVertices(): gdVectorVector2f;
  move(x: number, y: number): void;
  rotate(angle: number): void;
  isConvex(): boolean;
  computeCenter(): gdVector2f;
  static createRectangle(width: number, height: number): gdPolygon2d;
  delete(): void;
  ptr: number;
};// Automatically generated by GDevelop.js/scripts/generate-types.js
declare class gdPreviewExportOptions {
  constructor(project: gdProject, outputPath: string): void;
  useWebsocketDebuggerClientWithServerAddress(address: string, port: string): gdPreviewExportOptions;
  useWindowMessageDebuggerClient(): gdPreviewExportOptions;
  setLayoutName(layoutName: string): gdPreviewExportOptions;
  setExternalLayoutName(externalLayoutName: string): gdPreviewExportOptions;
  setIncludeFileHash(includeFile: string, hash: number): gdPreviewExportOptions;
  setProjectDataOnlyExport(enable: boolean): gdPreviewExportOptions;
  setFullLoadingScreen(enable: boolean): gdPreviewExportOptions;
  setNonRuntimeScriptsCacheBurst(value: number): gdPreviewExportOptions;
  setElectronRemoteRequirePath(electronRemoteRequirePath: string): gdPreviewExportOptions;
  delete(): void;
  ptr: number;
};// Automatically generated by GDevelop.js/scripts/generate-types.js
declare class gdProject extends gdObjectsContainer {
  constructor(): void;
  setName(name: string): void;
  getName(): string;
  getCategories(): gdVectorString;
  setDescription(description: string): void;
  getDescription(): string;
  setVersion(authorName: string): void;
  getVersion(): string;
  setAuthor(authorName: string): void;
  getAuthor(): string;
  getAuthorIds(): gdVectorString;
  isPlayableWithKeyboard(): boolean;
  setPlayableWithKeyboard(playable: boolean): void;
  isPlayableWithGamepad(): boolean;
  setPlayableWithGamepad(playable: boolean): void;
  isPlayableWithMobile(): boolean;
  setPlayableWithMobile(playable: boolean): void;
  setPackageName(packageName: string): void;
  getPackageName(): string;
  setTemplateSlug(templateSlug: string): void;
  getTemplateSlug(): string;
  setOrientation(orientation: string): void;
  getOrientation(): string;
  setProjectUuid(projectUuid: string): void;
  getProjectUuid(): string;
  resetProjectUuid(): void;
  setProjectFile(file: string): void;
  getProjectFile(): string;
  setGameResolutionSize(width: number, height: number): void;
  getGameResolutionWidth(): number;
  getGameResolutionHeight(): number;
  getAdaptGameResolutionAtRuntime(): boolean;
  setAdaptGameResolutionAtRuntime(adaptGameResolutionAtRuntime: boolean): void;
  setScaleMode(scaleMode: string): void;
  getScaleMode(): string;
  setPixelsRounding(pixelsRounding: boolean): void;
  getPixelsRounding(): boolean;
  setSizeOnStartupMode(orientation: string): void;
  getSizeOnStartupMode(): string;
  getMaximumFPS(): number;
  setMaximumFPS(fps: number): void;
  getMinimumFPS(): number;
  setMinimumFPS(fps: number): void;
  setFolderProject(enable: boolean): void;
  isFolderProject(): boolean;
  setUseDeprecatedZeroAsDefaultZOrder(enable: boolean): void;
  getUseDeprecatedZeroAsDefaultZOrder(): boolean;
  setLastCompilationDirectory(path: string): void;
  getLastCompilationDirectory(): string;
  getExtensionProperties(): gdExtensionProperties;
  addPlatform(platform: gdPlatform): void;
  getCurrentPlatform(): gdPlatform;
  getPlatformSpecificAssets(): gdPlatformSpecificAssets;
  getLoadingScreen(): gdLoadingScreen;
  hasLayoutNamed(name: string): boolean;
  getLayout(name: string): gdLayout;
  getLayoutAt(index: number): gdLayout;
  swapLayouts(first: number, second: number): void;
  getLayoutsCount(): number;
  insertNewLayout(name: string, position: number): gdLayout;
  removeLayout(name: string): void;
  setFirstLayout(name: string): void;
  getFirstLayout(): string;
  hasExternalEventsNamed(name: string): boolean;
  getExternalEvents(name: string): gdExternalEvents;
  getExternalEventsAt(index: number): gdExternalEvents;
  swapExternalEvents(first: number, second: number): void;
  getExternalEventsCount(): number;
  insertNewExternalEvents(name: string, position: number): gdExternalEvents;
  removeExternalEvents(name: string): void;
  hasExternalLayoutNamed(name: string): boolean;
  getExternalLayout(name: string): gdExternalLayout;
  getExternalLayoutAt(index: number): gdExternalLayout;
  swapExternalLayouts(first: number, second: number): void;
  getExternalLayoutsCount(): number;
  insertNewExternalLayout(name: string, position: number): gdExternalLayout;
  removeExternalLayout(name: string): void;
  hasEventsFunctionsExtensionNamed(name: string): boolean;
  getEventsFunctionsExtension(name: string): gdEventsFunctionsExtension;
  getEventsFunctionsExtensionAt(index: number): gdEventsFunctionsExtension;
  swapEventsFunctionsExtensions(first: number, second: number): void;
  getEventsFunctionsExtensionsCount(): number;
  insertNewEventsFunctionsExtension(name: string, position: number): gdEventsFunctionsExtension;
  insertEventsFunctionsExtension(eventsFunctionsExtension: gdEventsFunctionsExtension, position: number): gdEventsFunctionsExtension;
  removeEventsFunctionsExtension(name: string): void;
  hasEventsBasedObject(type: string): boolean;
  getEventsBasedObject(type: string): gdEventsBasedObject;
  getVariables(): gdVariablesContainer;
  getResourcesManager(): gdResourcesManager;
  exposeResources(worker: gdArbitraryResourceWorker): void;
  static validateName(name: string): boolean;
  serializeTo(element: gdSerializerElement): void;
  unserializeFrom(element: gdSerializerElement): void;
  getTypeOfBehavior(layout: gdLayout, name: string, searchInGroups: boolean): string;
  getTypeOfObject(layout: gdLayout, name: string, searchInGroups: boolean): string;
  getBehaviorsOfObject(layout: gdLayout, name: string, searchInGroups: boolean): gdVectorString;
  insertNewObject(project: gdProject, type: string, name: string, pos: number): gdObject;
  insertObject(obj: gdObject, pos: number): gdObject;
  hasObjectNamed(name: string): boolean;
  getObject(name: string): gdObject;
  getObjectAt(pos: number): gdObject;
  getObjectPosition(name: string): number;
  removeObject(name: string): void;
  swapObjects(first: number, second: number): void;
  moveObject(oldIndex: number, newIndex: number): void;
  moveObjectToAnotherContainer(name: string, newObjectsContainer: gdObjectsContainer, newPosition: number): void;
  getObjectsCount(): number;
  getObjectGroups(): gdObjectGroupsContainer;
  delete(): void;
  ptr: number;
};// Automatically generated by GDevelop.js/scripts/generate-types.js
declare class gdProjectHelper {
  static createNewGDJSProject(): gdProject;
  static initializePlatforms(): void;
  static sanityCheckBehaviorProperty(behavior: gdBehavior, propertyName: string, newValue: string): string;
  static sanityCheckBehaviorsSharedDataProperty(behavior: gdBehaviorsSharedData, propertyName: string, newValue: string): string;
  static sanityCheckObjectProperty(configuration: gdObjectConfiguration, propertyName: string, newValue: string): string;
  static sanityCheckObjectInitialInstanceProperty(configuration: gdObjectConfiguration, propertyName: string, newValue: string): string;
  delete(): void;
  ptr: number;
};// Automatically generated by GDevelop.js/scripts/generate-types.js
declare class gdProjectResourcesAdder {
  static getAllUseless(project: gdProject, resourceType: string): gdVectorString;
  static removeAllUseless(project: gdProject, resourceType: string): void;
  delete(): void;
  ptr: number;
};// Automatically generated by GDevelop.js/scripts/generate-types.js
declare class gdProjectResourcesCopier {
  static copyAllResourcesTo(project: gdProject, fs: gdAbstractFileSystem, destinationDirectory: string, updateOriginalProject: boolean, preserveAbsoluteFilenames: boolean, preserveDirectoryStructure: boolean): boolean;
  delete(): void;
  ptr: number;
};// Automatically generated by GDevelop.js/scripts/generate-types.js
declare class gdPropertyDescriptor {
  constructor(propValue: string): void;
  setValue(value: string): gdPropertyDescriptor;
  getValue(): string;
  setType(type: string): gdPropertyDescriptor;
  getType(): string;
  setLabel(label: string): gdPropertyDescriptor;
  getLabel(): string;
  setDescription(label: string): gdPropertyDescriptor;
  getDescription(): string;
  setGroup(label: string): gdPropertyDescriptor;
  getGroup(): string;
  addExtraInfo(type: string): gdPropertyDescriptor;
  setExtraInfo(info: gdVectorString): gdPropertyDescriptor;
  getExtraInfo(): gdVectorString;
  setHidden(enable: boolean): gdPropertyDescriptor;
  isHidden(): boolean;
  serializeTo(element: gdSerializerElement): void;
  unserializeFrom(element: gdSerializerElement): void;
  serializeValuesTo(element: gdSerializerElement): void;
  unserializeValuesFrom(element: gdSerializerElement): void;
  delete(): void;
  ptr: number;
};// Automatically generated by GDevelop.js/scripts/generate-types.js
declare class gdRepeatEvent extends gdBaseEvent {
  constructor(): void;
  getConditions(): gdInstructionsList;
  getActions(): gdInstructionsList;
  setRepeatExpression(expr: string): void;
  getRepeatExpression(): string;
  clone(): gdRepeatEvent;
  getType(): string;
  setType(type: string): void;
  isExecutable(): boolean;
  canHaveSubEvents(): boolean;
  hasSubEvents(): boolean;
  getSubEvents(): gdEventsList;
  isDisabled(): boolean;
  setDisabled(disable: boolean): void;
  isFolded(): boolean;
  setFolded(folded: boolean): void;
  serializeTo(element: gdSerializerElement): void;
  unserializeFrom(project: gdProject, element: gdSerializerElement): void;
  delete(): void;
  ptr: number;
};// Automatically generated by GDevelop.js/scripts/generate-types.js
declare class gdResource {
  constructor(): void;
  clone(): gdResource;
  setName(name: string): void;
  getName(): string;
  setKind(kind: 'image' | 'audio' | 'font' | 'video' | 'json'): void;
  getKind(): 'image' | 'audio' | 'font' | 'video' | 'json';
  isUserAdded(): boolean;
  setUserAdded(yes: boolean): void;
  useFile(): boolean;
  setFile(file: string): void;
  getFile(): string;
  setMetadata(metadata: string): void;
  getMetadata(): string;
  setOrigin(originName: string, originIdentifier: string): void;
  getOriginName(): string;
  getOriginIdentifier(): string;
  getProperties(): gdMapStringPropertyDescriptor;
  updateProperty(name: string, value: string): boolean;
  serializeTo(element: gdSerializerElement): void;
  unserializeFrom(element: gdSerializerElement): void;
  delete(): void;
  ptr: number;
};// Automatically generated by GDevelop.js/scripts/generate-types.js
declare class gdResourcesInUseHelper extends gdArbitraryResourceWorker {
  constructor(): void;
  getAllImages(): gdSetString;
  getAllAudios(): gdSetString;
  getAllFonts(): gdSetString;
  getAllBitmapFonts(): gdSetString;
  getAll(resourceType: string): gdSetString;
  delete(): void;
  ptr: number;
};// Automatically generated by GDevelop.js/scripts/generate-types.js
declare class gdResourcesManager {
  constructor(): void;
  getAllResourceNames(): gdVectorString;
  findFilesNotInResources(filesToCheck: gdVectorString): gdVectorString;
  hasResource(name: string): boolean;
  getResource(name: string): gdResource;
  getResourceNameWithOrigin(originName: string, originIdentifier: string): string;
  getResourceNameWithFile(file: string): string;
  addResource(res: gdResource): boolean;
  removeResource(name: string): void;
  renameResource(oldName: string, name: string): void;
  getResourcePosition(name: string): number;
  moveResourceUpInList(oldName: string): boolean;
  moveResourceDownInList(oldName: string): boolean;
  moveResource(oldIndex: number, newIndex: number): void;
  delete(): void;
  ptr: number;
};// Automatically generated by GDevelop.js/scripts/generate-types.js
declare class gdResourcesMergingHelper extends gdArbitraryResourceWorker {
  constructor(fs: gdAbstractFileSystem): void;
  setBaseDirectory(basePath: string): void;
  getAllResourcesOldAndNewFilename(): gdMapStringString;
  delete(): void;
  ptr: number;
};// Automatically generated by GDevelop.js/scripts/generate-types.js
declare class gdResourcesRenamer extends gdArbitraryResourceWorker {
  constructor(oldToNewNames: gdMapStringString): void;
  delete(): void;
  ptr: number;
};// Automatically generated by GDevelop.js/scripts/generate-types.js
declare class gdSerializer {
  static fromJSObject(object: Object): gdSerializerElement;
  static toJSObject(element: gdSerializerElement): any;

  static toJSON(element: gdSerializerElement): string;
  static fromJSON(json: string): gdSerializerElement;
  delete(): void;
  ptr: number;
};// Automatically generated by GDevelop.js/scripts/generate-types.js
declare class gdSerializerElement {
  constructor(): void;
  setBoolValue(value: boolean): void;
  setStringValue(value: string): void;
  setIntValue(value: number): void;
  setDoubleValue(value: number): void;
  getValue(): gdSerializerValue;
  getBoolValue(): boolean;
  getStringValue(): string;
  getIntValue(): number;
  getDoubleValue(): number;
  isValueUndefined(): boolean;
  setBoolAttribute(name: string, value: boolean): gdSerializerElement;
  setStringAttribute(name: string, value: string): gdSerializerElement;
  setIntAttribute(name: string, value: number): gdSerializerElement;
  setDoubleAttribute(name: string, value: number): gdSerializerElement;
  getBoolAttribute(name: string): boolean;
  getStringAttribute(name: string): string;
  getIntAttribute(name: string): number;
  getDoubleAttribute(name: string): number;
  considerAsArray(): void;
  consideredAsArray(): boolean;
  addChild(str: string): gdSerializerElement;
  getChild(str: string): gdSerializerElement;
  setChild(str: string, element: gdSerializerElement): void;
  hasChild(str: string): boolean;
  getAllChildren(): gdVectorPairStringSharedPtrSerializerElement;
  getAllAttributes(): gdMapStringSerializerValue;
  delete(): void;
  ptr: number;
};// Automatically generated by GDevelop.js/scripts/generate-types.js
declare class gdSerializerValue {
  getBool(): boolean;
  getString(): string;
  getInt(): number;
  getDouble(): number;
  getRawString(): string;
  isBoolean(): boolean;
  isString(): boolean;
  isInt(): boolean;
  isDouble(): boolean;
  delete(): void;
  ptr: number;
};// Automatically generated by GDevelop.js/scripts/generate-types.js
declare class gdSetString {
  constructor(): void;
  toNewVectorString(): gdVectorString;
  delete(): void;
  ptr: number;
};// Automatically generated by GDevelop.js/scripts/generate-types.js
declare class gdShapePainterObject extends gdObjectConfiguration {
  constructor(): void;
  setCoordinatesAbsolute(): void;
  setCoordinatesRelative(): void;
  areCoordinatesAbsolute(): boolean;
  setClearBetweenFrames(value: boolean): void;
  isClearedBetweenFrames(): boolean;
  setOutlineSize(size: number): void;
  getOutlineSize(): number;
  setOutlineOpacity(val: number): void;
  getOutlineOpacity(): number;
  setOutlineColor(r: number, g: number, b: number): void;
  getOutlineColorR(): number;
  getOutlineColorG(): number;
  getOutlineColorB(): number;
  setFillOpacity(val: number): void;
  getFillOpacity(): number;
  setFillColor(r: number, g: number, b: number): void;
  getFillColorR(): number;
  getFillColorG(): number;
  getFillColorB(): number;
  delete(): void;
  ptr: number;
};// Automatically generated by GDevelop.js/scripts/generate-types.js
declare class gdSharedPtrSerializerElement {
  get(): gdSerializerElement;
  reset(): void;
  delete(): void;
  ptr: number;
};// Automatically generated by GDevelop.js/scripts/generate-types.js
declare class gdSprite {
  constructor(): void;
  setImageName(name: string): void;
  getImageName(): string;
  getOrigin(): gdPoint;
  getCenter(): gdPoint;
  isDefaultCenterPoint(): boolean;
  setDefaultCenterPoint(defaultPoint: boolean): void;
  getAllNonDefaultPoints(): gdVectorPoint;
  addPoint(point: gdPoint): void;
  delPoint(name: string): void;
  getPoint(name: string): gdPoint;
  hasPoint(name: string): boolean;
  isCollisionMaskAutomatic(): boolean;
  setCollisionMaskAutomatic(enabled: boolean): void;
  getCustomCollisionMask(): gdVectorPolygon2d;
  setCustomCollisionMask(collisionMask: gdVectorPolygon2d): void;
  delete(): void;
  ptr: number;
};// Automatically generated by GDevelop.js/scripts/generate-types.js
declare class gdSpriteObject extends gdObjectConfiguration {
  constructor(): void;
  addAnimation(animation: gdAnimation): void;
  getAnimation(index: number): gdAnimation;
  getAnimationsCount(): number;
  removeAnimation(index: number): void;
  removeAllAnimations(): void;
  hasNoAnimations(): boolean;
  swapAnimations(first: number, second: number): void;
  moveAnimation(oldIndex: number, newIndex: number): void;
  setUpdateIfNotVisible(updateIfNotVisible: boolean): void;
  getUpdateIfNotVisible(): boolean;
  delete(): void;
  ptr: number;
};// Automatically generated by GDevelop.js/scripts/generate-types.js
declare class gdStandardEvent extends gdBaseEvent {
  constructor(): void;
  getConditions(): gdInstructionsList;
  getActions(): gdInstructionsList;
  clone(): gdStandardEvent;
  getType(): string;
  setType(type: string): void;
  isExecutable(): boolean;
  canHaveSubEvents(): boolean;
  hasSubEvents(): boolean;
  getSubEvents(): gdEventsList;
  isDisabled(): boolean;
  setDisabled(disable: boolean): void;
  isFolded(): boolean;
  setFolded(folded: boolean): void;
  serializeTo(element: gdSerializerElement): void;
  unserializeFrom(project: gdProject, element: gdSerializerElement): void;
  delete(): void;
  ptr: number;
};// Automatically generated by GDevelop.js/scripts/generate-types.js
declare class gdTextEntryObject extends gdObjectConfiguration {
  constructor(): void;
  delete(): void;
  ptr: number;
};// Automatically generated by GDevelop.js/scripts/generate-types.js
declare class gdTextFormatting {
  getUserData(): number;
  delete(): void;
  ptr: number;
};// Automatically generated by GDevelop.js/scripts/generate-types.js
declare class gdTextObject extends gdObjectConfiguration {
  constructor(): void;
  setString(string: string): void;
  getString(): string;
  setCharacterSize(size: number): void;
  getCharacterSize(): number;
  setFontName(string: string): void;
  getFontName(): string;
  isBold(): boolean;
  setBold(enable: boolean): void;
  isItalic(): boolean;
  setItalic(enable: boolean): void;
  isUnderlined(): boolean;
  setUnderlined(enable: boolean): void;
  setColor(r: number, g: number, b: number): void;
  getColorR(): number;
  getColorG(): number;
  getColorB(): number;
  delete(): void;
  ptr: number;
};// Automatically generated by GDevelop.js/scripts/generate-types.js
declare class gdTiledSpriteObject extends gdObjectConfiguration {
  constructor(): void;
  setTexture(texture: string): void;
  getTexture(): string;
  setWidth(width: number): void;
  getWidth(): number;
  setHeight(height: number): void;
  getHeight(): number;
  delete(): void;
  ptr: number;
};// Automatically generated by GDevelop.js/scripts/generate-types.js
declare class gdUnfilledRequiredBehaviorPropertyProblem {
  getSourceProject(): gdProject;
  getSourceObject(): gdObject;
  getSourceBehaviorContent(): gdBehavior;
  getSourcePropertyName(): string;
  getExpectedBehaviorTypeName(): string;
  delete(): void;
  ptr: number;
};// Automatically generated by GDevelop.js/scripts/generate-types.js
declare class gdUniquePtrExpressionNode {
  get(): gdExpressionNode;
  delete(): void;
  ptr: number;
};// Automatically generated by GDevelop.js/scripts/generate-types.js
declare class gdUniquePtrObject {
  get(): gdObject;
  release(): gdObject;
  delete(): void;
  ptr: number;
};// Automatically generated by GDevelop.js/scripts/generate-types.js
declare class gdUniquePtrObjectConfiguration {
  get(): gdObjectConfiguration;
  release(): gdObjectConfiguration;
  delete(): void;
  ptr: number;
};// Automatically generated by GDevelop.js/scripts/generate-types.js
declare class gdUsedExtensionsFinder {
  static scanProject(project: gdProject): gdSetString;
  delete(): void;
  ptr: number;
};// Automatically generated by GDevelop.js/scripts/generate-types.js
declare class gdVariable {
  static String: 0;
  static Number: 1;
  static Boolean: 2;
  static Structure: 3;
  static Array: 4;
  constructor(): void;
  static isPrimitive(type: Variable_Type): boolean;
  getType(): Variable_Type;
  castTo(type: string): void;
  setString(str: string): void;
  getString(): string;
  setValue(val: number): void;
  getValue(): number;
  setBool(val: boolean): void;
  getBool(): boolean;
  setFolded(val: boolean): void;
  isFolded(): boolean;
  getChildrenCount(): number;
  contains(variableToSearch: gdVariable, recursive: boolean): boolean;
  hasChild(str: string): boolean;
  getChild(str: string): gdVariable;
  removeChild(name: string): void;
  renameChild(oldName: string, newName: string): boolean;
  getAllChildrenNames(): gdVectorString;
  removeRecursively(variableToRemove: gdVariable): void;
  getAtIndex(index: number): gdVariable;
  pushNew(): gdVariable;
  removeAtIndex(index: number): void;
  getAllChildrenArray(): gdVectorVariable;
  moveChildInArray(oldIndex: number, newIndex: number): void;
  insertAtIndex(variable: gdVariable, index: number): boolean;
  insertChild(name: string, variable: gdVariable): boolean;
  serializeTo(element: gdSerializerElement): void;
  unserializeFrom(element: gdSerializerElement): void;
  delete(): void;
  ptr: number;
};// Automatically generated by GDevelop.js/scripts/generate-types.js
declare class gdVariablesContainer {
  constructor(): void;
  has(name: string): boolean;
  get(name: string): gdVariable;
  getAt(index: number): gdVariable;
  getNameAt(index: number): string;
  insert(name: string, variable: gdVariable, index: number): gdVariable;
  insertNew(name: string, index: number): gdVariable;
  remove(name: string): void;
  rename(oldName: string, newName: string): boolean;
  swap(firstIndex: number, secondIndex: number): void;
  move(oldIndex: number, newIndex: number): void;
  getPosition(name: string): number;
  count(): number;
  clear(): void;
  removeRecursively(variableToRemove: gdVariable): void;
  serializeTo(element: gdSerializerElement): void;
  unserializeFrom(element: gdSerializerElement): void;
  delete(): void;
  ptr: number;
};// Automatically generated by GDevelop.js/scripts/generate-types.js
declare class gdVector2f {
  constructor(): void;
  x: number;
  set_x(number): void;
  get_x(): number;
  y: number;
  set_y(number): void;
  get_y(): number;
  delete(): void;
  ptr: number;
};// Automatically generated by GDevelop.js/scripts/generate-types.js
declare class gdVectorDependencyMetadata {
  size(): number;
  at(index: number): gdDependencyMetadata;
  delete(): void;
  ptr: number;
};// Automatically generated by GDevelop.js/scripts/generate-types.js
declare class gdVectorEventsSearchResult {
  constructor(): void;
  clone(): gdVectorEventsSearchResult;
  push_back(result: gdEventsSearchResult): void;
  resize(size: number): void;
  size(): number;
  at(index: number): gdEventsSearchResult;
  set(index: number, result: gdEventsSearchResult): void;
  clear(): void;
  delete(): void;
  ptr: number;
};// Automatically generated by GDevelop.js/scripts/generate-types.js
declare class gdVectorExpressionCompletionDescription {
  size(): number;
  at(index: number): gdExpressionCompletionDescription;
  delete(): void;
  ptr: number;
};// Automatically generated by GDevelop.js/scripts/generate-types.js
declare class gdVectorExpressionParserDiagnostic {
  size(): number;
  at(index: number): gdExpressionParserDiagnostic;
  delete(): void;
  ptr: number;
};// Automatically generated by GDevelop.js/scripts/generate-types.js
declare class gdVectorInt {
  toJSArray(): Array<number>;
  size(): number;
  at(index: number): number;
  delete(): void;
  ptr: number;
};// Automatically generated by GDevelop.js/scripts/generate-types.js
declare class gdVectorPairStringSharedPtrSerializerElement {
  size(): number;
  getString(id: number): string;
  getSharedPtrSerializerElement(id: number): gdSharedPtrSerializerElement;
  delete(): void;
  ptr: number;
};// Automatically generated by GDevelop.js/scripts/generate-types.js
declare class gdVectorPairStringTextFormatting {
  size(): number;
  getString(id: number): string;
  getTextFormatting(id: number): gdTextFormatting;
  delete(): void;
  ptr: number;
};// Automatically generated by GDevelop.js/scripts/generate-types.js
declare class gdVectorParameterMetadata {
  constructor(): void;
  push_back(parameterMetadata: gdParameterMetadata): void;
  size(): number;
  at(index: number): gdParameterMetadata;
  set(index: number, parameterMetadata: gdParameterMetadata): void;
  removeFromVectorParameterMetadata(index: number): void;
  swapInVectorParameterMetadata(oldIndex: number, newIndex: number): void;
  clear(): void;
  delete(): void;
  ptr: number;
};// Automatically generated by GDevelop.js/scripts/generate-types.js
declare class gdVectorPlatformExtension {
  size(): number;
  at(index: number): gdPlatformExtension;
  delete(): void;
  ptr: number;
};// Automatically generated by GDevelop.js/scripts/generate-types.js
declare class gdVectorPoint {
  constructor(): void;
  push_back(pt: gdPoint): void;
  size(): number;
  at(index: number): gdPoint;
  set(index: number, pt: gdPoint): void;
  clear(): void;
  delete(): void;
  ptr: number;
};// Automatically generated by GDevelop.js/scripts/generate-types.js
declare class gdVectorPolygon2d {
  constructor(): void;
  push_back(polygon: gdPolygon2d): void;
  size(): number;
  at(index: number): gdPolygon2d;
  set(index: number, polygon: gdPolygon2d): void;
  removeFromVectorPolygon2d(index: number): void;
  clear(): void;
  delete(): void;
  ptr: number;
};// Automatically generated by GDevelop.js/scripts/generate-types.js
declare class gdVectorString {
  toJSArray(): Array<string>;
  constructor(): void;
  push_back(str: string): void;
  resize(size: number): void;
  size(): number;
  at(index: number): string;
  set(index: number, str: string): void;
  clear(): void;
  delete(): void;
  ptr: number;
};// Automatically generated by GDevelop.js/scripts/generate-types.js
declare class gdVectorUnfilledRequiredBehaviorPropertyProblem {
  size(): number;
  at(index: number): gdUnfilledRequiredBehaviorPropertyProblem;
  delete(): void;
  ptr: number;
};// Automatically generated by GDevelop.js/scripts/generate-types.js
declare class gdVectorVariable {
  size(): number;
  at(index: number): gdVariable;
  delete(): void;
  ptr: number;
};// Automatically generated by GDevelop.js/scripts/generate-types.js
declare class gdVectorVector2f {
  constructor(): void;
  push_back(pt: gdVector2f): void;
  size(): number;
  at(index: number): gdVector2f;
  set(index: number, pt: gdVector2f): void;
  removeFromVectorVector2f(index: number): void;
  moveVector2fInVector(oldIndex: number, newIndex: number): void;
  clear(): void;
  delete(): void;
  ptr: number;
};// Automatically generated by GDevelop.js/scripts/generate-types.js
declare class gdVersionWrapper {
  static major(): number;
  static minor(): number;
  static build(): number;
  static revision(): number;
  static fullString(): string;
  static status(): string;
  static year(): string;
  static month(): string;
  static date(): string;
  delete(): void;
  ptr: number;
};// Automatically generated by GDevelop.js/scripts/generate-types.js
declare class gdVideoResource extends gdResource {
  constructor(): void;
  delete(): void;
  ptr: number;
};// Automatically generated by GDevelop.js/scripts/generate-types.js
declare class gdWhileEvent extends gdBaseEvent {
  constructor(): void;
  getConditions(): gdInstructionsList;
  getWhileConditions(): gdInstructionsList;
  getActions(): gdInstructionsList;
  clone(): gdWhileEvent;
  getType(): string;
  setType(type: string): void;
  isExecutable(): boolean;
  canHaveSubEvents(): boolean;
  hasSubEvents(): boolean;
  getSubEvents(): gdEventsList;
  isDisabled(): boolean;
  setDisabled(disable: boolean): void;
  isFolded(): boolean;
  setFolded(folded: boolean): void;
  serializeTo(element: gdSerializerElement): void;
  unserializeFrom(project: gdProject, element: gdSerializerElement): void;
  delete(): void;
  ptr: number;
};// Automatically generated by GDevelop.js/scripts/generate-types.js
declare class gdWholeProjectRefactorer {
  static exposeProjectEvents(project: gdProject, worker: gdArbitraryEventsWorker): void;
  static renameEventsFunctionsExtension(project: gdProject, eventsFunctionsExtension: gdEventsFunctionsExtension, oldName: string, newName: string): void;
  static renameEventsFunction(project: gdProject, eventsFunctionsExtension: gdEventsFunctionsExtension, oldName: string, newName: string): void;
  static renameBehaviorEventsFunction(project: gdProject, eventsFunctionsExtension: gdEventsFunctionsExtension, eventsBasedBehavior: gdEventsBasedBehavior, oldName: string, newName: string): void;
  static renameObjectEventsFunction(project: gdProject, eventsFunctionsExtension: gdEventsFunctionsExtension, eventsBasedObject: gdEventsBasedObject, oldName: string, newName: string): void;
  static moveEventsFunctionParameter(project: gdProject, eventsFunctionsExtension: gdEventsFunctionsExtension, functionName: string, oldIndex: number, newIndex: number): void;
  static moveBehaviorEventsFunctionParameter(project: gdProject, eventsFunctionsExtension: gdEventsFunctionsExtension, eventsBasedBehavior: gdEventsBasedBehavior, functionName: string, oldIndex: number, newIndex: number): void;
  static moveObjectEventsFunctionParameter(project: gdProject, eventsFunctionsExtension: gdEventsFunctionsExtension, eventsBasedObject: gdEventsBasedObject, functionName: string, oldIndex: number, newIndex: number): void;
  static renameEventsBasedBehaviorProperty(project: gdProject, eventsFunctionsExtension: gdEventsFunctionsExtension, eventsBasedBehavior: gdEventsBasedBehavior, oldName: string, newName: string): void;
  static renameEventsBasedObjectProperty(project: gdProject, eventsFunctionsExtension: gdEventsFunctionsExtension, eventsBasedObject: gdEventsBasedObject, oldName: string, newName: string): void;
  static renameEventsBasedBehavior(project: gdProject, eventsFunctionsExtension: gdEventsFunctionsExtension, oldName: string, newName: string): void;
  static renameEventsBasedObject(project: gdProject, eventsFunctionsExtension: gdEventsFunctionsExtension, oldName: string, newName: string): void;
  static objectOrGroupRenamedInLayout(project: gdProject, layout: gdLayout, oldName: string, newName: string, isObjectGroup: boolean): void;
  static objectOrGroupRemovedInLayout(project: gdProject, layout: gdLayout, objectName: string, isObjectGroup: boolean, removeEventsAndGroups: boolean): void;
  static objectOrGroupRenamedInEventsFunction(project: gdProject, eventsFunction: gdEventsFunction, globalObjectsContainer: gdObjectsContainer, objectsContainer: gdObjectsContainer, oldName: string, newName: string, isObjectGroup: boolean): void;
  static objectOrGroupRemovedInEventsFunction(project: gdProject, eventsFunction: gdEventsFunction, globalObjectsContainer: gdObjectsContainer, objectsContainer: gdObjectsContainer, objectName: string, isObjectGroup: boolean, removeEventsAndGroups: boolean): void;
  static objectOrGroupRenamedInEventsBasedObject(project: gdProject, eventsBasedObject: gdEventsBasedObject, globalObjectsContainer: gdObjectsContainer, objectsContainer: gdObjectsContainer, oldName: string, newName: string, isObjectGroup: boolean): void;
  static objectOrGroupRemovedInEventsBasedObject(project: gdProject, eventsBasedObject: gdEventsBasedObject, globalObjectsContainer: gdObjectsContainer, objectsContainer: gdObjectsContainer, objectName: string, isObjectGroup: boolean, removeEventsAndGroups: boolean): void;
  static globalObjectOrGroupRenamed(project: gdProject, oldName: string, newName: string, isObjectGroup: boolean): void;
  static globalObjectOrGroupRemoved(project: gdProject, objectName: string, isObjectGroup: boolean, removeEventsAndGroups: boolean): void;
  static getAllObjectTypesUsingEventsBasedBehavior(project: gdProject, eventsFunctionsExtension: gdEventsFunctionsExtension, eventsBasedBehavior: gdEventsBasedBehavior): gdSetString;
  static ensureBehaviorEventsFunctionsProperParameters(eventsFunctionsExtension: gdEventsFunctionsExtension, eventsBasedBehavior: gdEventsBasedBehavior): void;
  static ensureObjectEventsFunctionsProperParameters(eventsFunctionsExtension: gdEventsFunctionsExtension, eventsBasedObject: gdEventsBasedObject): void;
  static addBehaviorAndRequiredBehaviors(project: gdProject, obj: gdObject, behaviorType: string, behaviorName: string): void;
  static findDependentBehaviorNames(project: gdProject, obj: gdObject, behaviorName: string): gdVectorString;
  static findInvalidRequiredBehaviorProperties(project: gdProject): gdVectorUnfilledRequiredBehaviorPropertyProblem;
  static getBehaviorsWithType(obj: gdObject, type: string): gdVectorString;
  static fixInvalidRequiredBehaviorProperties(project: gdProject): boolean;
  delete(): void;
  ptr: number;
};// Automatically generated by GDevelop.js/scripts/generate-types.js
declare class libGDevelop {
  getPointer(gdEmscriptenObject): number;
  castObject<T>(gdEmscriptenObject, Class<T>): T;
  compare(gdEmscriptenObject, gdEmscriptenObject): boolean;

  getTypeOfObject(globalObjectsContainer: gdObjectsContainer, objectsContainer: gdObjectsContainer, objectName: string, searchInGroups: boolean): string;
  getTypeOfBehavior(globalObjectsContainer: gdObjectsContainer, objectsContainer: gdObjectsContainer, objectName: string, searchInGroups: boolean): string;
  getBehaviorsOfObject(globalObjectsContainer: gdObjectsContainer, objectsContainer: gdObjectsContainer, objectName: string, searchInGroups: boolean): gdVectorString;

  removeFromVectorParameterMetadata(gdVectorParameterMetadata, index: number): void;
  swapInVectorParameterMetadata(gdVectorParameterMetadata, oldIndex: number, newIndex: number): void;

  asStandardEvent(gdBaseEvent): gdStandardEvent;
  asRepeatEvent(gdBaseEvent): gdRepeatEvent;
  asWhileEvent(gdBaseEvent): gdWhileEvent;
  asForEachEvent(gdBaseEvent): gdForEachEvent;
  asForEachChildVariableEvent(gdBaseEvent): gdForEachChildVariableEvent;
  asCommentEvent(gdBaseEvent): gdCommentEvent;
  asGroupEvent(gdBaseEvent): gdGroupEvent;
  asLinkEvent(gdBaseEvent): gdLinkEvent;
  asJsCodeEvent(gdBaseEvent): gdJsCodeEvent;
  asPlatform(gdPlatform): gdPlatform;

  asSpriteConfiguration(gdObjectConfiguration): gdSpriteObject;
  asTiledSpriteConfiguration(gdObjectConfiguration): gdTiledSpriteObject;
  asPanelSpriteConfiguration(gdObjectConfiguration): gdPanelSpriteObject;
  asTextObjectConfiguration(gdObjectConfiguration): gdTextObject;
  asShapePainterConfiguration(gdObjectConfiguration): gdShapePainterObject;
  asAdMobConfiguration(gdObjectConfiguration): gdAdMobObject;
  asTextEntryConfiguration(gdObjectConfiguration): gdTextEntryObject;
  asParticleEmitterConfiguration(gdObjectConfiguration): gdParticleEmitterObject;
  asObjectJsImplementation(gdObjectConfiguration): gdObjectJsImplementation;
  asCustomObjectConfiguration(gdObjectConfiguration): gdCustomObjectConfiguration;

  asImageResource(gdResource): gdImageResource;

  VectorString: Class<gdVectorString>;
  VectorPlatformExtension: Class<gdVectorPlatformExtension>;
  VectorDependencyMetadata: Class<gdVectorDependencyMetadata>;
  VectorInt: Class<gdVectorInt>;
  VectorVariable: Class<gdVectorVariable>;
  MapStringString: Class<gdMapStringString>;
  MapStringBoolean: Class<gdMapStringBoolean>;
  MapStringDouble: Class<gdMapStringDouble>;
  MapStringVariable: Class<gdMapStringVariable>;
  MapStringExpressionMetadata: Class<gdMapStringExpressionMetadata>;
  MapStringInstructionMetadata: Class<gdMapStringInstructionMetadata>;
  MapStringEventMetadata: Class<gdMapStringEventMetadata>;
  MapExtensionProperties: Class<gdMapExtensionProperties>;
  SetString: Class<gdSetString>;
  ProjectHelper: Class<gdProjectHelper>;
  EventsVariablesFinder: Class<gdEventsVariablesFinder>;
  InstructionOrExpressionGroupMetadata: Class<gdInstructionOrExpressionGroupMetadata>;
  VersionWrapper: Class<gdVersionWrapper>;
  Platform: Class<gdPlatform>;
  JsPlatform: Class<gdJsPlatform>;
  PairStringVariable: Class<gdPairStringVariable>;
  Variable_Type: Class<Variable_Type>;
  Variable: Class<gdVariable>;
  VariablesContainer: Class<gdVariablesContainer>;
  ObjectGroup: Class<gdObjectGroup>;
  ObjectGroupsContainer: Class<gdObjectGroupsContainer>;
  PlatformSpecificAssets: Class<gdPlatformSpecificAssets>;
  LoadingScreen: Class<gdLoadingScreen>;
  ObjectsContainer: Class<gdObjectsContainer>;
  Project: Class<gdProject>;
  ExtensionProperties: Class<gdExtensionProperties>;
  Behavior: Class<gdBehavior>;
  BehaviorJsImplementation: Class<gdBehaviorJsImplementation>;
  BehaviorsSharedData: Class<gdBehaviorsSharedData>;
  BehaviorSharedDataJsImplementation: Class<gdBehaviorSharedDataJsImplementation>;
  ObjectConfiguration: Class<gdObjectConfiguration>;
  UniquePtrObjectConfiguration: Class<gdUniquePtrObjectConfiguration>;
  gdObject: Class<gdObject>;
  UniquePtrObject: Class<gdUniquePtrObject>;
  ObjectJsImplementation: Class<gdObjectJsImplementation>;
  CustomObjectConfiguration: Class<gdCustomObjectConfiguration>;
  Layout: Class<gdLayout>;
  ExternalEvents: Class<gdExternalEvents>;
  ExternalLayout: Class<gdExternalLayout>;
  Effect: Class<gdEffect>;
  EffectsContainer: Class<gdEffectsContainer>;
  Layer: Class<gdLayer>;
  PropertyDescriptor: Class<gdPropertyDescriptor>;
  NamedPropertyDescriptor: Class<gdNamedPropertyDescriptor>;
  MapStringPropertyDescriptor: Class<gdMapStringPropertyDescriptor>;
  MapStringSerializerValue: Class<gdMapStringSerializerValue>;
  VectorPairStringSharedPtrSerializerElement: Class<gdVectorPairStringSharedPtrSerializerElement>;
  Resource: Class<gdResource>;
  ResourcesManager: Class<gdResourcesManager>;
  ImageResource: Class<gdImageResource>;
  AudioResource: Class<gdAudioResource>;
  FontResource: Class<gdFontResource>;
  BitmapFontResource: Class<gdBitmapFontResource>;
  VideoResource: Class<gdVideoResource>;
  JsonResource: Class<gdJsonResource>;
  InitialInstance: Class<gdInitialInstance>;
  InitialInstancesContainer: Class<gdInitialInstancesContainer>;
  HighestZOrderFinder: Class<gdHighestZOrderFinder>;
  InitialInstanceFunctor: Class<gdInitialInstanceFunctor>;
  InitialInstanceJSFunctorWrapper: Class<gdInitialInstanceJSFunctorWrapper>;
  InitialInstanceJSFunctor: Class<gdInitialInstanceJSFunctor>;
  SerializerValue: Class<gdSerializerValue>;
  SerializerElement: Class<gdSerializerElement>;
  SharedPtrSerializerElement: Class<gdSharedPtrSerializerElement>;
  Serializer: Class<gdSerializer>;
  InstructionsList: Class<gdInstructionsList>;
  Instruction: Class<gdInstruction>;
  Expression: Class<gdExpression>;
  VectorPairStringTextFormatting: Class<gdVectorPairStringTextFormatting>;
  TextFormatting: Class<gdTextFormatting>;
  InstructionSentenceFormatter: Class<gdInstructionSentenceFormatter>;
  ExtraInformation: Class<gdExtraInformation>;
  ExpressionCodeGenerationInformation: Class<gdExpressionCodeGenerationInformation>;
  InstructionMetadata: Class<gdInstructionMetadata>;
  ExpressionMetadata: Class<gdExpressionMetadata>;
  MultipleInstructionMetadata: Class<gdMultipleInstructionMetadata>;
  DependencyMetadata: Class<gdDependencyMetadata>;
  ParameterMetadata: Class<gdParameterMetadata>;
  VectorParameterMetadata: Class<gdVectorParameterMetadata>;
  ParameterMetadataTools: Class<gdParameterMetadataTools>;
  EventsFunctionTools: Class<gdEventsFunctionTools>;
  ObjectMetadata: Class<gdObjectMetadata>;
  BehaviorMetadata: Class<gdBehaviorMetadata>;
  EffectMetadata: Class<gdEffectMetadata>;
  EventMetadata: Class<gdEventMetadata>;
  PlatformExtension: Class<gdPlatformExtension>;
  EventsList: Class<gdEventsList>;
  BaseEvent: Class<gdBaseEvent>;
  StandardEvent: Class<gdStandardEvent>;
  RepeatEvent: Class<gdRepeatEvent>;
  WhileEvent: Class<gdWhileEvent>;
  ForEachEvent: Class<gdForEachEvent>;
  ForEachChildVariableEvent: Class<gdForEachChildVariableEvent>;
  CommentEvent: Class<gdCommentEvent>;
  GroupEvent: Class<gdGroupEvent>;
  LinkEvent: Class<gdLinkEvent>;
  EventsRemover: Class<gdEventsRemover>;
  EventsListUnfolder: Class<gdEventsListUnfolder>;
  EventsSearchResult: Class<gdEventsSearchResult>;
  VectorEventsSearchResult: Class<gdVectorEventsSearchResult>;
  EventsRefactorer: Class<gdEventsRefactorer>;
  UnfilledRequiredBehaviorPropertyProblem: Class<gdUnfilledRequiredBehaviorPropertyProblem>;
  VectorUnfilledRequiredBehaviorPropertyProblem: Class<gdVectorUnfilledRequiredBehaviorPropertyProblem>;
  WholeProjectRefactorer: Class<gdWholeProjectRefactorer>;
  UsedExtensionsFinder: Class<gdUsedExtensionsFinder>;
  ExtensionAndBehaviorMetadata: Class<gdExtensionAndBehaviorMetadata>;
  ExtensionAndObjectMetadata: Class<gdExtensionAndObjectMetadata>;
  ExtensionAndEffectMetadata: Class<gdExtensionAndEffectMetadata>;
  ExtensionAndInstructionMetadata: Class<gdExtensionAndInstructionMetadata>;
  ExtensionAndExpressionMetadata: Class<gdExtensionAndExpressionMetadata>;
  MetadataProvider: Class<gdMetadataProvider>;
  ExpressionParserDiagnostic: Class<gdExpressionParserDiagnostic>;
  VectorExpressionParserDiagnostic: Class<gdVectorExpressionParserDiagnostic>;
  ExpressionParser2NodeWorker: Class<gdExpressionParser2NodeWorker>;
  ExpressionValidator: Class<gdExpressionValidator>;
  ExpressionCompletionDescription_CompletionKind: Class<ExpressionCompletionDescription_CompletionKind>;
  ExpressionCompletionDescription: Class<gdExpressionCompletionDescription>;
  VectorExpressionCompletionDescription: Class<gdVectorExpressionCompletionDescription>;
  ExpressionCompletionFinder: Class<gdExpressionCompletionFinder>;
  ExpressionNodeLocationFinder: Class<gdExpressionNodeLocationFinder>;
  ExpressionTypeFinder: Class<gdExpressionTypeFinder>;
  ExpressionNode: Class<gdExpressionNode>;
  UniquePtrExpressionNode: Class<gdUniquePtrExpressionNode>;
  ExpressionParser2: Class<gdExpressionParser2>;
  EventsFunction_FunctionType: Class<EventsFunction_FunctionType>;
  EventsFunction: Class<gdEventsFunction>;
  EventsFunctionsContainer: Class<gdEventsFunctionsContainer>;
  EventsBasedBehavior: Class<gdEventsBasedBehavior>;
  EventsBasedBehaviorsList: Class<gdEventsBasedBehaviorsList>;
  EventsBasedObject: Class<gdEventsBasedObject>;
  EventsBasedObjectsList: Class<gdEventsBasedObjectsList>;
  NamedPropertyDescriptorsList: Class<gdNamedPropertyDescriptorsList>;
  EventsFunctionsExtension: Class<gdEventsFunctionsExtension>;
  AbstractFileSystem: Class<gdAbstractFileSystem>;
  AbstractFileSystemJS: Class<gdAbstractFileSystemJS>;
  ProjectResourcesAdder: Class<gdProjectResourcesAdder>;
  ArbitraryEventsWorker: Class<gdArbitraryEventsWorker>;
  EventsLeaderboardsLister: Class<gdEventsLeaderboardsLister>;
  EventsLeaderboardsRenamer: Class<gdEventsLeaderboardsRenamer>;
  EventsParametersLister: Class<gdEventsParametersLister>;
  EventsPositionFinder: Class<gdEventsPositionFinder>;
  EventsTypesLister: Class<gdEventsTypesLister>;
  InstructionsTypeRenamer: Class<gdInstructionsTypeRenamer>;
  EventsContext: Class<gdEventsContext>;
  EventsContextAnalyzer: Class<gdEventsContextAnalyzer>;
  ArbitraryResourceWorker: Class<gdArbitraryResourceWorker>;
  ArbitraryResourceWorkerJS: Class<gdArbitraryResourceWorkerJS>;
  ResourcesMergingHelper: Class<gdResourcesMergingHelper>;
  ResourcesRenamer: Class<gdResourcesRenamer>;
  ProjectResourcesCopier: Class<gdProjectResourcesCopier>;
  ResourcesInUseHelper: Class<gdResourcesInUseHelper>;
  EditorSettings: Class<gdEditorSettings>;
  Point: Class<gdPoint>;
  VectorPoint: Class<gdVectorPoint>;
  Polygon2d: Class<gdPolygon2d>;
  VectorPolygon2d: Class<gdVectorPolygon2d>;
  Sprite: Class<gdSprite>;
  Direction: Class<gdDirection>;
  Animation: Class<gdAnimation>;
  SpriteObject: Class<gdSpriteObject>;
  Vector2f: Class<gdVector2f>;
  VectorVector2f: Class<gdVectorVector2f>;
  TextObject: Class<gdTextObject>;
  TiledSpriteObject: Class<gdTiledSpriteObject>;
  PanelSpriteObject: Class<gdPanelSpriteObject>;
  ShapePainterObject: Class<gdShapePainterObject>;
  TextEntryObject: Class<gdTextEntryObject>;
  ParticleEmitterObject_RendererType: Class<ParticleEmitterObject_RendererType>;
  ParticleEmitterObject: Class<gdParticleEmitterObject>;
  LayoutCodeGenerator: Class<gdLayoutCodeGenerator>;
  BehaviorCodeGenerator: Class<gdBehaviorCodeGenerator>;
  EventsFunctionsExtensionCodeGenerator: Class<gdEventsFunctionsExtensionCodeGenerator>;
  PreviewExportOptions: Class<gdPreviewExportOptions>;
  Exporter: Class<gdExporter>;
  JsCodeEvent: Class<gdJsCodeEvent>;
};// Automatically generated by GDevelop.js/scripts/generate-types.js
declare type gdSerializable = any;
declare type gdEmscriptenObject = {
  ptr: number;
};
// Automatically generated by GDevelop.js/scripts/generate-types.js
type ParticleEmitterObject_RendererType = 0 | 1 | 2// Automatically generated by GDevelop.js/scripts/generate-types.js
type Variable_Type = 0 | 1 | 2 | 3 | 4