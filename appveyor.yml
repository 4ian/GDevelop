# AppVeyor configuration to build GDevelop app running
# on the Electron runtime (newIDE/electron-app) for Windows.
# For macOS and Linux, see the config.yml file.

version: 1.0.{build}
pull_requests:
  do_not_increment_build_number: true
image: Visual Studio 2019
clone_depth: 5
# Only build
branches:
  only:
    - master
    - /experimental-build.*/
skip_tags: true # Don't rebuild on tags.
init:
  - ps: Install-Product node 16
  - cmd: set NODE_OPTIONS=--max-old-space-size=8192
install:
  # Build GDevelop.js (and run tests to ensure it works).
  # (in a subshell to avoid Emscripten polluting the Node.js and npm version for the rest of the build)
  # - cmd: >-
  #     cd GDevelop.js

  #     npm -v && npm install

  #     git clone https://github.com/juj/emsdk.git

  #     cd emsdk

  #     emsdk install 3.1.21

  #     CMD /C "emsdk activate 3.1.21 && cd .. && npm run build"

  #     cd ..\..

  # Build GDevelop IDE.
  # Also install setuptools as something requires distutils in electron-app, and it was removed in Python 3.12.
  # setuptools will make distutils available again (but we should migrate our packages probably).
  - cmd: >-
      pip install setuptools

      cd newIDE\app

      npm -v && npm install

      cd ..\electron-app

      npm -v && npm install

      cd ..\..

# Package the app for Windows (and sign it with the certificate set in environment variables).
# Don't sign the appx (it will be signed by the Microsoft Store).
build_script:
  - ps: >-
      cd newIDE\electron-app

      Set-StrictMode -Version 'Latest'

      # Download the SSL.com eSigner helper.

      # TODO: host it on our own.

      Invoke-WebRequest -OutFile eSigner_CKA.exe "https://packages.element.io/tools/SSL.COM%20eSigner%20CKA_1.0.4-build-20230221_signed.exe"

      # Install it.

      New-Item -ItemType Directory -Force -Path "C:\projects\gdevelop\eSignerCKA"

      ./eSigner_CKA.exe /CURRENTUSER /VERYSILENT /SUPPRESSMSGBOXES /DIR="C:\projects\gdevelop\eSignerCKA" | Out-Null

      # Disable logger.

      $LogConfig = Get-Content -Path C:\projects\gdevelop\eSignerCKA/log4net.config

      $LogConfig[0] = '<log4net threshold="OFF">'

      $LogConfig | Set-Content -Path C:\projects\gdevelop\eSignerCKA/log4net.config

      # Configure it

      C:\projects\gdevelop\eSignerCKA/eSignerCKATool.exe config -mode product -user "$Env:ESIGNER_USER_NAME" -pass "$Env:ESIGNER_USER_PASSWORD" -totp "$Env:ESIGNER_USER_TOTP" -key "C:\projects\gdevelop\eSignerCKA\master.key" -r

      C:\projects\gdevelop\eSignerCKA/eSignerCKATool.exe unload

      C:\projects\gdevelop\eSignerCKA/eSignerCKATool.exe load

      # Find certificate

      $CodeSigningCert = Get-ChildItem Cert:\CurrentUser\My -CodeSigningCert | Select-Object -First 1

      echo Certificate: $CodeSigningCert

      # Extract thumbprint and subject name

      $Env:GD_SIGNTOOL_THUMBPRINT = $CodeSigningCert.Thumbprint

      $Env:GD_SIGNTOOL_SUBJECT_NAME  = ($CodeSigningCert.Subject -replace ", ?", "`n" | ConvertFrom-StringData).CN

      # Build the nsis installer (signed)

      node scripts/build.js --win nsis --publish=never

      # appx - don't sign it.

      $Env:GD_SIGNTOOL_THUMBPRINT = ''

      $Env:GD_SIGNTOOL_SUBJECT_NAME = ''

      node scripts/build.js --skip-app-build --win appx --publish=never

      cd ..\..

  # Clean dist folder to keep only installers/binaries.
  - cmd: >-
      DEL /F/Q/S newIDE\electron-app\dist\win-unpacked

# Run a few tests on Windows.
test_script:
  - cmd: >-
      cd GDevelop.js

      npm test

      cd ..

      cd newIDE\app

      npm test

      cd ..\..

artifacts:
  - path: newIDE\electron-app\dist
    name: GDevelopWindows

# Upload artifacts (AWS) - configuration is stored on AppVeyor itself.
deploy:
  - provider: Environment
    name: Amazon S3 releases
  - provider: Environment
    name: Amazon S3 latest releases
