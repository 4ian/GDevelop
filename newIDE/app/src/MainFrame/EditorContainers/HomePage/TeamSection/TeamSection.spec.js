// @flow
import { groupMembersByGroupId } from './Utils';

const getDefaultUser = ({
  id,
  deactivatedAt,
}: {
  id: string,
  deactivatedAt?: number,
}) => ({
  id,
  appLanguage: 'en',
  createdAt: 16798698390,
  updatedAt: 16798698391,
  deactivatedAt,
  description: null,
  username: null,
  donateLink: null,
  discordUsername: null,
  email: `${id}@email.net`,
  getGameStatsEmail: false,
  getNewsletterEmail: false,
  isCreator: true,
  isPlayer: false,
  isEmailAutogenerated: false,
});

const getDefaultMembership = ({
  userId,
  groups,
}: {
  userId: string,
  groups: ?(string[]),
}) => ({
  userId,
  teamId: 'team-id',
  groups,
  createdAt: 16798698390,
});

const getDefaultGroup = ({ id }: { id: string }) => ({
  id,
  name: 'Group',
});

describe('groupMembersByGroupId', () => {
  test("All members are returned in the NONE group if they don't have a group yet", () => {
    const user1 = getDefaultUser({ id: 'user-id-1' });
    const user2 = getDefaultUser({ id: 'user-id-2' });
    expect(
      groupMembersByGroupId({
        groups: [],
        members: [user1, user2],
        memberships: [
          getDefaultMembership({ userId: 'user-id-1', groups: null }),
          getDefaultMembership({ userId: 'user-id-2', groups: null }),
        ],
      })
    ).toEqual({
      active: {
        NONE: { group: { id: 'none', name: 'none' }, members: [user1, user2] },
      },
      inactive: [],
    });
  });

  test('All active members are returned in their groups and the ones without a group are put in the NONE group', () => {
    const user1 = getDefaultUser({ id: 'user-id-1' });
    const user2 = getDefaultUser({ id: 'user-id-2' });
    const user3 = getDefaultUser({ id: 'user-id-3' });
    const user4 = getDefaultUser({ id: 'user-id-4' });
    const user5 = getDefaultUser({ id: 'user-id-5' });
    const group1 = getDefaultGroup({ id: 'group-1' });
    const group2 = getDefaultGroup({ id: 'group-2' });
    expect(
      groupMembersByGroupId({
        groups: [group1, group2],
        members: [user1, user2, user3, user4, user5],
        memberships: [
          getDefaultMembership({ userId: 'user-id-1', groups: null }),
          getDefaultMembership({ userId: 'user-id-2', groups: [group2.id] }),
          getDefaultMembership({ userId: 'user-id-3', groups: [group1.id] }),
          getDefaultMembership({ userId: 'user-id-4', groups: null }),
          getDefaultMembership({ userId: 'user-id-5', groups: [group2.id] }),
        ],
      })
    ).toEqual({
      active: {
        NONE: { group: { id: 'none', name: 'none' }, members: [user1, user4] },
        [group1.id]: { group: group1, members: [user3] },
        [group2.id]: { group: group2, members: [user2, user5] },
      },
      inactive: [],
    });
  });

  test('All inactive members are returned in the right list', () => {
    const user1 = getDefaultUser({ id: 'user-id-1', deactivatedAt: 13566654 });
    const user2 = getDefaultUser({ id: 'user-id-2', deactivatedAt: 13566654 });
    const user3 = getDefaultUser({ id: 'user-id-3', deactivatedAt: 13566654 });
    const user4 = getDefaultUser({ id: 'user-id-4', deactivatedAt: 13566654 });
    const user5 = getDefaultUser({ id: 'user-id-5', deactivatedAt: 13566654 });
    const group1 = getDefaultGroup({ id: 'group-1' });
    const group2 = getDefaultGroup({ id: 'group-2' });
    expect(
      groupMembersByGroupId({
        groups: [group1, group2],
        members: [user1, user2, user3, user4, user5],
        memberships: [
          getDefaultMembership({ userId: 'user-id-1', groups: null }),
          getDefaultMembership({ userId: 'user-id-2', groups: null }),
          getDefaultMembership({ userId: 'user-id-3', groups: null }),
          getDefaultMembership({ userId: 'user-id-4', groups: null }),
          getDefaultMembership({ userId: 'user-id-5', groups: null }),
        ],
      })
    ).toEqual({
      active: {
        [group1.id]: { group: group1, members: [] },
        [group2.id]: { group: group2, members: [] },
      },
      inactive: [user1, user2, user3, user4, user5],
    });
  });

  test('All members are returned in their groups and the groups without members are present in the result', () => {
    const user1 = getDefaultUser({ id: 'user-id-1' });
    const user2 = getDefaultUser({ id: 'user-id-2' });
    const user3 = getDefaultUser({ id: 'user-id-3' });
    const user4 = getDefaultUser({ id: 'user-id-4', deactivatedAt: 145543 });
    const user5 = getDefaultUser({ id: 'user-id-5' });
    const group1 = getDefaultGroup({ id: 'group-1' });
    const group2 = getDefaultGroup({ id: 'group-2' });
    expect(
      groupMembersByGroupId({
        groups: [group1, group2],
        members: [user1, user2, user3, user4, user5],
        memberships: [
          getDefaultMembership({ userId: 'user-id-1', groups: [group1.id] }),
          getDefaultMembership({ userId: 'user-id-2', groups: [group1.id] }),
          getDefaultMembership({ userId: 'user-id-3', groups: [group1.id] }),
          getDefaultMembership({ userId: 'user-id-4', groups: null }),
          getDefaultMembership({ userId: 'user-id-5', groups: [group1.id] }),
        ],
      })
    ).toEqual({
      active: {
        [group1.id]: { group: group1, members: [user1, user2, user3, user5] },
        [group2.id]: { group: group2, members: [] },
      },
      inactive: [user4],
    });
  });
});
