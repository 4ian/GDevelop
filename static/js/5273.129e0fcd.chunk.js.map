{"version":3,"file":"static/js/5273.129e0fcd.chunk.js","mappings":"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","sources":["../node_modules/monaco-editor/esm/vs/basic-languages/css/css.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\nexport var conf = {\n    wordPattern: /(#?-?\\d*\\.\\d\\w*%?)|((::|[@#.!:])?[\\w-?]+%?)|::|[@#.!:]/g,\n    comments: {\n        blockComment: ['/*', '*/']\n    },\n    brackets: [\n        ['{', '}'],\n        ['[', ']'],\n        ['(', ')']\n    ],\n    autoClosingPairs: [\n        { open: '{', close: '}', notIn: ['string', 'comment'] },\n        { open: '[', close: ']', notIn: ['string', 'comment'] },\n        { open: '(', close: ')', notIn: ['string', 'comment'] },\n        { open: '\"', close: '\"', notIn: ['string', 'comment'] },\n        { open: '\\'', close: '\\'', notIn: ['string', 'comment'] }\n    ],\n    surroundingPairs: [\n        { open: '{', close: '}' },\n        { open: '[', close: ']' },\n        { open: '(', close: ')' },\n        { open: '\"', close: '\"' },\n        { open: '\\'', close: '\\'' }\n    ],\n    folding: {\n        markers: {\n            start: new RegExp(\"^\\\\s*\\\\/\\\\*\\\\s*#region\\\\b\\\\s*(.*?)\\\\s*\\\\*\\\\/\"),\n            end: new RegExp(\"^\\\\s*\\\\/\\\\*\\\\s*#endregion\\\\b.*\\\\*\\\\/\")\n        }\n    }\n};\nexport var language = {\n    defaultToken: '',\n    tokenPostfix: '.css',\n    ws: '[ \\t\\n\\r\\f]*',\n    identifier: '-?-?([a-zA-Z]|(\\\\\\\\(([0-9a-fA-F]{1,6}\\\\s?)|[^[0-9a-fA-F])))([\\\\w\\\\-]|(\\\\\\\\(([0-9a-fA-F]{1,6}\\\\s?)|[^[0-9a-fA-F])))*',\n    brackets: [\n        { open: '{', close: '}', token: 'delimiter.bracket' },\n        { open: '[', close: ']', token: 'delimiter.bracket' },\n        { open: '(', close: ')', token: 'delimiter.parenthesis' },\n        { open: '<', close: '>', token: 'delimiter.angle' }\n    ],\n    tokenizer: {\n        root: [\n            { include: '@selector' },\n        ],\n        selector: [\n            { include: '@comments' },\n            { include: '@import' },\n            { include: '@strings' },\n            ['[@](keyframes|-webkit-keyframes|-moz-keyframes|-o-keyframes)', { token: 'keyword', next: '@keyframedeclaration' }],\n            ['[@](page|content|font-face|-moz-document)', { token: 'keyword' }],\n            ['[@](charset|namespace)', { token: 'keyword', next: '@declarationbody' }],\n            ['(url-prefix)(\\\\()', ['attribute.value', { token: 'delimiter.parenthesis', next: '@urldeclaration' }]],\n            ['(url)(\\\\()', ['attribute.value', { token: 'delimiter.parenthesis', next: '@urldeclaration' }]],\n            { include: '@selectorname' },\n            ['[\\\\*]', 'tag'],\n            ['[>\\\\+,]', 'delimiter'],\n            ['\\\\[', { token: 'delimiter.bracket', next: '@selectorattribute' }],\n            ['{', { token: 'delimiter.bracket', next: '@selectorbody' }]\n        ],\n        selectorbody: [\n            { include: '@comments' },\n            ['[*_]?@identifier@ws:(?=(\\\\s|\\\\d|[^{;}]*[;}]))', 'attribute.name', '@rulevalue'],\n            ['}', { token: 'delimiter.bracket', next: '@pop' }]\n        ],\n        selectorname: [\n            ['(\\\\.|#(?=[^{])|%|(@identifier)|:)+', 'tag'],\n        ],\n        selectorattribute: [\n            { include: '@term' },\n            [']', { token: 'delimiter.bracket', next: '@pop' }],\n        ],\n        term: [\n            { include: '@comments' },\n            ['(url-prefix)(\\\\()', ['attribute.value', { token: 'delimiter.parenthesis', next: '@urldeclaration' }]],\n            ['(url)(\\\\()', ['attribute.value', { token: 'delimiter.parenthesis', next: '@urldeclaration' }]],\n            { include: '@functioninvocation' },\n            { include: '@numbers' },\n            { include: '@name' },\n            ['([<>=\\\\+\\\\-\\\\*\\\\/\\\\^\\\\|\\\\~,])', 'delimiter'],\n            [',', 'delimiter']\n        ],\n        rulevalue: [\n            { include: '@comments' },\n            { include: '@strings' },\n            { include: '@term' },\n            ['!important', 'keyword'],\n            [';', 'delimiter', '@pop'],\n            ['(?=})', { token: '', next: '@pop' }] // missing semicolon\n        ],\n        warndebug: [\n            ['[@](warn|debug)', { token: 'keyword', next: '@declarationbody' }]\n        ],\n        import: [\n            ['[@](import)', { token: 'keyword', next: '@declarationbody' }]\n        ],\n        urldeclaration: [\n            { include: '@strings' },\n            ['[^)\\r\\n]+', 'string'],\n            ['\\\\)', { token: 'delimiter.parenthesis', next: '@pop' }]\n        ],\n        parenthizedterm: [\n            { include: '@term' },\n            ['\\\\)', { token: 'delimiter.parenthesis', next: '@pop' }]\n        ],\n        declarationbody: [\n            { include: '@term' },\n            [';', 'delimiter', '@pop'],\n            ['(?=})', { token: '', next: '@pop' }] // missing semicolon\n        ],\n        comments: [\n            ['\\\\/\\\\*', 'comment', '@comment'],\n            ['\\\\/\\\\/+.*', 'comment']\n        ],\n        comment: [\n            ['\\\\*\\\\/', 'comment', '@pop'],\n            [/[^*/]+/, 'comment'],\n            [/./, 'comment'],\n        ],\n        name: [\n            ['@identifier', 'attribute.value']\n        ],\n        numbers: [\n            ['-?(\\\\d*\\\\.)?\\\\d+([eE][\\\\-+]?\\\\d+)?', { token: 'attribute.value.number', next: '@units' }],\n            ['#[0-9a-fA-F_]+(?!\\\\w)', 'attribute.value.hex']\n        ],\n        units: [\n            ['(em|ex|ch|rem|vmin|vmax|vw|vh|vm|cm|mm|in|px|pt|pc|deg|grad|rad|turn|s|ms|Hz|kHz|%)?', 'attribute.value.unit', '@pop']\n        ],\n        keyframedeclaration: [\n            ['@identifier', 'attribute.value'],\n            ['{', { token: 'delimiter.bracket', switchTo: '@keyframebody' }],\n        ],\n        keyframebody: [\n            { include: '@term' },\n            ['{', { token: 'delimiter.bracket', next: '@selectorbody' }],\n            ['}', { token: 'delimiter.bracket', next: '@pop' }],\n        ],\n        functioninvocation: [\n            ['@identifier\\\\(', { token: 'attribute.value', next: '@functionarguments' }],\n        ],\n        functionarguments: [\n            ['\\\\$@identifier@ws:', 'attribute.name'],\n            ['[,]', 'delimiter'],\n            { include: '@term' },\n            ['\\\\)', { token: 'attribute.value', next: '@pop' }],\n        ],\n        strings: [\n            ['~?\"', { token: 'string', next: '@stringenddoublequote' }],\n            ['~?\\'', { token: 'string', next: '@stringendquote' }]\n        ],\n        stringenddoublequote: [\n            ['\\\\\\\\.', 'string'],\n            ['\"', { token: 'string', next: '@pop' }],\n            [/[^\\\\\"]+/, 'string'],\n            ['.', 'string']\n        ],\n        stringendquote: [\n            ['\\\\\\\\.', 'string'],\n            ['\\'', { token: 'string', next: '@pop' }],\n            [/[^\\\\']+/, 'string'],\n            ['.', 'string']\n        ]\n    }\n};\n"],"names":["conf","wordPattern","comments","blockComment","brackets","autoClosingPairs","open","close","notIn","surroundingPairs","folding","markers","start","RegExp","end","language","defaultToken","tokenPostfix","ws","identifier","token","tokenizer","root","include","selector","next","selectorbody","selectorname","selectorattribute","term","rulevalue","warndebug","import","urldeclaration","parenthizedterm","declarationbody","comment","name","numbers","units","keyframedeclaration","switchTo","keyframebody","functioninvocation","functionarguments","strings","stringenddoublequote","stringendquote"],"sourceRoot":""}