{"version":3,"file":"static/js/7178.0140c359.chunk.js","mappings":"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","sources":["../node_modules/monaco-editor/esm/vs/basic-languages/swift/swift.js"],"sourcesContent":["/*!---------------------------------------------------------------------------------------------\n *  Copyright (C) David Owens II, owensd.io. All rights reserved.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\nexport var conf = {\n    comments: {\n        lineComment: '//',\n        blockComment: ['/*', '*/'],\n    },\n    brackets: [\n        ['{', '}'],\n        ['[', ']'],\n        ['(', ')']\n    ],\n    autoClosingPairs: [\n        { open: '{', close: '}' },\n        { open: '[', close: ']' },\n        { open: '(', close: ')' },\n        { open: '\"', close: '\"' },\n        { open: '\\'', close: '\\'' },\n        { open: '`', close: '`' },\n    ],\n    surroundingPairs: [\n        { open: '{', close: '}' },\n        { open: '[', close: ']' },\n        { open: '(', close: ')' },\n        { open: '\"', close: '\"' },\n        { open: '\\'', close: '\\'' },\n        { open: '`', close: '`' },\n    ]\n};\nexport var language = {\n    defaultToken: '',\n    tokenPostfix: '.swift',\n    // TODO(owensd): Support the full range of unicode valid identifiers.\n    identifier: /[a-zA-Z_][\\w$]*/,\n    // TODO(owensd): Support the @availability macro properly.\n    attributes: [\n        '@autoclosure', '@noescape', '@noreturn', '@NSApplicationMain', '@NSCopying', '@NSManaged',\n        '@objc', '@UIApplicationMain', '@noreturn', '@availability', '@IBAction', '@IBDesignable', '@IBInspectable', '@IBOutlet'\n    ],\n    accessmodifiers: ['public', 'private', 'internal'],\n    keywords: [\n        '__COLUMN__', '__FILE__', '__FUNCTION__', '__LINE__', 'as', 'as!', 'as?', 'associativity', 'break', 'case', 'catch',\n        'class', 'continue', 'convenience', 'default', 'deinit', 'didSet', 'do', 'dynamic', 'dynamicType',\n        'else', 'enum', 'extension', 'fallthrough', 'final', 'for', 'func', 'get', 'guard', 'if', 'import', 'in', 'infix',\n        'init', 'inout', 'internal', 'is', 'lazy', 'left', 'let', 'mutating', 'nil', 'none', 'nonmutating', 'operator',\n        'optional', 'override', 'postfix', 'precedence', 'prefix', 'private', 'protocol', 'Protocol', 'public',\n        'repeat', 'required', 'return', 'right', 'self', 'Self', 'set', 'static', 'struct', 'subscript', 'super', 'switch',\n        'throw', 'throws', 'try', 'try!', 'Type', 'typealias', 'unowned', 'var', 'weak', 'where', 'while', 'willSet', 'FALSE', 'TRUE'\n    ],\n    symbols: /[=(){}\\[\\].,:;@#\\_&\\-<>`?!+*\\\\\\/]/,\n    // Moved . to operatorstart so it can be a delimiter\n    operatorstart: /[\\/=\\-+!*%<>&|^~?\\u00A1-\\u00A7\\u00A9\\u00AB\\u00AC\\u00AE\\u00B0-\\u00B1\\u00B6\\u00BB\\u00BF\\u00D7\\u00F7\\u2016-\\u2017\\u2020-\\u2027\\u2030-\\u203E\\u2041-\\u2053\\u2055-\\u205E\\u2190-\\u23FF\\u2500-\\u2775\\u2794-\\u2BFF\\u2E00-\\u2E7F\\u3001-\\u3003\\u3008-\\u3030]/,\n    operatorend: /[\\u0300-\\u036F\\u1DC0-\\u1DFF\\u20D0-\\u20FF\\uFE00-\\uFE0F\\uFE20-\\uFE2F\\uE0100-\\uE01EF]/,\n    operators: /(@operatorstart)((@operatorstart)|(@operatorend))*/,\n    // TODO(owensd): These are borrowed from C#; need to validate correctness for Swift.\n    escapes: /\\\\(?:[abfnrtv\\\\\"']|x[0-9A-Fa-f]{1,4}|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8})/,\n    tokenizer: {\n        root: [\n            { include: '@comment' },\n            { include: '@attribute' },\n            { include: '@literal' },\n            { include: '@keyword' },\n            { include: '@invokedmethod' },\n            { include: '@symbol' },\n        ],\n        symbol: [\n            [/[{}()\\[\\]]/, '@brackets'],\n            [/[<>](?!@symbols)/, '@brackets'],\n            [/[.]/, 'delimiter'],\n            [/@operators/, 'operator'],\n            [/@symbols/, 'operator']\n        ],\n        comment: [\n            [/\\/\\/\\/.*$/, 'comment.doc'],\n            [/\\/\\*\\*/, 'comment.doc', '@commentdocbody'],\n            [/\\/\\/.*$/, 'comment'],\n            [/\\/\\*/, 'comment', '@commentbody']\n        ],\n        commentdocbody: [\n            [/\\/\\*/, 'comment', '@commentbody'],\n            [/\\*\\//, 'comment.doc', '@pop'],\n            [/\\:[a-zA-Z]+\\:/, 'comment.doc.param'],\n            [/./, 'comment.doc']\n        ],\n        commentbody: [\n            [/\\/\\*/, 'comment', '@commentbody'],\n            [/\\*\\//, 'comment', '@pop'],\n            [/./, 'comment']\n        ],\n        attribute: [\n            [/\\@@identifier/, {\n                    cases: {\n                        '@attributes': 'keyword.control',\n                        '@default': ''\n                    }\n                }]\n        ],\n        literal: [\n            [/\"/, { token: 'string.quote', next: '@stringlit' }],\n            [/0[b]([01]_?)+/, 'number.binary'],\n            [/0[o]([0-7]_?)+/, 'number.octal'],\n            [/0[x]([0-9a-fA-F]_?)+([pP][\\-+](\\d_?)+)?/, 'number.hex'],\n            [/(\\d_?)*\\.(\\d_?)+([eE][\\-+]?(\\d_?)+)?/, 'number.float'],\n            [/(\\d_?)+/, 'number']\n        ],\n        stringlit: [\n            [/\\\\\\(/, { token: 'operator', next: '@interpolatedexpression' }],\n            [/@escapes/, 'string'],\n            [/\\\\./, 'string.escape.invalid'],\n            [/\"/, { token: 'string.quote', next: '@pop' }],\n            [/./, 'string']\n        ],\n        interpolatedexpression: [\n            [/\\(/, { token: 'operator', next: '@interpolatedexpression' }],\n            [/\\)/, { token: 'operator', next: '@pop' }],\n            { include: '@literal' },\n            { include: '@keyword' },\n            { include: '@symbol' }\n        ],\n        keyword: [\n            [/`/, { token: 'operator', next: '@escapedkeyword' }],\n            [/@identifier/, {\n                    cases: {\n                        '@keywords': 'keyword', '[A-Z][\\a-zA-Z0-9$]*': 'type.identifier',\n                        '@default': 'identifier'\n                    }\n                }]\n        ],\n        escapedkeyword: [\n            [/`/, { token: 'operator', next: '@pop' }],\n            [/./, 'identifier']\n        ],\n        //\t\tsymbol: [\n        //\t\t\t[ /@symbols/, 'operator' ],\n        //\t\t\t[ /@operators/, 'operator' ]\n        //\t\t],\n        invokedmethod: [\n            [/([.])(@identifier)/, {\n                    cases: {\n                        '$2': ['delimeter', 'type.identifier'],\n                        '@default': ''\n                    }\n                }],\n        ]\n    }\n};\n"],"names":["conf","comments","lineComment","blockComment","brackets","autoClosingPairs","open","close","surroundingPairs","language","defaultToken","tokenPostfix","identifier","attributes","accessmodifiers","keywords","symbols","operatorstart","operatorend","operators","escapes","tokenizer","root","include","symbol","comment","commentdocbody","commentbody","attribute","cases","literal","token","next","stringlit","interpolatedexpression","keyword","escapedkeyword","invokedmethod"],"sourceRoot":""}