{"version":3,"file":"static/js/8383.083cfbdf.chunk.js","mappings":"2LAKO,IAAIA,EAAO,CACdC,SAAU,CACNC,YAAa,KAEjBC,SAAU,CACN,CAAC,IAAK,KAAM,CAAC,IAAK,KAClB,CAAC,KAAM,SACP,CAAC,QAAS,YACV,CAAC,MAAO,UACR,CAAC,MAAO,WAEZC,iBAAkB,CACd,CAAEC,KAAM,IAAKC,MAAO,IAAKC,MAAO,CAAC,SAAU,YAC3C,CAAEF,KAAM,IAAKC,MAAO,IAAKC,MAAO,CAAC,SAAU,YAC3C,CAAEF,KAAM,IAAKC,MAAO,IAAKC,MAAO,CAAC,SAAU,cAGxCC,EAAW,CAClBC,aAAc,GACdC,aAAc,MACdC,YAAY,EACZR,SAAU,CACN,CAAES,MAAO,kBAAmBP,KAAM,IAAKC,MAAO,KAC9C,CAAEM,MAAO,wBAAyBP,KAAM,IAAKC,MAAO,KAEpD,CAAEM,MAAO,iBAAkBP,KAAM,KAAMC,MAAO,SAC9C,CAAEM,MAAO,oBAAqBP,KAAM,QAASC,MAAO,YACpD,CAAEM,MAAO,kBAAmBP,KAAM,MAAOC,MAAO,UAChD,CAAEM,MAAO,kBAAmBP,KAAM,MAAOC,MAAO,WAEpDO,SAAU,CACN,OAAQ,SAAU,SAAU,QAAS,SAAU,WAC/C,MAAO,OAAQ,KAAM,OAAQ,MAAO,OAAQ,KAAM,SAEtDC,SAAU,CACN,KAAM,MAAO,QAAS,OAE1BC,UAAW,CAAC,IAAK,IAAK,KAAM,KAAM,KAAM,MAAO,KAAM,IAAK,IAAK,IAAK,IAAK,KAEzEC,WAAY,iBACZC,QAAS,oBACTC,QAAS,wEAETC,UAAW,CACPC,KAAM,CAEF,CAAEC,QAAS,eAEX,CAAC,uBAAwB,QAEzB,CAAC,cAAe,CACRC,MAAO,CACH,YAAa,CAAEV,MAAO,cACtB,aAAc,WACd,WAAY,mBAIxB,CAAC,qBAAsB,CACfU,MAAO,CACH,GAAM,CAAC,YAAa,eACpB,WAAY,MAIxB,CAAC,WAAY,gBACb,CAAC,MAAO,UAER,CAAC,WAAY,aACb,CAAC,WAAY,CACLA,MAAO,CACH,aAAc,WACd,WAAY,eAIxB,CAAC,kBAAmB,kBACpB,CAAC,IAAK,SAAU,YAEpBC,WAAY,CACR,CAAC,aAAc,IACf,CAAC,UAAW,YAEhBC,OAAQ,CACJ,CAAC,UAAW,UACZ,CAAC,WAAY,iBACb,CAAC,MAAO,yBACR,CAAC,MAAO,SAAU,U","sources":["../node_modules/monaco-editor/esm/vs/basic-languages/sb/sb.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\nexport var conf = {\n    comments: {\n        lineComment: '\\'',\n    },\n    brackets: [\n        ['(', ')'], ['[', ']'],\n        ['If', 'EndIf'],\n        ['While', 'EndWhile'],\n        ['For', 'EndFor'],\n        ['Sub', 'EndSub']\n    ],\n    autoClosingPairs: [\n        { open: '\"', close: '\"', notIn: ['string', 'comment'] },\n        { open: '(', close: ')', notIn: ['string', 'comment'] },\n        { open: '[', close: ']', notIn: ['string', 'comment'] },\n    ]\n};\nexport var language = {\n    defaultToken: '',\n    tokenPostfix: '.sb',\n    ignoreCase: true,\n    brackets: [\n        { token: 'delimiter.array', open: '[', close: ']' },\n        { token: 'delimiter.parenthesis', open: '(', close: ')' },\n        // Special bracket statement pairs\n        { token: 'keyword.tag-if', open: 'If', close: 'EndIf' },\n        { token: 'keyword.tag-while', open: 'While', close: 'EndWhile' },\n        { token: 'keyword.tag-for', open: 'For', close: 'EndFor' },\n        { token: 'keyword.tag-sub', open: 'Sub', close: 'EndSub' },\n    ],\n    keywords: [\n        'Else', 'ElseIf', 'EndFor', 'EndIf', 'EndSub', 'EndWhile',\n        'For', 'Goto', 'If', 'Step', 'Sub', 'Then', 'To', 'While'\n    ],\n    tagwords: [\n        'If', 'Sub', 'While', 'For'\n    ],\n    operators: ['>', '<', '<>', '<=', '>=', 'And', 'Or', '+', '-', '*', '/', '='],\n    // we include these common regular expressions\n    identifier: /[a-zA-Z_][\\w]*/,\n    symbols: /[=><:+\\-*\\/%\\.,]+/,\n    escapes: /\\\\(?:[abfnrtv\\\\\"']|x[0-9A-Fa-f]{1,4}|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8})/,\n    // The main tokenizer for our languages\n    tokenizer: {\n        root: [\n            // whitespace\n            { include: '@whitespace' },\n            // classes\n            [/(@identifier)(?=[.])/, 'type'],\n            // identifiers, tagwords, and keywords\n            [/@identifier/, {\n                    cases: {\n                        '@keywords': { token: 'keyword.$0' },\n                        '@operators': 'operator',\n                        '@default': 'variable.name'\n                    }\n                }],\n            // methods, properties, and events\n            [/([.])(@identifier)/, {\n                    cases: {\n                        '$2': ['delimiter', 'type.member'],\n                        '@default': ''\n                    }\n                }],\n            // numbers\n            [/\\d*\\.\\d+/, 'number.float'],\n            [/\\d+/, 'number'],\n            // delimiters and operators\n            [/[()\\[\\]]/, '@brackets'],\n            [/@symbols/, {\n                    cases: {\n                        '@operators': 'operator',\n                        '@default': 'delimiter'\n                    }\n                }],\n            // strings\n            [/\"([^\"\\\\]|\\\\.)*$/, 'string.invalid'],\n            [/\"/, 'string', '@string'],\n        ],\n        whitespace: [\n            [/[ \\t\\r\\n]+/, ''],\n            [/(\\').*$/, 'comment']\n        ],\n        string: [\n            [/[^\\\\\"]+/, 'string'],\n            [/@escapes/, 'string.escape'],\n            [/\\\\./, 'string.escape.invalid'],\n            [/\"C?/, 'string', '@pop']\n        ],\n    },\n};\n"],"names":["conf","comments","lineComment","brackets","autoClosingPairs","open","close","notIn","language","defaultToken","tokenPostfix","ignoreCase","token","keywords","tagwords","operators","identifier","symbols","escapes","tokenizer","root","include","cases","whitespace","string"],"sourceRoot":""}